# ============================================================================
# Development Dockerfile for React Frontend Application
# ============================================================================
#
# This Dockerfile creates a development-ready container for local development
# with hot module replacement (HMR), debugging tools, and live code updates.
#
# Key Features:
# - Full development dependencies included
# - Vite dev server with HMR support
# - Volume mounts for live code updates
# - Non-root user for security (matches production practices)
# - Health check endpoint for monitoring
#
# Build: docker build -f Dockerfile.dev -t frontend-dev .
# Run: docker run -p 5173:5173 -v $(pwd)/src:/app/src frontend-dev
#
# Best used with docker-compose.yml for full development environment
# ============================================================================

FROM node:20-alpine

# Install development dependencies
# wget for health checks, git for version control operations
RUN apk add --no-cache \
    wget \
    git

# Set working directory
WORKDIR /app

# Copy package files first for better layer caching
COPY package.json package-lock.json ./

# Install ALL dependencies (including devDependencies for development)
# Using BuildKit cache mount to speed up subsequent builds
RUN --mount=type=cache,target=/root/.npm \
    npm ci

# Copy source code and configuration files
# In development, these will be overridden by volume mounts
COPY . .

# Create non-root user for security best practices
# Matches production security model
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose Vite dev server port
EXPOSE 5173

# Health check to verify dev server is running
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:5173/ || exit 1

# Start Vite development server
# --host 0.0.0.0 allows access from outside the container
# HMR works through websockets on the same port
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
