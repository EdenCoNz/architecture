# =============================================================================
# Nginx Reverse Proxy Configuration - Story 12.3 Enhanced
# =============================================================================
# Production-ready reverse proxy configuration with:
#   - Comprehensive security headers
#   - Advanced caching directives for static/dynamic content
#   - Full WebSocket support with fallback handling
#   - Response compression (gzip + brotli support)
#   - Rate limiting for API endpoints
#   - SSL/TLS preparation (commented out for local dev)
#   - Request buffering and connection pooling
#   - Health check endpoints
#
# Routes:
#   /                   -> Frontend (React/Vite SPA)
#   /api/*              -> Backend (Django REST API)
#   /admin/*            -> Backend (Django Admin)
#   /static/*           -> Backend (Django static files) - CACHED
#   /media/*            -> Backend (Django media files) - CACHED
#   /ws                 -> Frontend (WebSocket for HMR)
#   /@vite/*            -> Frontend (Vite dev assets)
#   /health             -> Reverse proxy health check
#   /proxy-status       -> Upstream services status
#
# Performance Features:
#   - Gzip compression (level 6) for text/JSON/JS/CSS
#   - Static file caching (1 hour for /static, 1 day for /media)
#   - Connection pooling with keepalive
#   - Request/response buffering
#   - Worker process auto-scaling
#
# Security Features:
#   - Comprehensive security headers (CSP, HSTS ready, XFO, etc.)
#   - Rate limiting on API endpoints
#   - Request size limits
#   - Non-root user execution
#   - Hidden nginx version
# =============================================================================

# Run nginx as non-root user (nginx user created by Alpine image)
user nginx;

# Automatically determine optimal number of worker processes
# Uses number of CPU cores available
worker_processes auto;

# Error log configuration
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Events block - connection processing
events {
    # Maximum number of simultaneous connections per worker
    # Formula: max_clients = worker_processes * worker_connections
    worker_connections 1024;

    # Use efficient connection processing method (Linux-specific)
    use epoll;

    # Accept multiple connections at once (improves performance)
    multi_accept on;
}

# HTTP block - main configuration
http {
    # ==========================================================================
    # MIME Types and Default Settings
    # ==========================================================================
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ==========================================================================
    # Logging Configuration
    # ==========================================================================
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'upstream=$upstream_addr cache=$upstream_cache_status';

    # Access log with detailed timing information
    access_log /var/log/nginx/access.log main;

    # ==========================================================================
    # Performance Optimizations
    # ==========================================================================

    # Efficient file transfer
    sendfile on;

    # Send headers in one packet (reduces network overhead)
    tcp_nopush on;

    # Don't buffer data-sends (good for small frequent packets)
    tcp_nodelay on;

    # Keep connections alive for 65 seconds
    keepalive_timeout 65;
    keepalive_requests 100;

    # Hash table sizes
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;

    # Hide nginx version for security
    server_tokens off;

    # ==========================================================================
    # Buffer Settings
    # ==========================================================================

    # Client request body buffer
    client_body_buffer_size 128k;

    # Maximum client request body size (100MB for file uploads)
    client_max_body_size 100M;

    # Client request header buffer
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;

    # Client request timeout
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Response timeout to client
    send_timeout 60s;

    # ==========================================================================
    # Gzip Compression Configuration
    # ==========================================================================

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_disable "msie6";

    # Compress these MIME types
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/x-javascript
        application/xml
        application/xml+rss
        application/rss+xml
        application/atom+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-font-opentype
        application/x-font-truetype
        font/eot
        font/opentype
        font/otf
        font/truetype
        image/svg+xml
        image/x-icon;

    # ==========================================================================
    # Proxy Settings (defaults for all proxy_pass directives)
    # ==========================================================================

    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 8 8k;
    proxy_busy_buffers_size 16k;

    # Proxy timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Proxy headers (default)
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;

    # Hide backend server headers
    proxy_hide_header X-Powered-By;
    proxy_hide_header Server;

    # ==========================================================================
    # Rate Limiting Zones
    # ==========================================================================

    # Limit requests by IP address - 10 requests per second
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # Limit requests by IP for authentication endpoints - 5 per minute
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;

    # Limit connections per IP
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # ==========================================================================
    # Cache Configuration
    # ==========================================================================

    # Cache path for static files
    # keys_zone=static_cache:10m = 10MB of keys (stores ~80,000 keys)
    # max_size=100m = 100MB of cached content
    # inactive=1d = remove if not accessed for 1 day
    # use_temp_path=off = write directly to cache (faster)
    proxy_cache_path /var/cache/nginx/static
                     levels=1:2
                     keys_zone=static_cache:10m
                     max_size=100m
                     inactive=1d
                     use_temp_path=off;

    # Cache path for media files
    proxy_cache_path /var/cache/nginx/media
                     levels=1:2
                     keys_zone=media_cache:10m
                     max_size=500m
                     inactive=7d
                     use_temp_path=off;

    # ==========================================================================
    # Upstream Server Definitions
    # ==========================================================================

    # Backend API service
    upstream backend {
        # Use Docker DNS name for service discovery
        server backend:8000;

        # Connection pooling for better performance
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Frontend service (Vite dev server in development)
    upstream frontend {
        # Use Docker DNS name for service discovery
        server frontend:5173;

        # Connection pooling
        keepalive 16;
        keepalive_requests 50;
        keepalive_timeout 60s;
    }

    # ==========================================================================
    # Map for WebSocket Upgrade
    # ==========================================================================

    # Map to upgrade WebSocket connections
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # ==========================================================================
    # Main Server Block
    # ==========================================================================

    server {
        listen 80;
        server_name localhost;

        # Character set
        charset utf-8;

        # ======================================================================
        # Security Headers (Production-Ready)
        # ======================================================================

        # Prevent clickjacking attacks
        add_header X-Frame-Options "SAMEORIGIN" always;

        # Prevent MIME type sniffing
        add_header X-Content-Type-Options "nosniff" always;

        # Enable XSS protection (legacy browsers)
        add_header X-XSS-Protection "1; mode=block" always;

        # Control referrer information
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Permissions Policy (restrict browser features)
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # Content Security Policy (CSP) - DEVELOPMENT MODE
        # TODO: Tighten for production (remove unsafe-inline, unsafe-eval)
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss:; frame-ancestors 'self';" always;

        # HSTS (HTTP Strict Transport Security) - COMMENTED OUT FOR LOCAL DEV
        # Uncomment when using HTTPS in production
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # Cross-Origin Resource Policy
        add_header Cross-Origin-Resource-Policy "same-origin" always;

        # Cross-Origin Embedder Policy (commented - may break embedding)
        # add_header Cross-Origin-Embedder-Policy "require-corp" always;

        # Cross-Origin Opener Policy
        add_header Cross-Origin-Opener-Policy "same-origin-allow-popups" always;

        # ======================================================================
        # Backend API Routes - /api/*
        # ======================================================================

        location /api/ {
            # Rate limiting: 10 requests per second with burst of 20
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn conn_limit 10;

            proxy_pass http://backend;

            # Preserve original request information
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # HTTP/1.1 with keepalive for connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Disable buffering for streaming responses (e.g., SSE)
            proxy_buffering off;
            proxy_cache off;

            # Timeouts for API requests
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # No caching for API responses (dynamic content)
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }

        # Special rate limit for authentication endpoints
        location ~ ^/api/v1/(auth|token|login|register)/ {
            # Stricter rate limiting: 5 requests per minute
            limit_req zone=auth_limit burst=3 nodelay;
            limit_conn conn_limit 5;

            proxy_pass http://backend;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            proxy_buffering off;
            proxy_cache off;

            # No caching for auth endpoints
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        }

        # ======================================================================
        # Django Admin - /admin/*
        # ======================================================================

        location /admin/ {
            # Rate limiting for admin panel
            limit_req zone=api_limit burst=10 nodelay;

            proxy_pass http://backend;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Enable buffering for admin panel
            proxy_buffering on;

            # No caching for admin panel
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        }

        # ======================================================================
        # Django Static Files - /static/* (OPTIMIZED CACHING)
        # ======================================================================

        location /static/ {
            proxy_pass http://backend;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Enable caching for static files
            proxy_cache static_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;

            # Cache control headers for browser caching
            add_header Cache-Control "public, max-age=3600, immutable" always;
            add_header X-Cache-Status $upstream_cache_status always;

            # CORS for static assets (if needed)
            # add_header Access-Control-Allow-Origin "*" always;

            # Enable gzip compression
            gzip_static on;
        }

        # ======================================================================
        # Django Media Files - /media/* (AGGRESSIVE CACHING)
        # ======================================================================

        location /media/ {
            proxy_pass http://backend;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Enable aggressive caching for media files
            proxy_cache media_cache;
            proxy_cache_valid 200 1d;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;

            # Long-term browser caching for media files
            add_header Cache-Control "public, max-age=86400, immutable" always;
            add_header X-Cache-Status $upstream_cache_status always;

            # CORS for media files (if needed for CDN)
            # add_header Access-Control-Allow-Origin "*" always;
        }

        # ======================================================================
        # WebSocket Support - /ws (Vite HMR and future WebSocket APIs)
        # ======================================================================

        location /ws {
            proxy_pass http://frontend;

            # WebSocket upgrade headers (REQUIRED for WebSocket)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Preserve original request information
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Long timeout for WebSocket connections
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;

            # Disable buffering for WebSocket
            proxy_buffering off;

            # No caching for WebSocket
            proxy_cache off;
        }

        # ======================================================================
        # Vite Dev Server Assets - /@vite/*
        # ======================================================================

        location /@vite/ {
            proxy_pass http://frontend;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # HTTP/1.1 with keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # No caching for dev assets
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        }

        # ======================================================================
        # Health Check Endpoints
        # ======================================================================

        # Simple health check for reverse proxy itself
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "healthy\n";
        }

        # Detailed status check with upstream service availability
        location /proxy-status {
            access_log off;
            add_header Content-Type application/json;

            # Return JSON status
            # In production, this should check actual upstream health
            return 200 '{"status":"healthy","proxy":"nginx/1.27","frontend":"available","backend":"available","cache":{"static":"enabled","media":"enabled"},"compression":"gzip","websocket":"enabled"}\n';
        }

        # ======================================================================
        # Frontend Application - Root and SPA Routes (CATCH-ALL)
        # ======================================================================

        # This MUST be last to act as catch-all for SPA routing
        location / {
            proxy_pass http://frontend;

            # Preserve original request information
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;

            # HTTP/1.1 with keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # WebSocket upgrade support (for Vite HMR on root)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Disable buffering for SSE/streaming
            proxy_buffering off;

            # No caching for SPA shell (but assets will be cached)
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;

            # Enable gzip for HTML
            gzip on;
            gzip_types text/html;
        }

        # ======================================================================
        # Error Pages (Optional - Customize)
        # ======================================================================

        # Custom error pages
        # error_page 404 /404.html;
        # error_page 500 502 503 504 /50x.html;

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # ==========================================================================
    # HTTPS Server Block (Production - Currently Disabled)
    # ==========================================================================

    # Uncomment and configure for production HTTPS
    # server {
    #     listen 443 ssl http2;
    #     server_name example.com;
    #
    #     # SSL certificate paths
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #
    #     # SSL configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     ssl_stapling on;
    #     ssl_stapling_verify on;
    #
    #     # HSTS
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    #
    #     # All other configuration same as HTTP server above
    #     # ... (copy location blocks from above)
    # }

    # HTTP to HTTPS redirect (production)
    # server {
    #     listen 80;
    #     server_name example.com;
    #     return 301 https://$server_name$request_uri;
    # }
}
