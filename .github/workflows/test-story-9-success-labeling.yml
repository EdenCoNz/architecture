name: Test Story #9 - Success Labeling Logic

# Manual test workflow for Story #9: Implement Success Labeling Logic
# This workflow verifies that the bug resolver correctly labels issues
# when a fix attempt succeeds.

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to mark as pending-merge (successful fix)'
        required: true
        type: string

permissions:
  contents: read
  issues: write

jobs:
  test-success-labeling:
    name: Test Success Labeling
    runs-on: ubuntu-22.04
    timeout-minutes: 5

    steps:
      - name: Test Information
        run: |
          echo "=========================================="
          echo "Story #9 Test: Success Labeling Logic"
          echo "=========================================="
          echo ""
          echo "This test verifies the bug resolver can:"
          echo "  1. Detect successful fix completion"
          echo "  2. Add 'pending-merge' label to the resolved issue"
          echo "  3. Add success comment indicating fix is ready for merge"
          echo ""
          echo "Test Inputs:"
          echo "  - Issue Number: #${{ inputs.issue_number }}"
          echo "  - Action: mark_as_resolved"
          echo "  - Current Run Status: success"
          echo ""
          echo "=========================================="

      - name: Call Bug Resolver Workflow
        uses: ./.github/workflows/bug-resolver.yml
        with:
          current_run_status: "success"
          previous_issue_number: ${{ inputs.issue_number }}
          action: "mark_as_resolved"

      - name: Verify Results
        run: |
          ISSUE_NUMBER="${{ inputs.issue_number }}"
          echo "=========================================="
          echo "Verification: Check Issue Labels"
          echo "=========================================="
          echo ""
          echo "Fetching issue #$ISSUE_NUMBER details..."

          # Fetch issue with labels
          ISSUE_DATA=$(gh issue view $ISSUE_NUMBER \
            --json number,title,state,labels)

          echo "Issue Data:"
          echo "$ISSUE_DATA"
          echo ""

          # Check if pending-merge label exists
          HAS_PENDING_MERGE=$(echo "$ISSUE_DATA" | grep -o '"pending-merge"' || echo "")

          if [ -n "$HAS_PENDING_MERGE" ]; then
            echo "✓ SUCCESS: 'pending-merge' label found on issue #$ISSUE_NUMBER"
          else
            echo "✗ FAILURE: 'pending-merge' label NOT found on issue #$ISSUE_NUMBER"
            echo ""
            echo "Current labels:"
            echo "$ISSUE_DATA" | grep -o '"name":"[^"]*"' | cut -d'"' -f4 | while read label; do
              echo "  - $label"
            done
            exit 1
          fi

          echo ""
          echo "=========================================="
          echo "Verification: Check Issue Comments"
          echo "=========================================="
          echo ""

          # Fetch recent comments
          COMMENTS=$(gh issue view $ISSUE_NUMBER \
            --json comments)

          echo "Recent Comments Count: $(echo "$COMMENTS" | grep -o '"body"' | wc -l)"
          echo ""

          # Check if success comment exists
          COMMENT_TEXT=$(gh issue view $ISSUE_NUMBER \
            --json comments \
            --jq '.comments[] | select(.body | contains("completed successfully")) | .body' | tail -1)

          if [ -n "$COMMENT_TEXT" ]; then
            echo "✓ SUCCESS: Success comment found on issue #$ISSUE_NUMBER"
            echo ""
            echo "Comment Preview:"
            echo "$COMMENT_TEXT" | head -3
          else
            echo "✗ FAILURE: Success comment NOT found on issue #$ISSUE_NUMBER"
            exit 1
          fi

          echo ""
          echo "=========================================="
          echo "All Verification Checks Passed!"
          echo "=========================================="
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Summary
        if: always()
        run: |
          echo "## Story #9 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue Number**: #${{ inputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: mark_as_resolved" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Status**: success (fix completed successfully)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Acceptance Criteria Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Bug resolver detects successful fix completion" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Pending merge label ('pending-merge') applied to resolved issue" >> $GITHUB_STEP_SUMMARY
          echo "3. ✅ Issue status updated with success comment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View Updated Issue #${{ inputs.issue_number }}](https://github.com/${{ github.repository }}/issues/${{ inputs.issue_number }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Expected Changes:**" >> $GITHUB_STEP_SUMMARY
          echo "- Label: \`pending-merge\` added" >> $GITHUB_STEP_SUMMARY
          echo "- Comment: Success message indicating fix is ready for review and merge" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This workflow is part of Feature #7: Automated CI/CD Failure Resolution Flow (Story #9)*" >> $GITHUB_STEP_SUMMARY
