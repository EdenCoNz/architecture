name: Frontend CI/CD

# Trigger on pull requests and pushes to main branch
on:
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

# Explicit permissions (least privilege)
permissions:
  contents: write  # Needed for log-bugs job to commit changes
  pull-requests: write
  checks: write

# Prevent concurrent runs for same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ========================================================================
  # TESTING MODE: All jobs disabled except log-bugs
  # To re-enable: uncomment the jobs below and restore the original log-bugs configuration
  # ========================================================================

  # # Job 1: Lint and Format Check
  # lint:
  #   name: Lint and Format Check
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 10
  #
  #   defaults:
  #     run:
  #       working-directory: ./frontend
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #         cache-dependency-path: frontend/package-lock.json
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Run ESLint
  #       run: npm run lint
  #
  #     - name: Check Prettier formatting
  #       run: npm run format:check

  # # Job 2: Type Check
  # typecheck:
  #   name: TypeScript Type Check
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 10
  #
  #   defaults:
  #     run:
  #       working-directory: ./frontend
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #         cache-dependency-path: frontend/package-lock.json
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Run TypeScript type check
  #       run: npx tsc -b --noEmit

  # # Job 3: Build
  # build:
  #   name: Build Application
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 15
  #   needs: [lint, typecheck]  # Only build if lint and typecheck pass
  #
  #   defaults:
  #     run:
  #       working-directory: ./frontend
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #         cache-dependency-path: frontend/package-lock.json
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Build application
  #       run: npm run build
  #       env:
  #         NODE_ENV: production
  #
  #     - name: Upload build artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: frontend-build-${{ github.sha }}
  #         path: frontend/dist/
  #         retention-days: 7
  #         if-no-files-found: error
  #
  #     - name: Check build size
  #       run: |
  #         echo "## Build Statistics" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### Bundle Size" >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  #         du -sh dist/ >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### File Breakdown" >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  #         find dist -name "*.js" -o -name "*.css" | xargs du -h | sort -rh | head -10 >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # # Job 4: Security Audit
  # security:
  #   name: Security Audit
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 10
  #
  #   defaults:
  #     run:
  #       working-directory: ./frontend
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #         cache-dependency-path: frontend/package-lock.json
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Run npm audit
  #       run: npm audit --audit-level=moderate
  #       continue-on-error: true  # Don't fail build on audit issues, but report them
  #
  #     - name: Security audit summary
  #       if: always()
  #       run: |
  #         echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  #         npm audit --audit-level=moderate || echo "Security vulnerabilities detected - review above" >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # # Job 5: Docker Build and Test
  # docker:
  #   name: Build and Test Docker Image
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 20
  #   needs: [build]  # Run after build job succeeds
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Build Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./frontend
  #         file: ./frontend/Dockerfile
  #         push: false
  #         load: true
  #         tags: |
  #           frontend:${{ github.sha }}
  #           frontend:latest
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #
  #     - name: Start container for testing
  #       run: |
  #         echo "Starting Docker container for health check testing..."
  #         docker run -d --name frontend-test -p 8080:8080 frontend:${{ github.sha }}
  #
  #         echo "Waiting for container to be ready..."
  #         sleep 5
  #
  #         echo "Container status:"
  #         docker ps -a --filter name=frontend-test
  #
  #     - name: Test health endpoint
  #       run: |
  #         echo "Testing health endpoint..."
  #
  #         # Wait up to 30 seconds for health endpoint to respond
  #         max_attempts=30
  #         attempt=0
  #
  #         while [ $attempt -lt $max_attempts ]; do
  #           if curl -f http://localhost:8080/health; then
  #             echo "✅ Health check passed!"
  #             echo ""
  #             echo "Health endpoint response:"
  #             curl -s http://localhost:8080/health
  #             exit 0
  #           fi
  #
  #           echo "Attempt $((attempt + 1))/$max_attempts - waiting for health endpoint..."
  #           sleep 1
  #           attempt=$((attempt + 1))
  #         done
  #
  #         echo "❌ Health check failed after $max_attempts attempts"
  #         echo ""
  #         echo "Container logs:"
  #         docker logs frontend-test
  #         exit 1
  #
  #     - name: Test application root
  #       run: |
  #         echo "Testing application root endpoint..."
  #
  #         if curl -f -s http://localhost:8080/ | grep -q "<!DOCTYPE html>"; then
  #           echo "✅ Application root responds with HTML"
  #         else
  #           echo "❌ Application root did not respond with valid HTML"
  #           docker logs frontend-test
  #           exit 1
  #         fi
  #
  #     - name: Container logs on failure
  #       if: failure()
  #       run: |
  #         echo "## Docker Container Failure Logs" >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  #         docker logs frontend-test >> $GITHUB_STEP_SUMMARY 2>&1 || echo "Could not retrieve logs" >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  #
  #     - name: Stop and remove test container
  #       if: always()
  #       run: |
  #         docker stop frontend-test || true
  #         docker rm frontend-test || true
  #
  #     - name: Docker build summary
  #       if: success()
  #       run: |
  #         echo "## Docker Build Success" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "✅ Docker image built successfully" >> $GITHUB_STEP_SUMMARY
  #         echo "✅ Image tagged with commit SHA: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
  #         echo "✅ Image tagged with: \`latest\`" >> $GITHUB_STEP_SUMMARY
  #         echo "✅ Container health check passed" >> $GITHUB_STEP_SUMMARY
  #         echo "✅ Application serves HTML correctly" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### Image Details" >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  #         docker images frontend:${{ github.sha }} >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### Image Size" >> $GITHUB_STEP_SUMMARY
  #         docker images frontend:${{ github.sha }} --format "{{.Size}}" >> $GITHUB_STEP_SUMMARY

  # # Job 6: Deployment Readiness (only on main branch)
  # deployment-check:
  #   name: Deployment Readiness Check
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 5
  #   needs: [lint, typecheck, build, security, docker]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #
  #   steps:
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: frontend-build-${{ github.sha }}
  #         path: dist/
  #
  #     - name: Verify build artifacts
  #       run: |
  #         echo "## Deployment Readiness" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "✅ All checks passed" >> $GITHUB_STEP_SUMMARY
  #         echo "✅ Build artifacts generated successfully" >> $GITHUB_STEP_SUMMARY
  #         echo "✅ Docker image built and tested successfully" >> $GITHUB_STEP_SUMMARY
  #         echo "✅ Ready for deployment" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### Artifact Contents" >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  #         ls -lah dist/ >> $GITHUB_STEP_SUMMARY
  #         echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  #
  #     - name: Check index.html exists
  #       run: |
  #         if [ ! -f "dist/index.html" ]; then
  #           echo "❌ Error: index.html not found in build artifacts"
  #           exit 1
  #         fi
  #         echo "✅ index.html exists in build artifacts"

  # ========================================================================
  # Test Job: Intentional Failure (TESTING MODE)
  # This job always fails to trigger the log-bugs job
  # ========================================================================
  test-failure:
    name: Test Failure Job
    runs-on: ubuntu-22.04
    timeout-minutes: 5

    steps:
      - name: Simulate test failure
        run: |
          echo "This job is designed to always fail to test the log-bugs workflow"
          echo "Simulating test failure..."
          exit 1

  # ========================================================================
  # Job 7: Log bugs to JSON file (ACTIVE FOR TESTING)
  # ========================================================================
  log-bugs:
    name: Log Bug Report (Testing Mode)
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: [test-failure]
    # TESTING: Runs when test-failure job fails
    # Original configuration:
    #   needs: [lint, typecheck, build, security, docker]
    #   if: |
    #     failure() &&
    #     github.event_name == 'pull_request' &&
    #     startsWith(github.head_ref, 'feature/')
    # Current testing configuration: runs when test-failure fails
    if: |
      failure() &&
      github.event_name == 'pull_request' &&
      startsWith(github.head_ref, 'feature/')

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract feature ID from branch name
        id: feature
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch name: $BRANCH_NAME"

          # Extract feature ID from branch name (format: feature/{id})
          if [[ $BRANCH_NAME =~ ^feature/([0-9]+) ]]; then
            FEATURE_ID="${BASH_REMATCH[1]}"
            echo "Extracted feature ID: $FEATURE_ID"
            echo "feature_id=$FEATURE_ID" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          else
            echo "❌ Error: Could not extract feature ID from branch name: $BRANCH_NAME"
            exit 1
          fi

      - name: Determine which job failed
        id: failed-job
        run: |
          # Check which job failed and set appropriate title
          if [ "${{ needs.test-failure.result }}" == "failure" ]; then
            echo "title=Test failure job failed - simulated test failure" >> $GITHUB_OUTPUT
            echo "failed_job=test-failure" >> $GITHUB_OUTPUT
          else
            # Fallback for testing
            echo "title=Unknown job failure" >> $GITHUB_OUTPUT
            echo "failed_job=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Create or update bug log entry
        run: |
          BUG_FILE="docs/features/bug-log-template.json"
          FEATURE_ID="${{ steps.feature.outputs.feature_id }}"
          BRANCH_NAME="${{ steps.feature.outputs.branch_name }}"
          TITLE="${{ steps.failed-job.outputs.title }}"
          TODAY=$(date +%Y-%m-%d)

          echo "Creating bug entry:"
          echo "  Feature ID: $FEATURE_ID"
          echo "  Branch: $BRANCH_NAME"
          echo "  Title: $TITLE"
          echo "  Date: $TODAY"

          # Ensure jq is installed
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Read existing bug log
          if [ ! -f "$BUG_FILE" ]; then
            echo "❌ Error: Bug log file not found: $BUG_FILE"
            exit 1
          fi

          # Get the next bug ID (max bugID + 1)
          NEXT_BUG_ID=$(jq '[.bugs[].bugID] | max + 1' "$BUG_FILE")
          echo "Next bug ID: $NEXT_BUG_ID"

          # Create new bug entry
          NEW_BUG=$(jq -n \
            --arg bugID "$NEXT_BUG_ID" \
            --arg featureID "$FEATURE_ID" \
            --arg featureName "$BRANCH_NAME" \
            --arg title "$TITLE" \
            --arg reportedDate "$TODAY" \
            '{
              bugID: ($bugID | tonumber),
              featureID: ($featureID | tonumber),
              featureName: $featureName,
              title: $title,
              reportedDate: $reportedDate,
              isFixed: false,
              fixedDate: null
            }')

          # Append new bug to the bugs array
          jq --argjson newBug "$NEW_BUG" '.bugs += [$newBug]' "$BUG_FILE" > "${BUG_FILE}.tmp"
          mv "${BUG_FILE}.tmp" "$BUG_FILE"

          echo "✅ Bug entry added successfully"
          echo ""
          echo "Updated bug log:"
          cat "$BUG_FILE"

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push bug log
        run: |
          git add docs/features/bug-log-template.json

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "$(cat <<'EOF'
          Add bug report for ${{ steps.failed-job.outputs.title }}

          Bug ID: Auto-generated
          Feature: ${{ steps.feature.outputs.branch_name }}
          Failed Job: ${{ steps.failed-job.outputs.failed_job }}
          Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          🤖 Generated with [Claude Code](https://claude.com/claude-code)

          Co-Authored-By: Claude <noreply@anthropic.com>
          EOF
          )"

            git push
            echo "✅ Bug log committed and pushed successfully"
          fi

      - name: Add comment to PR with bug report
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            const failedJob = '${{ steps.failed-job.outputs.failed_job }}';
            const title = '${{ steps.failed-job.outputs.title }}';
            const featureId = '${{ steps.feature.outputs.feature_id }}';
            const branchName = '${{ steps.feature.outputs.branch_name }}';

            const comment = `## 🐛 Bug Logged

            A bug has been automatically logged to the bug tracking system.

            **Details:**
            - **Feature ID:** ${featureId}
            - **Branch:** \`${branchName}\`
            - **Failed Check:** ${failedJob}
            - **Issue:** ${title}
            - **Workflow Run:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            The bug has been added to \`docs/features/bug-log-template.json\` and will be tracked until resolved.

            ---
            🤖 _This comment was automatically generated by the CI/CD pipeline._`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });
