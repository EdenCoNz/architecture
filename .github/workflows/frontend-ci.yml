name: Frontend CI/CD

# Trigger only on pull requests to main branch
on:
  push:
    branches: [main, 'feature/**']
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  workflow_dispatch:  # Allow manual triggering

# Explicit permissions (least privilege)
permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

# Prevent concurrent runs for same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Lint and Format Check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    # Only run on feature branches for PRs, or always for manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  # Job 2: Type Check
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npx tsc -b --noEmit

  # Job 3: Unit Tests with Coverage
  test:
    name: Unit Tests with Coverage
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: frontend/coverage/
          retention-days: 30
          if-no-files-found: error

      - name: Generate coverage summary
        if: always()
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract coverage summary from text report
          if [ -f "coverage/coverage-summary.json" ]; then
            echo "### Overall Coverage" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Parse JSON coverage summary and format as table
            echo "| Metric | Coverage | Covered/Total |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|---------------|" >> $GITHUB_STEP_SUMMARY

            # Extract metrics using jq (available on ubuntu runners)
            TOTAL=$(cat coverage/coverage-summary.json | jq '.total')

            LINES_PCT=$(echo "$TOTAL" | jq -r '.lines.pct')
            LINES_COV=$(echo "$TOTAL" | jq -r '.lines.covered')
            LINES_TOT=$(echo "$TOTAL" | jq -r '.lines.total')
            echo "| Lines | ${LINES_PCT}% | ${LINES_COV}/${LINES_TOT} |" >> $GITHUB_STEP_SUMMARY

            STATEMENTS_PCT=$(echo "$TOTAL" | jq -r '.statements.pct')
            STATEMENTS_COV=$(echo "$TOTAL" | jq -r '.statements.covered')
            STATEMENTS_TOT=$(echo "$TOTAL" | jq -r '.statements.total')
            echo "| Statements | ${STATEMENTS_PCT}% | ${STATEMENTS_COV}/${STATEMENTS_TOT} |" >> $GITHUB_STEP_SUMMARY

            FUNCTIONS_PCT=$(echo "$TOTAL" | jq -r '.functions.pct')
            FUNCTIONS_COV=$(echo "$TOTAL" | jq -r '.functions.covered')
            FUNCTIONS_TOT=$(echo "$TOTAL" | jq -r '.functions.total')
            echo "| Functions | ${FUNCTIONS_PCT}% | ${FUNCTIONS_COV}/${FUNCTIONS_TOT} |" >> $GITHUB_STEP_SUMMARY

            BRANCHES_PCT=$(echo "$TOTAL" | jq -r '.branches.pct')
            BRANCHES_COV=$(echo "$TOTAL" | jq -r '.branches.covered')
            BRANCHES_TOT=$(echo "$TOTAL" | jq -r '.branches.total')
            echo "| Branches | ${BRANCHES_PCT}% | ${BRANCHES_COV}/${BRANCHES_TOT} |" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Full coverage reports are available as workflow artifacts." >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage summary file not found. Coverage report may not have been generated." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Post coverage report to PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./frontend/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          delete-old-comments: true

  # Job 4: Build
  build:
    name: Build Application
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    needs: [lint, typecheck, test]  # Only build if lint, typecheck, and test pass
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist/
          retention-days: 7
          if-no-files-found: error

      - name: Check build size
        run: |
          echo "## Build Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Bundle Size" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### File Breakdown" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -o -name "*.css" | xargs du -h | sort -rh | head -10 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Job 5: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true  # Don't fail build on audit issues, but report them

      - name: Security audit summary
        if: always()
        run: |
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=moderate || echo "Security vulnerabilities detected - review above" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Job 6: Auto-Close Issue from Commit Message
  auto-close-issue-from-commit:
    name: Auto-Close Issue from Commit Message
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    # Always run this job, regardless of whether previous jobs succeeded or failed
    if: always()
    permissions:
      issues: write
      contents: read

    steps:
      - name: Get commit message
        id: get-message
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PR events, fetch the latest commit message
            SHA="${{ github.event.pull_request.head.sha }}"
            MESSAGE=$(gh api repos/${{ github.repository }}/commits/${SHA} --jq '.commit.message')
            echo "sha=${SHA}" >> $GITHUB_OUTPUT
            echo "message<<EOF" >> $GITHUB_OUTPUT
            echo "${MESSAGE}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # For workflow_dispatch events, use the current commit
            SHA="${{ github.sha }}"
            MESSAGE=$(gh api repos/${{ github.repository }}/commits/${SHA} --jq '.commit.message')
            echo "sha=${SHA}" >> $GITHUB_OUTPUT
            echo "message<<EOF" >> $GITHUB_OUTPUT
            echo "${MESSAGE}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          echo "## Commit Message Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Extract issue numbers from commit message
        id: extract-issues
        run: |
          COMMIT_MESSAGE='${{ steps.get-message.outputs.message }}'

          echo "**Commit Message**:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$COMMIT_MESSAGE" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract issue numbers using pattern: "fix issue #123" or "Fix issue #123" (case insensitive)
          # This regex matches variations like:
          # - "fix issue #123"
          # - "Fix issue #456"
          # - "fixes issue #789"
          # - "fixed issue #999"
          ISSUE_NUMBERS=$(echo "$COMMIT_MESSAGE" | grep -iEo 'fix(es|ed)? issue #[0-9]+' | grep -oE '[0-9]+' | sort -u)

          if [ -z "$ISSUE_NUMBERS" ]; then
            echo "has_issues=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No issue references found in commit message" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Pattern**: Looking for 'fix issue #<number>' (case insensitive)" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Convert to comma-separated list for output
          ISSUE_LIST=$(echo "$ISSUE_NUMBERS" | tr '\n' ',' | sed 's/,$//')

          echo "has_issues=true" >> $GITHUB_OUTPUT
          echo "issue_list=$ISSUE_LIST" >> $GITHUB_OUTPUT
          echo "issue_count=$(echo "$ISSUE_NUMBERS" | wc -l)" >> $GITHUB_OUTPUT

          echo "✅ Found issue reference(s) in commit message:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for issue in $ISSUE_NUMBERS; do
            echo "- Issue #$issue" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Close referenced issues
        if: steps.extract-issues.outputs.has_issues == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ISSUE_LIST="${{ steps.extract-issues.outputs.issue_list }}"
          COMMIT_SHA="${{ steps.get-message.outputs.sha }}"
          WORKFLOW_STATUS="${{ job.status }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo "## Closing Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Convert comma-separated list to array
          IFS=',' read -ra ISSUES <<< "$ISSUE_LIST"

          for issue_number in "${ISSUES[@]}"; do
            echo "Processing issue #$issue_number..." >> $GITHUB_STEP_SUMMARY

            # Check if issue exists and is open
            ISSUE_STATE=$(gh issue view "$issue_number" --json state --jq '.state' 2>/dev/null || echo "not_found")

            if [ "$ISSUE_STATE" = "not_found" ]; then
              echo "⚠️ Issue #$issue_number not found, skipping..." >> $GITHUB_STEP_SUMMARY
              continue
            fi

            if [ "$ISSUE_STATE" = "CLOSED" ]; then
              echo "ℹ️ Issue #$issue_number is already closed, skipping..." >> $GITHUB_STEP_SUMMARY
              continue
            fi

            # Close the issue with a comment
            CLOSE_COMMENT="✅ Fixed in commit $COMMIT_SHA

          This issue has been automatically closed because it was referenced in a commit message with 'Fix issue #$issue_number'.

          **Workflow Run**: $RUN_URL
          **Workflow**: Frontend CI/CD"

            gh issue close "$issue_number" --comment "$CLOSE_COMMENT"

            if [ $? -eq 0 ]; then
              echo "✅ Successfully closed issue #$issue_number" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Failed to close issue #$issue_number" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Summary**: Processed ${{ steps.extract-issues.outputs.issue_count }} issue(s)" >> $GITHUB_STEP_SUMMARY

  # Job 8: Detect Workflow Failures
  detect-workflow-failures:
    name: Detect Workflow Failures
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    if: failure() || cancelled()
    permissions:
      issues: write
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Report workflow failure
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## Workflow Issue Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "⚠️ Workflow was manually triggered and had failures." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ job.status }}" == "cancelled" ]; then
            echo "⚠️ Workflow was cancelled." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ One or more jobs in this workflow have failed." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Creating GitHub issue for workflow failure..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Analyze workflow failures
        id: analyze-failures
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Fetch workflow run details
          RUN_ID="${{ github.run_id }}"

          echo "## Analyzing Workflow Failures" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID**: $RUN_ID" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Fetch all jobs for this workflow run
          JOBS_JSON=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs")

          # Count failed and cancelled jobs
          FAILED_JOBS=$(echo "$JOBS_JSON" | jq '[.jobs[] | select(.conclusion == "failure")] | length')
          CANCELLED_JOBS=$(echo "$JOBS_JSON" | jq '[.jobs[] | select(.conclusion == "cancelled")] | length')
          TOTAL_JOBS=$(echo "$JOBS_JSON" | jq '.total_count')

          echo "failed_jobs=$FAILED_JOBS" >> $GITHUB_OUTPUT
          echo "cancelled_jobs=$CANCELLED_JOBS" >> $GITHUB_OUTPUT
          echo "total_jobs=$TOTAL_JOBS" >> $GITHUB_OUTPUT

          # Extract first failed job details for issue creation
          FIRST_FAILED_JOB=$(echo "$JOBS_JSON" | jq -r '[.jobs[] | select(.conclusion == "failure")][0]')

          if [ "$FIRST_FAILED_JOB" != "null" ] && [ -n "$FIRST_FAILED_JOB" ]; then
            JOB_NAME=$(echo "$FIRST_FAILED_JOB" | jq -r '.name')
            JOB_ID=$(echo "$FIRST_FAILED_JOB" | jq -r '.id')
            JOB_URL=$(echo "$FIRST_FAILED_JOB" | jq -r '.html_url')
            FAILED_STEP=$(echo "$FIRST_FAILED_JOB" | jq -r '.steps[] | select(.conclusion == "failure") | .name' | head -n 1)

            if [ -z "$FAILED_STEP" ]; then
              FAILED_STEP="Job-level failure"
            fi

            echo "job_name=$JOB_NAME" >> $GITHUB_OUTPUT
            echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT
            echo "job_url=$JOB_URL" >> $GITHUB_OUTPUT
            echo "failed_step=$FAILED_STEP" >> $GITHUB_OUTPUT
            echo "has_failures=true" >> $GITHUB_OUTPUT

            echo "**First Failed Job**: $JOB_NAME" >> $GITHUB_STEP_SUMMARY
            echo "**Failed Step**: $FAILED_STEP" >> $GITHUB_STEP_SUMMARY
          else
            echo "has_failures=false" >> $GITHUB_OUTPUT
            echo "**Note**: No failed jobs found, workflow may have been cancelled" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Summary**:" >> $GITHUB_STEP_SUMMARY
          echo "- Total Jobs: $TOTAL_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "- Failed Jobs: $FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "- Cancelled Jobs: $CANCELLED_JOBS" >> $GITHUB_STEP_SUMMARY

      - name: Create failure tracking issue
        if: steps.analyze-failures.outputs.has_failures == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Extract metadata
          WORKFLOW_NAME="Frontend CI/CD"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          JOB_NAME="${{ steps.analyze-failures.outputs.job_name }}"
          FAILED_STEP="${{ steps.analyze-failures.outputs.failed_step }}"
          BRANCH="${{ github.ref_name }}"

          # Extract feature ID if this is a feature branch
          if [[ "$BRANCH" =~ ^feature/([0-9]+) ]]; then
            FEATURE_ID="${BASH_REMATCH[1]}"
            FEATURE_NAME="$BRANCH"
          else
            FEATURE_ID="N/A"
            FEATURE_NAME="N/A"
          fi

          # Determine PR URL
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_URL="${{ github.event.pull_request.html_url }}"
          else
            PR_URL="N/A"
          fi

          # Create issue title
          ISSUE_TITLE="Workflow Failure: $WORKFLOW_NAME - $JOB_NAME - $FAILED_STEP"

          # Write issue body to temp file using echo
          {
            echo "Workflow: $WORKFLOW_NAME - Job: $JOB_NAME - Step: $FAILED_STEP"
            echo ""
            echo "Branch: $BRANCH"
            echo ""
            echo "Metadata Table:"
            echo "- title: $ISSUE_TITLE"
            echo "- featureID: $FEATURE_ID"
            echo "- featureName: $FEATURE_NAME"
            echo "- jobName: $JOB_NAME"
            echo "- stepName: $FAILED_STEP"
            echo "- PRURL: $PR_URL"
            echo "- commitURL: $COMMIT_URL"
            echo "- runURL: $RUN_URL"
            echo ""
            echo "Review logs at runURL above, fix the issue, and commit with 'Fix issue #N' to auto-close."
          } > /tmp/issue_body.md

          # Check for duplicate by searching existing issues with same title
          echo "Checking for duplicate issues..." >> $GITHUB_STEP_SUMMARY

          DUPLICATE_NUMBER=$(gh issue list --state open --limit 100 --search "in:title $ISSUE_TITLE" --json number --jq '.[0].number // empty')

          if [ -n "$DUPLICATE_NUMBER" ]; then
            echo "⚠️ Duplicate issue found: #$DUPLICATE_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "Adding 'attempted' label to existing issue..." >> $GITHUB_STEP_SUMMARY

            gh issue edit "$DUPLICATE_NUMBER" --add-label "attempted" || true

            echo "✓ Updated existing issue #$DUPLICATE_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Issue URL**: https://github.com/${{ github.repository }}/issues/$DUPLICATE_NUMBER" >> $GITHUB_STEP_SUMMARY
          else
            echo "No duplicate found, creating new issue..." >> $GITHUB_STEP_SUMMARY

            # Create the issue from file
            ISSUE_URL=$(gh issue create \
              --title "$ISSUE_TITLE" \
              --body-file /tmp/issue_body.md)

            ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]*$')

            echo "✓ Created issue #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Issue URL**: $ISSUE_URL" >> $GITHUB_STEP_SUMMARY
          fi
