name: Frontend CI/CD

# Trigger on pull requests and pushes to main branch
on:
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

# Explicit permissions (least privilege)
permissions:
  contents: write  # Needed for log-bugs job to commit changes
  pull-requests: write
  checks: write
  actions: read  # Needed to fetch job logs and job information

# Prevent concurrent runs for same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Lint and Format Check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  # Job 2: Type Check
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npx tsc -b --noEmit

  # Job 3: Build
  build:
    name: Build Application
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    needs: [lint, typecheck]  # Only build if lint and typecheck pass

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist/
          retention-days: 7
          if-no-files-found: error

      - name: Check build size
        run: |
          echo "## Build Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Bundle Size" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### File Breakdown" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -o -name "*.css" | xargs du -h | sort -rh | head -10 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Job 4: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true  # Don't fail build on audit issues, but report them

      - name: Security audit summary
        if: always()
        run: |
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=moderate || echo "Security vulnerabilities detected - review above" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Job 5: Docker Build and Test
  docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: [build]  # Run after build job succeeds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          load: true
          tags: |
            frontend:${{ github.sha }}
            frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start container for testing
        run: |
          echo "Starting Docker container for health check testing..."
          docker run -d --name frontend-test -p 8080:8080 frontend:${{ github.sha }}

          echo "Waiting for container to be ready..."
          sleep 5

          echo "Container status:"
          docker ps -a --filter name=frontend-test

      - name: Test health endpoint
        run: |
          echo "Testing health endpoint..."

          # Wait up to 30 seconds for health endpoint to respond
          max_attempts=30
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:8080/health; then
              echo "✅ Health check passed!"
              echo ""
              echo "Health endpoint response:"
              curl -s http://localhost:8080/health
              exit 0
            fi

            echo "Attempt $((attempt + 1))/$max_attempts - waiting for health endpoint..."
            sleep 1
            attempt=$((attempt + 1))
          done

          echo "❌ Health check failed after $max_attempts attempts"
          echo ""
          echo "Container logs:"
          docker logs frontend-test
          exit 1

      - name: Test application root
        run: |
          echo "Testing application root endpoint..."

          if curl -f -s http://localhost:8080/ | grep -q "<!DOCTYPE html>"; then
            echo "✅ Application root responds with HTML"
          else
            echo "❌ Application root did not respond with valid HTML"
            docker logs frontend-test
            exit 1
          fi

      - name: Container logs on failure
        if: failure()
        run: |
          echo "## Docker Container Failure Logs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker logs frontend-test >> $GITHUB_STEP_SUMMARY 2>&1 || echo "Could not retrieve logs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Stop and remove test container
        if: always()
        run: |
          docker stop frontend-test || true
          docker rm frontend-test || true

      - name: Docker build summary
        if: success()
        run: |
          echo "## Docker Build Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker image built successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ Image tagged with commit SHA: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "✅ Image tagged with: \`latest\`" >> $GITHUB_STEP_SUMMARY
          echo "✅ Container health check passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Application serves HTML correctly" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker images frontend:${{ github.sha }} >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Size" >> $GITHUB_STEP_SUMMARY
          docker images frontend:${{ github.sha }} --format "{{.Size}}" >> $GITHUB_STEP_SUMMARY

  # Job 6: Deployment Readiness (only on main branch)
  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: [lint, typecheck, build, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: dist/

      - name: Verify build artifacts
        run: |
          echo "## Deployment Readiness" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All checks passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build artifacts generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker image built and tested successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ Ready for deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifact Contents" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lah dist/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Check index.html exists
        run: |
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Error: index.html not found in build artifacts"
            exit 1
          fi
          echo "✅ index.html exists in build artifacts"

  # Job 7: Log bugs and create GitHub issues
  log-bugs:
    name: Log Bug Report and Create Issue
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: [lint, typecheck, build, security, docker]
    if: |
      failure() &&
      github.event_name == 'pull_request' &&
      startsWith(github.head_ref, 'feature/')

    permissions:
      contents: read
      issues: write  # Required to create GitHub issues
      actions: read  # Required to fetch job logs and job information

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract feature ID from branch name
        id: feature
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch name: $BRANCH_NAME"

          # Extract feature ID from branch name (format: feature/{id})
          if [[ $BRANCH_NAME =~ ^feature/([0-9]+) ]]; then
            FEATURE_ID="${BASH_REMATCH[1]}"
            echo "Extracted feature ID: $FEATURE_ID"
            echo "feature_id=$FEATURE_ID" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          else
            echo "Could not extract feature ID from branch name: $BRANCH_NAME"
            echo "Using default feature ID: 0"
            echo "feature_id=0" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Determine which job failed
        id: failed-job
        run: |
          # Check which job failed and set appropriate title
          if [ "${{ needs.lint.result }}" == "failure" ]; then
            echo "title=Lint job failed - code quality issues detected" >> $GITHUB_OUTPUT
            echo "failed_job=Lint and Format Check" >> $GITHUB_OUTPUT
          elif [ "${{ needs.typecheck.result }}" == "failure" ]; then
            echo "title=TypeScript type check failed - type errors detected" >> $GITHUB_OUTPUT
            echo "failed_job=TypeScript Type Check" >> $GITHUB_OUTPUT
          elif [ "${{ needs.build.result }}" == "failure" ]; then
            echo "title=Build job failed - compilation errors detected" >> $GITHUB_OUTPUT
            echo "failed_job=Build Application" >> $GITHUB_OUTPUT
          elif [ "${{ needs.security.result }}" == "failure" ]; then
            echo "title=Security audit failed - vulnerabilities detected" >> $GITHUB_OUTPUT
            echo "failed_job=Security Audit" >> $GITHUB_OUTPUT
          elif [ "${{ needs.docker.result }}" == "failure" ]; then
            echo "title=Docker build or test failed - container issues detected" >> $GITHUB_OUTPUT
            echo "failed_job=Build and Test Docker Image" >> $GITHUB_OUTPUT
          else
            echo "title=Unknown job failure" >> $GITHUB_OUTPUT
            echo "failed_job=Unknown" >> $GITHUB_OUTPUT
          fi

      - name: Fetch failed job logs
        id: fetch-logs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          FAILED_JOB="${{ steps.failed-job.outputs.failed_job }}"
          RUN_ID="${{ github.run_id }}"
          REPO="${{ github.repository }}"

          echo "Fetching logs for job: $FAILED_JOB"

          # Get job ID
          JOBS_RESPONSE=$(mktemp)
          gh api "/repos/$REPO/actions/runs/$RUN_ID/jobs" > "$JOBS_RESPONSE" || {
            echo "Warning: Could not fetch jobs list"
            echo "failed_step=Unknown" >> $GITHUB_OUTPUT
            echo "log_excerpt=Could not retrieve logs" >> $GITHUB_OUTPUT
            rm -f "$JOBS_RESPONSE"
            exit 0
          }

          # Extract job ID
          JOB_ID=$(jq -r ".jobs[] | select(.name == \"$FAILED_JOB\") | .id" "$JOBS_RESPONSE")
          rm -f "$JOBS_RESPONSE"

          if [ -z "$JOB_ID" ]; then
            echo "Warning: Could not find job ID for: $FAILED_JOB"
            echo "failed_step=Unknown" >> $GITHUB_OUTPUT
            echo "log_excerpt=Could not retrieve job information" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found job ID: $JOB_ID"

          # Get the failed step name
          STEP_RESPONSE=$(mktemp)
          gh api "/repos/$REPO/actions/runs/$RUN_ID/jobs" > "$STEP_RESPONSE" || {
            echo "Warning: Could not fetch job details"
            echo "failed_step=Unknown" >> $GITHUB_OUTPUT
            rm -f "$STEP_RESPONSE"
          }

          FAILED_STEP=$(jq -r ".jobs[] | select(.id == $JOB_ID) | .steps[] | select(.conclusion == \"failure\") | .name" "$STEP_RESPONSE" | head -n 1)
          rm -f "$STEP_RESPONSE"

          if [ -z "$FAILED_STEP" ]; then
            FAILED_STEP="Unknown"
          fi

          echo "Failed step: $FAILED_STEP"
          # Sanitize output
          SAFE_FAILED_STEP=$(echo "$FAILED_STEP" | tr -cd '[:alnum:] _-')
          echo "failed_step=$SAFE_FAILED_STEP" >> $GITHUB_OUTPUT

          # Download job logs
          gh api "/repos/$REPO/actions/jobs/$JOB_ID/logs" > job_logs.txt || {
            echo "Warning: Could not download logs"
            echo "Could not retrieve logs" > job_logs.txt
          }

          # Extract relevant error lines (last 20 lines containing "error" or "failed")
          LOG_EXCERPT=$(grep -iE "(error|failed|exception)" job_logs.txt | tail -20 || tail -20 job_logs.txt)

          # Save excerpt to file for GitHub issue
          echo "$LOG_EXCERPT" > log_excerpt.txt

          echo "✅ Successfully processed logs ($(wc -l < job_logs.txt) lines)"

          # Set output for use in issue body (escaped for JSON)
          # Store in environment variable to avoid issues with multiline output
          echo "LOG_EXCERPT<<EOF" >> $GITHUB_ENV
          echo "$LOG_EXCERPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create bug log entry using template
        id: create-bug-log
        run: |
          FEATURE_ID="${{ steps.feature.outputs.feature_id }}"
          FEATURE_NAME="${{ steps.feature.outputs.branch_name }}"
          TITLE="${{ steps.failed-job.outputs.title }}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          FAILED_JOB="${{ steps.failed-job.outputs.failed_job }}"
          FAILED_STEP="${{ steps.fetch-logs.outputs.failed_step }}"

          # Read the template
          TEMPLATE_FILE="docs/templates/bug-log-template.md"

          if [ ! -f "$TEMPLATE_FILE" ]; then
            echo "Error: Template file not found at $TEMPLATE_FILE"
            exit 1
          fi

          # Read full logs
          if [ -f job_logs.txt ]; then
            LOG_DETAIL=$(cat job_logs.txt)
          else
            LOG_DETAIL="No logs available"
          fi

          # Create bug log content from template
          BUG_LOG_CONTENT=$(cat "$TEMPLATE_FILE")

          # Replace template variables using # as sed delimiter to avoid conflicts with | in Markdown tables
          BUG_LOG_CONTENT=$(echo "$BUG_LOG_CONTENT" | sed "s#| title |  |#| title | $TITLE |#")
          BUG_LOG_CONTENT=$(echo "$BUG_LOG_CONTENT" | sed "s#| featureID |  |#| featureID | $FEATURE_ID |#")
          BUG_LOG_CONTENT=$(echo "$BUG_LOG_CONTENT" | sed "s#| featureName |  |#| featureName | $FEATURE_NAME |#")
          BUG_LOG_CONTENT=$(echo "$BUG_LOG_CONTENT" | sed "s#| jobName |  |#| jobName | $FAILED_JOB |#")
          BUG_LOG_CONTENT=$(echo "$BUG_LOG_CONTENT" | sed "s#| stepName |  |#| stepName | $FAILED_STEP |#")
          BUG_LOG_CONTENT=$(echo "$BUG_LOG_CONTENT" | sed "s#| PRURL |  |#| PRURL | $PR_URL |#")
          BUG_LOG_CONTENT=$(echo "$BUG_LOG_CONTENT" | sed "s#| commitURL |  |#| commitURL | $COMMIT_URL |#")
          BUG_LOG_CONTENT=$(echo "$BUG_LOG_CONTENT" | sed "s#| runURL |  |#| runURL | $WORKFLOW_URL |#")

          # Write the populated template to file
          echo "$BUG_LOG_CONTENT" > bug_log.md

          # Add log details section with proper spacing
          echo "" >> bug_log.md
          echo '```' >> bug_log.md
          echo "$LOG_DETAIL" >> bug_log.md
          echo '```' >> bug_log.md

          echo "✅ Bug log created from template"
          echo ""
          echo "Bug log preview:"
          echo "===================="
          head -n 30 bug_log.md
          echo "..."

          # Save for issue creation
          echo "BUG_LOG_FILE=bug_log.md" >> $GITHUB_ENV

      - name: Create GitHub issue
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TITLE="${{ steps.failed-job.outputs.title }}"
          FEATURE_NAME="${{ steps.feature.outputs.branch_name }}"

          # Create the GitHub issue using ONLY the bug log template content
          ISSUE_URL=$(gh issue create \
            --title "[$FEATURE_NAME] $TITLE" \
            --body-file bug_log.md \
            --assignee "${{ github.event.pull_request.user.login }}")

          echo "✅ GitHub issue created: $ISSUE_URL"
          echo ""
          echo "Issue URL: $ISSUE_URL"

          # Save issue URL for summary
          echo "ISSUE_URL=$ISSUE_URL" >> $GITHUB_ENV

      - name: Add comment to PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"

          cat > pr_comment.md <<'COMMENT_EOF'
          ## CI/CD Failure Detected

          A CI/CD job has failed for this pull request. A bug report has been automatically created.

          **Failed Job**: ${{ steps.failed-job.outputs.failed_job }}
          **Failed Step**: ${{ steps.fetch-logs.outputs.failed_step }}

          **GitHub Issue**: ${{ env.ISSUE_URL }}
          **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          Please review the issue for detailed logs and resolution steps.
          COMMENT_EOF

          gh pr comment "$PR_NUMBER" --body-file pr_comment.md

          echo "✅ Comment added to PR #$PR_NUMBER"

      - name: Workflow summary
        if: always()
        run: |
          echo "## Bug Tracking Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ env.ISSUE_URL }}" ]; then
            echo "✅ **GitHub Issue Created**: ${{ env.ISSUE_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Bug log generated** from template" >> $GITHUB_STEP_SUMMARY
            echo "✅ **PR comment added** with failure details" >> $GITHUB_STEP_SUMMARY
          else
            echo "Warning: Issue creation may have failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Failure Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Feature**: ${{ steps.feature.outputs.branch_name }} (#${{ steps.feature.outputs.feature_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed Job**: ${{ steps.failed-job.outputs.failed_job }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed Step**: ${{ steps.fetch-logs.outputs.failed_step }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY