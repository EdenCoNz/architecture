name: Auto-Close Issue (Reusable)

# Reusable workflow to automatically close GitHub issues when a commit contains
# "Fix issue #N" and all CI jobs have passed successfully.
#
# Features:
# 1. Closes the issue referenced in the commit message (e.g., "Fix issue #117")
# 2. Extracts runURL metadata from the closed issue
# 3. Automatically closes all other open issues with matching runURL
# 4. Auto-closes the relevant PR if NO open issues remain in the repository
# 5. Provides comprehensive logging in GitHub Step Summary
#
# Usage:
#   jobs:
#     auto-close:
#       uses: ./.github/workflows/auto-close-issue.yml
#       with:
#         commit-message: ${{ github.event.head_commit.message }}
#         repository: ${{ github.repository }}
#         sha: ${{ github.sha }}
#         workflow-name: 'My Workflow Name'

on:
  workflow_call:
    inputs:
      commit-message:
        description: 'The commit message to parse for issue references'
        required: true
        type: string
      repository:
        description: 'The repository in owner/name format'
        required: true
        type: string
      sha:
        description: 'The commit SHA that fixed the issue'
        required: true
        type: string
      workflow-name:
        description: 'The name of the calling workflow (for reference in issue comments)'
        required: false
        type: string
        default: 'CI/CD workflow'

# Minimal required permissions for this workflow
permissions:
  issues: write
  contents: read
  pull-requests: write  # Required for auto-closing PRs when no issues remain

jobs:
  auto-close-issue:
    name: Auto-Close Issue
    runs-on: ubuntu-22.04
    timeout-minutes: 5

    steps:
      - name: Check for issue reference and close
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## Auto-Close Issue Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          COMMIT_MSG="${{ inputs.commit-message }}"
          echo "Commit message: $COMMIT_MSG" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract issue number from "Fix issue #42" or "Fix issue 42" pattern
          # Using case-insensitive matching for "fix issue"
          ISSUE_NUMBER=$(echo "$COMMIT_MSG" | grep -ioE 'fix issue #?([0-9]+)' | grep -oE '[0-9]+' | head -n 1)

          if [ -z "$ISSUE_NUMBER" ]; then
            echo "ℹ️ No issue reference found in commit message" >> $GITHUB_STEP_SUMMARY
            echo "Pattern searched: 'Fix issue #N' or 'Fix issue N' (case-insensitive)" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "Found issue reference: #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if issue exists and is open
          ISSUE_STATE=$(gh issue view "$ISSUE_NUMBER" --repo "${{ inputs.repository }}" --json state --jq '.state' 2>&1 || echo "ERROR")

          if [ "$ISSUE_STATE" == "ERROR" ]; then
            echo "⚠️ Issue #$ISSUE_NUMBER does not exist or is not accessible" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          if [ "$ISSUE_STATE" == "CLOSED" ]; then
            echo "ℹ️ Issue #$ISSUE_NUMBER is already closed" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Get the issue body to extract metadata BEFORE closing
          echo "Fetching issue #$ISSUE_NUMBER metadata..." >> $GITHUB_STEP_SUMMARY
          ISSUE_BODY=$(gh issue view "$ISSUE_NUMBER" --repo "${{ inputs.repository }}" --json body --jq '.body' 2>&1 || echo "")

          # Extract runURL from the issue body table format
          # Example: | runURL | https://github.com/owner/repo/actions/runs/12345 |
          RUN_URL=$(echo "$ISSUE_BODY" | grep -i '|[[:space:]]*runURL[[:space:]]*|' | sed 's/^.*|[[:space:]]*runURL[[:space:]]*|[[:space:]]*\([^|]*\)[[:space:]]*|.*/\1/' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Log extracted metadata
          if [ -n "$RUN_URL" ] && [ "$RUN_URL" != "N/A" ]; then
            echo "Extracted metadata:" >> $GITHUB_STEP_SUMMARY
            echo "- runURL: $RUN_URL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "No runURL metadata found (runURL: ${RUN_URL:-none})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Close the issue with a comment
          echo "Attempting to close issue #$ISSUE_NUMBER..." >> $GITHUB_STEP_SUMMARY

          COMMENT="Automatically closed by commit ${{ inputs.sha }} (${{ inputs.workflow-name }} succeeded)"

          if gh issue close "$ISSUE_NUMBER" --repo "${{ inputs.repository }}" --comment "$COMMENT"; then
            echo "✅ Successfully closed issue #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Issue URL: https://github.com/${{ inputs.repository }}/issues/$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to close issue #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "This may be due to insufficient permissions or the issue being in an unexpected state" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # ===================================================================
          # Bulk close matching issues based on runURL
          # ===================================================================
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Bulk Close Matching Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Skip bulk close if no metadata or runURL is N/A or empty
          if [ -z "$RUN_URL" ] || [ "$RUN_URL" == "N/A" ]; then
            echo "ℹ️ Skipping bulk close: Initial issue has no runURL metadata" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Query all open issues
          echo "Querying all open issues..." >> $GITHUB_STEP_SUMMARY
          OPEN_ISSUES=$(gh issue list --repo "${{ inputs.repository }}" --state open --json number,body --limit 1000 2>&1 || echo "[]")

          if [ "$OPEN_ISSUES" == "[]" ]; then
            echo "ℹ️ No other open issues found" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Parse through open issues and find matches
          MATCHING_ISSUES=()
          CLOSED_COUNT=0
          FAILED_ISSUES=()

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Searching for issues with matching metadata:" >> $GITHUB_STEP_SUMMARY
          echo "- runURL: $RUN_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Use python to parse JSON (more reliable than bash JSON parsing)
          # Create a temporary Python script to extract matching issue numbers
          cat > /tmp/find_matching_issues.py << 'EOF'
          import json
          import sys
          import re

          data = json.loads(sys.stdin.read())
          target_run_url = sys.argv[1]
          exclude_issue = sys.argv[2]

          matching_issues = []

          for issue in data:
              issue_number = str(issue.get('number', ''))
              issue_body = issue.get('body', '')

              if issue_number == exclude_issue:
                  continue

              # Extract runURL from issue body table format
              # Example: | runURL | https://github.com/owner/repo/actions/runs/12345 |
              run_url_match = re.search(r'\|\s*runURL\s*\|\s*([^|]+?)\s*\|', issue_body, re.IGNORECASE)

              if run_url_match:
                  issue_run_url = run_url_match.group(1).strip()

                  # Match runURL (skip if N/A or empty)
                  if issue_run_url and issue_run_url != "N/A" and issue_run_url == target_run_url:
                      matching_issues.append(issue_number)

          for issue in matching_issues:
              print(issue)
          EOF

          MATCHING_ISSUE_NUMBERS=$(echo "$OPEN_ISSUES" | python3 /tmp/find_matching_issues.py "$RUN_URL" "$ISSUE_NUMBER" 2>&1 || echo "")
          rm -f /tmp/find_matching_issues.py

          if [ -z "$MATCHING_ISSUE_NUMBERS" ]; then
            echo "ℹ️ No additional issues with matching metadata found" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Count matching issues
          MATCH_COUNT=$(echo "$MATCHING_ISSUE_NUMBERS" | wc -l)
          echo "Found $MATCH_COUNT additional issue(s) with matching metadata:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Close each matching issue
          while IFS= read -r MATCH_ISSUE; do
            if [ -n "$MATCH_ISSUE" ]; then
              echo "Closing issue #$MATCH_ISSUE..." >> $GITHUB_STEP_SUMMARY

              BULK_COMMENT="Automatically closed - resolved in the same run as issue #${ISSUE_NUMBER} by commit ${{ inputs.sha }} (${{ inputs.workflow-name }} succeeded)"

              if gh issue close "$MATCH_ISSUE" --repo "${{ inputs.repository }}" --comment "$BULK_COMMENT" 2>&1; then
                echo "  ✅ Successfully closed issue #$MATCH_ISSUE" >> $GITHUB_STEP_SUMMARY
                CLOSED_COUNT=$((CLOSED_COUNT + 1))
              else
                echo "  ⚠️ Failed to close issue #$MATCH_ISSUE" >> $GITHUB_STEP_SUMMARY
                FAILED_ISSUES+=("$MATCH_ISSUE")
              fi
            fi
          done <<< "$MATCHING_ISSUE_NUMBERS"

          # Summary report
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Initial issue closed: #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "- Additional issues closed: $CLOSED_COUNT" >> $GITHUB_STEP_SUMMARY

          if [ ${#FAILED_ISSUES[@]} -gt 0 ]; then
            echo "- Failed to close: ${#FAILED_ISSUES[@]} issue(s)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Failed issues:" >> $GITHUB_STEP_SUMMARY
            for failed in "${FAILED_ISSUES[@]}"; do
              echo "  - #$failed" >> $GITHUB_STEP_SUMMARY
            done
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Total issues closed: $((CLOSED_COUNT + 1))" >> $GITHUB_STEP_SUMMARY

          # ===================================================================
          # Auto-close PR if no open issues remain
          # ===================================================================
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Auto-Close Pull Request Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count open issues in the repository
          echo "Checking for remaining open issues..." >> $GITHUB_STEP_SUMMARY
          OPEN_ISSUE_COUNT=$(gh issue list --repo "${{ inputs.repository }}" --state open --json number --jq 'length' 2>&1 || echo "0")

          echo "Open issues count: $OPEN_ISSUE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Only proceed if there are NO open issues
          if [ "$OPEN_ISSUE_COUNT" != "0" ]; then
            echo "ℹ️ Skipping PR auto-close: $OPEN_ISSUE_COUNT open issue(s) still exist" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "✅ No open issues found - checking for relevant PR to close" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Identify the relevant PR to close
          # Strategy: Find PR associated with the commit SHA
          PR_NUMBER=$(gh pr list --repo "${{ inputs.repository }}" --state open --json number,commits --jq ".[] | select(.commits[].oid == \"${{ inputs.sha }}\") | .number" 2>&1 | head -n 1 || echo "")

          # If no PR found by commit SHA, try finding PR by branch
          if [ -z "$PR_NUMBER" ]; then
            # Extract branch name from the workflow run
            BRANCH_NAME=$(gh api "repos/${{ inputs.repository }}/commits/${{ inputs.sha }}" --jq '.commit.tree.sha' 2>&1 || echo "")

            # Try to find PR by checking which PR's head SHA matches our commit
            if [ -n "$BRANCH_NAME" ]; then
              PR_NUMBER=$(gh pr list --repo "${{ inputs.repository }}" --state open --json number,headRefOid --jq ".[] | select(.headRefOid == \"${{ inputs.sha }}\") | .number" 2>&1 | head -n 1 || echo "")
            fi
          fi

          # If still no PR found, log and exit
          if [ -z "$PR_NUMBER" ]; then
            echo "ℹ️ No relevant PR found associated with commit ${{ inputs.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "This is normal if the commit was pushed directly to the branch without a PR" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "Found relevant PR: #$PR_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Close the PR with a comment
          echo "Attempting to close PR #$PR_NUMBER..." >> $GITHUB_STEP_SUMMARY

          # Create PR comment and close
          PR_CLOSE_OUTPUT=$(gh pr close "$PR_NUMBER" \
            --repo "${{ inputs.repository }}" \
            --comment "Automatically closing this PR because all issues have been resolved. All related issues have been closed by commit ${{ inputs.sha }} (${{ inputs.workflow-name }} succeeded), and there are no remaining open issues in the repository. Issue count: 0. All work completed!" \
            2>&1)
          PR_CLOSE_EXIT=$?

          if [ $PR_CLOSE_EXIT -eq 0 ]; then
            echo "✅ Successfully closed PR #$PR_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "PR URL: https://github.com/${{ inputs.repository }}/pull/$PR_NUMBER" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Failed to close PR #$PR_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "This may be due to insufficient permissions or the PR being in an unexpected state" >> $GITHUB_STEP_SUMMARY
            # Don't exit with error - this is not critical to workflow success
          fi
