name: Sync to Proform Repository

# This workflow syncs specific folders (.claude and context) to the target repository
# at https://github.com/EdenCoNz/proform
#
# IMPORTANT: Before running this workflow, you must configure the following secrets:
# - TARGET_REPO_PAT: A GitHub Personal Access Token (classic or fine-grained) with permissions to push to the target repo
#
# To create a Personal Access Token (PAT):
# 1. Go to GitHub Settings → Developer settings → Personal access tokens
# 2. For Classic PAT: Select 'repo' scope (full control of private repositories)
# 3. For Fine-grained PAT (recommended):
#    - Repository access: Only select repositories → EdenCoNz/proform
#    - Permissions: Contents (Read and Write)
# 4. Copy the generated token
# 5. In this repository: Settings → Secrets and variables → Actions → New repository secret
#    Name: TARGET_REPO_PAT
#    Value: <paste your token>
#
# Security Note: Fine-grained PATs are recommended as they provide minimal required permissions
# and can be scoped to specific repositories.

on:
  # Trigger automatically on pushes to main branch
  push:
    branches:
      - main
    paths:
      - '.claude/**'
      - 'context/**'
      - '.github/workflows/sync-to-proform.yml'

  # Also allow manual trigger
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run without pushing changes'
        required: false
        type: boolean
        default: false

# Explicit permissions (least privilege principle)
permissions:
  contents: read
  pull-requests: write  # Required for creating PRs via gh CLI

jobs:
  sync:
    name: Sync folders to Proform
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    steps:
      - name: Checkout source repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          fetch-depth: 0  # Full history for proper git operations

      - name: Validate folders exist
        run: |
          echo "Validating required folders..."

          if [ ! -d ".claude" ]; then
            echo "ERROR: .claude folder not found"
            exit 1
          fi

          if [ ! -d "context" ]; then
            echo "ERROR: context folder not found"
            exit 1
          fi

          echo "✓ All required folders found"

          echo "Folder contents summary:"
          echo "📁 .claude:"
          find .claude -type f | wc -l | xargs echo "  Files:"

          echo "📁 context:"
          find context -type f | wc -l | xargs echo "  Files:"

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone target repository
        env:
          TARGET_REPO_PAT: ${{ secrets.TARGET_REPO_PAT }}
        run: |
          echo "Cloning target repository..."

          # Clone using PAT authentication
          git clone "https://x-access-token:${TARGET_REPO_PAT}@github.com/EdenCoNz/proform.git" target-repo

          cd target-repo

          # Verify we're in the right repository
          echo "Target repository: $(git remote get-url origin)"
          echo "Current branch: $(git branch --show-current)"

      - name: Sync folders
        run: |
          echo "Syncing folders to target repository..."

          cd target-repo

          # Remove existing folders in target (clean sync)
          echo "Removing existing folders in target..."
          rm -rf .claude context

          # Copy folders from source
          echo "Copying .claude folder..."
          cp -r ../.claude .

          echo "Copying context folder..."
          cp -r ../context .

          # Show what changed
          echo ""
          echo "Changes to be committed:"
          git status --short

      - name: Calculate next branch ID
        id: branch-id
        run: |
          cd target-repo

          echo "Fetching all remote branches..."
          git fetch origin

          echo "Finding existing bau/architecture-sync-* branches..."
          # Get all remote branches matching the pattern
          EXISTING_BRANCHES=$(git branch -r | grep -oE 'bau/architecture-sync-[0-9]+' || true)

          # Extract the highest number
          HIGHEST_ID=0
          if [ -n "$EXISTING_BRANCHES" ]; then
            echo "Existing branches found:"
            echo "$EXISTING_BRANCHES"

            # Extract numbers and find the maximum
            while IFS= read -r branch; do
              if [ -n "$branch" ]; then
                ID=$(echo "$branch" | grep -oE '[0-9]+$')
                if [ "$ID" -gt "$HIGHEST_ID" ]; then
                  HIGHEST_ID=$ID
                fi
              fi
            done <<< "$EXISTING_BRANCHES"
          else
            echo "No existing bau/architecture-sync-* branches found"
          fi

          # Calculate next ID
          NEXT_ID=$((HIGHEST_ID + 1))
          BRANCH_NAME="bau/architecture-sync-${NEXT_ID}"

          echo "Highest existing ID: $HIGHEST_ID"
          echo "Next ID: $NEXT_ID"
          echo "Branch name: $BRANCH_NAME"

          # Export for use in subsequent steps
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "branch_id=${NEXT_ID}" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        env:
          DRY_RUN: ${{ inputs.dry_run }}
          BRANCH_NAME: ${{ steps.branch-id.outputs.branch_name }}
          TARGET_REPO_PAT: ${{ secrets.TARGET_REPO_PAT }}
        run: |
          cd target-repo

          # Check if there are changes to commit
          if [[ -z $(git status --porcelain) ]]; then
            echo "✓ No changes detected - folders are already in sync"
            echo "no_changes=true" >> $GITHUB_ENV
            exit 0
          fi

          # Create and checkout new branch
          echo "Creating new branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"

          # Stage all changes
          git add .claude context

          # Create commit with detailed message using heredoc
          COMMIT_MSG=$(cat <<'COMMITMSG'
          Sync .claude and context folders from architecture repository

          Synced folders:
          - .claude/ (Claude AI commands, agents, and configurations)
          - context/ (Project context and documentation)

          Source commit: ${{ github.sha }}
          Triggered by: ${{ github.actor }}
          Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          COMMITMSG
          )
          # Remove leading whitespace from each line
          COMMIT_MSG=$(echo "$COMMIT_MSG" | sed 's/^          //')

          git commit -m "$COMMIT_MSG"

          # Show commit details
          echo ""
          echo "Commit created:"
          git log -1 --stat

          # Push changes (unless dry run)
          if [[ "$DRY_RUN" == "true" ]]; then
            echo ""
            echo "🔍 DRY RUN MODE - Changes were committed locally but NOT pushed"
            echo "The following would have been pushed to branch $BRANCH_NAME:"
            git log origin/main..HEAD --oneline
            echo "no_changes=false" >> $GITHUB_ENV
          else
            echo ""
            echo "Pushing changes to branch $BRANCH_NAME..."
            git push origin "$BRANCH_NAME"
            echo "✅ Successfully pushed changes to branch $BRANCH_NAME"
            echo "no_changes=false" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.no_changes != 'true' && inputs.dry_run != true
        env:
          BRANCH_NAME: ${{ steps.branch-id.outputs.branch_name }}
          BRANCH_ID: ${{ steps.branch-id.outputs.branch_id }}
          GH_TOKEN: ${{ secrets.TARGET_REPO_PAT }}
        run: |
          cd target-repo

          echo "Creating Pull Request for branch $BRANCH_NAME..."

          # Create PR body with detailed information
          PR_BODY=$(cat <<'PRBODY'
          ## Architecture Sync #${{ steps.branch-id.outputs.branch_id }}

          This PR syncs the `.claude` and `context` folders from the architecture repository.

          ### Synced Folders
          - `.claude/` - Claude AI commands, agents, and configurations
          - `context/` - Project context and documentation

          ### Source Information
          - **Source Repository:** ${{ github.repository }}
          - **Source Commit:** ${{ github.sha }}
          - **Triggered By:** @${{ github.actor }}
          - **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ### Review Checklist
          - [ ] Verify `.claude` folder contents are correct
          - [ ] Verify `context` folder contents are correct
          - [ ] Check for any unexpected file deletions
          - [ ] Ensure no sensitive information is included

          ---
          *This PR was automatically generated by the sync workflow.*
          PRBODY
          )

          # Create the PR using gh CLI
          PR_URL=$(gh pr create \
            --title "Sync architecture config and context #$BRANCH_ID" \
            --body "$PR_BODY" \
            --base main \
            --head "$BRANCH_NAME" \
            --repo EdenCoNz/proform)

          if [ $? -eq 0 ]; then
            echo "✅ Pull Request created successfully!"
            echo "PR URL: $PR_URL"
            echo "pr_url=${PR_URL}" >> $GITHUB_ENV
          else
            echo "❌ Failed to create Pull Request"
            exit 1
          fi

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Sync Operation Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Source Repository: ${{ github.repository }}"
          echo "Target Repository: EdenCoNz/proform"
          echo "Source Commit: ${{ github.sha }}"
          echo "Triggered by: @${{ github.actor }}"
          echo "Branch Created: ${{ steps.branch-id.outputs.branch_name }}"
          echo "Dry Run: ${{ inputs.dry_run }}"

          if [ -n "${{ env.pr_url }}" ]; then
            echo "Pull Request: ${{ env.pr_url }}"
          elif [ "${{ env.no_changes }}" == "true" ]; then
            echo "Result: No changes to sync"
          elif [ "${{ inputs.dry_run }}" == "true" ]; then
            echo "Result: Dry run - no PR created"
          fi

          echo "Status: ${{ job.status }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
