name: Validate Job Mappings

# This workflow validates that all jobs in CI/CD workflows follow proper naming conventions
# and have the required 'name' field to ensure dynamic job mapping works correctly.
#
# Why this matters:
# - The bug-logger workflow dynamically extracts job IDs and names from workflow files
# - Missing or inconsistent job names break the job matching logic
# - This validation catches issues at PR time before they reach production

on:
  pull_request:
    paths:
      - '.github/workflows/backend-ci.yml'
      - '.github/workflows/frontend-ci.yml'
      - '.github/workflows/**-ci.yml'
  push:
    branches: [main]
    paths:
      - '.github/workflows/backend-ci.yml'
      - '.github/workflows/frontend-ci.yml'
      - '.github/workflows/**-ci.yml'
  workflow_dispatch:  # Allow manual validation

permissions:
  contents: read
  pull-requests: write  # To comment on PRs with validation results

jobs:
  validate-job-names:
    name: Validate Job Names in CI Workflows
    runs-on: ubuntu-22.04
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq for YAML parsing
        run: |
          echo "Installing yq (YAML processor)..."
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Validate backend-ci.yml job mappings
        id: validate-backend
        run: |
          echo "=========================================="
          echo "Validating backend-ci.yml Job Mappings"
          echo "=========================================="
          echo ""

          WORKFLOW_FILE=".github/workflows/backend-ci.yml"
          VALIDATION_PASSED=true
          MISSING_NAMES=""
          DUPLICATE_NAMES=""

          if [ ! -f "$WORKFLOW_FILE" ]; then
            echo "ERROR: Workflow file not found: $WORKFLOW_FILE"
            exit 1
          fi

          echo "Extracting job IDs and names..."
          echo ""

          # Extract all job IDs (YAML keys under 'jobs:')
          JOB_IDS=$(yq eval '.jobs | keys | .[]' "$WORKFLOW_FILE")

          # Track all job names to detect duplicates
          declare -A JOB_NAME_COUNT

          # Validate each job
          while IFS= read -r JOB_ID; do
            echo "Checking job: $JOB_ID"

            # Extract the job name
            JOB_NAME=$(yq eval ".jobs.${JOB_ID}.name" "$WORKFLOW_FILE")

            # Check if name field exists and is not null/empty
            if [ -z "$JOB_NAME" ] || [ "$JOB_NAME" = "null" ]; then
              echo "  ❌ FAIL: Missing 'name' field"
              VALIDATION_PASSED=false
              MISSING_NAMES="${MISSING_NAMES}- Job ID: \`${JOB_ID}\`\n"
            else
              echo "  ✅ PASS: name = '$JOB_NAME'"

              # Track job name for duplicate detection
              if [ -n "${JOB_NAME_COUNT[$JOB_NAME]}" ]; then
                JOB_NAME_COUNT[$JOB_NAME]=$((JOB_NAME_COUNT[$JOB_NAME] + 1))
              else
                JOB_NAME_COUNT[$JOB_NAME]=1
              fi
            fi
            echo ""
          done <<< "$JOB_IDS"

          # Check for duplicate job names
          echo "Checking for duplicate job names..."
          for JOB_NAME in "${!JOB_NAME_COUNT[@]}"; do
            COUNT=${JOB_NAME_COUNT[$JOB_NAME]}
            if [ "$COUNT" -gt 1 ]; then
              echo "  ❌ WARNING: Duplicate job name '$JOB_NAME' (found $COUNT times)"
              DUPLICATE_NAMES="${DUPLICATE_NAMES}- Job name: \`${JOB_NAME}\` (appears ${COUNT} times)\n"
            fi
          done
          echo ""

          # Output validation results
          if [ "$VALIDATION_PASSED" = true ] && [ -z "$DUPLICATE_NAMES" ]; then
            echo "=========================================="
            echo "✅ Backend CI Validation PASSED"
            echo "=========================================="
            echo "backend_status=✅ PASSED" >> $GITHUB_OUTPUT
            echo "backend_details=All jobs have valid name fields and no duplicates found." >> $GITHUB_OUTPUT
          else
            echo "=========================================="
            echo "❌ Backend CI Validation FAILED"
            echo "=========================================="

            DETAILS=""
            if [ "$VALIDATION_PASSED" = false ]; then
              DETAILS="${DETAILS}**Missing Name Fields:**\n${MISSING_NAMES}\n"
            fi
            if [ -n "$DUPLICATE_NAMES" ]; then
              DETAILS="${DETAILS}**Duplicate Job Names:**\n${DUPLICATE_NAMES}\n"
            fi

            echo "backend_status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "backend_details<<EOF" >> $GITHUB_OUTPUT
            echo -e "$DETAILS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            if [ "$VALIDATION_PASSED" = false ]; then
              exit 1
            fi
          fi

      - name: Validate frontend-ci.yml job mappings
        id: validate-frontend
        run: |
          echo "=========================================="
          echo "Validating frontend-ci.yml Job Mappings"
          echo "=========================================="
          echo ""

          WORKFLOW_FILE=".github/workflows/frontend-ci.yml"
          VALIDATION_PASSED=true
          MISSING_NAMES=""
          DUPLICATE_NAMES=""

          if [ ! -f "$WORKFLOW_FILE" ]; then
            echo "ERROR: Workflow file not found: $WORKFLOW_FILE"
            exit 1
          fi

          echo "Extracting job IDs and names..."
          echo ""

          # Extract all job IDs (YAML keys under 'jobs:')
          JOB_IDS=$(yq eval '.jobs | keys | .[]' "$WORKFLOW_FILE")

          # Track all job names to detect duplicates
          declare -A JOB_NAME_COUNT

          # Validate each job
          while IFS= read -r JOB_ID; do
            echo "Checking job: $JOB_ID"

            # Extract the job name
            JOB_NAME=$(yq eval ".jobs.${JOB_ID}.name" "$WORKFLOW_FILE")

            # Check if name field exists and is not null/empty
            if [ -z "$JOB_NAME" ] || [ "$JOB_NAME" = "null" ]; then
              echo "  ❌ FAIL: Missing 'name' field"
              VALIDATION_PASSED=false
              MISSING_NAMES="${MISSING_NAMES}- Job ID: \`${JOB_ID}\`\n"
            else
              echo "  ✅ PASS: name = '$JOB_NAME'"

              # Track job name for duplicate detection
              if [ -n "${JOB_NAME_COUNT[$JOB_NAME]}" ]; then
                JOB_NAME_COUNT[$JOB_NAME]=$((JOB_NAME_COUNT[$JOB_NAME] + 1))
              else
                JOB_NAME_COUNT[$JOB_NAME]=1
              fi
            fi
            echo ""
          done <<< "$JOB_IDS"

          # Check for duplicate job names
          echo "Checking for duplicate job names..."
          for JOB_NAME in "${!JOB_NAME_COUNT[@]}"; do
            COUNT=${JOB_NAME_COUNT[$JOB_NAME]}
            if [ "$COUNT" -gt 1 ]; then
              echo "  ❌ WARNING: Duplicate job name '$JOB_NAME' (found $COUNT times)"
              DUPLICATE_NAMES="${DUPLICATE_NAMES}- Job name: \`${JOB_NAME}\` (appears ${COUNT} times)\n"
            fi
          done
          echo ""

          # Output validation results
          if [ "$VALIDATION_PASSED" = true ] && [ -z "$DUPLICATE_NAMES" ]; then
            echo "=========================================="
            echo "✅ Frontend CI Validation PASSED"
            echo "=========================================="
            echo "frontend_status=✅ PASSED" >> $GITHUB_OUTPUT
            echo "frontend_details=All jobs have valid name fields and no duplicates found." >> $GITHUB_OUTPUT
          else
            echo "=========================================="
            echo "❌ Frontend CI Validation FAILED"
            echo "=========================================="

            DETAILS=""
            if [ "$VALIDATION_PASSED" = false ]; then
              DETAILS="${DETAILS}**Missing Name Fields:**\n${MISSING_NAMES}\n"
            fi
            if [ -n "$DUPLICATE_NAMES" ]; then
              DETAILS="${DETAILS}**Duplicate Job Names:**\n${DUPLICATE_NAMES}\n"
            fi

            echo "frontend_status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "frontend_details<<EOF" >> $GITHUB_OUTPUT
            echo -e "$DETAILS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            if [ "$VALIDATION_PASSED" = false ]; then
              exit 1
            fi
          fi

      - name: Generate validation summary
        if: always()
        run: |
          echo "## Job Mapping Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This validation ensures all CI/CD jobs have proper \`name\` fields for dynamic job matching in the bug-logger workflow." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Backend CI (.github/workflows/backend-ci.yml)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.validate-backend.outputs.backend_status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.validate-backend.outputs.backend_details }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Frontend CI (.github/workflows/frontend-ci.yml)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.validate-frontend.outputs.frontend_status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.validate-frontend.outputs.frontend_details }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Validation Requirements" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All jobs must have a \`name:\` field" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Job names must be unique within each workflow" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Job names should be descriptive (include tool/purpose)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Why?** The bug-logger workflow dynamically extracts job mappings from these files at runtime." >> $GITHUB_STEP_SUMMARY
          echo "Missing or duplicate names cause job matching failures and incomplete bug reports." >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR with validation results
        if: github.event_name == 'pull_request' && always()
        run: |
          BACKEND_STATUS="${{ steps.validate-backend.outputs.backend_status }}"
          FRONTEND_STATUS="${{ steps.validate-frontend.outputs.frontend_status }}"

          # Only comment if there are failures
          if [[ "$BACKEND_STATUS" == *"FAILED"* ]] || [[ "$FRONTEND_STATUS" == *"FAILED"* ]]; then
            # Create comment body
            {
              echo "## Job Mapping Validation Failed"
              echo ""
              echo "This PR modifies CI/CD workflow files, but the job naming validation has failed."
              echo ""
              echo "### Validation Results"
              echo ""
              echo "**Backend CI:** $BACKEND_STATUS"
              echo "${{ steps.validate-backend.outputs.backend_details }}"
              echo ""
              echo "**Frontend CI:** $FRONTEND_STATUS"
              echo "${{ steps.validate-frontend.outputs.frontend_details }}"
              echo ""
              echo "### What to Fix"
              echo ""
              echo "All jobs in CI/CD workflows must have a \`name:\` field for dynamic job matching:"
              echo ""
              echo "\`\`\`yaml"
              echo "jobs:"
              echo "  my-job-id:"
              echo "    name: My Descriptive Job Name  # Required!"
              echo "    runs-on: ubuntu-22.04"
              echo "    steps:"
              echo "      # ..."
              echo "\`\`\`"
              echo ""
              echo "### Why This Matters"
              echo ""
              echo "The bug-logger workflow dynamically extracts job IDs and names at runtime to match failed jobs and generate detailed bug reports. Missing job names cause silent failures and incomplete bug logs."
              echo ""
              echo "See \`.github/DEVOPS_GUIDELINES.md\` for complete naming conventions."
            } > comment_body.md

            gh pr comment ${{ github.event.pull_request.number }} \
              --body-file comment_body.md \
              --repo ${{ github.repository }}
          fi
        env:
          GH_TOKEN: ${{ github.token }}
