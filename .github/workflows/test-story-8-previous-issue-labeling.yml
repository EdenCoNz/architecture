name: Test Story #8 - Previous Issue Labeling Logic

# Manual test workflow for Story #8: Implement Previous Issue Labeling Logic
# This workflow verifies that the bug resolver correctly labels previous issues
# when a new different failure is detected.

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Previous issue number to mark as fix-pending'
        required: true
        type: string

permissions:
  contents: read
  issues: write

jobs:
  test-previous-issue-labeling:
    name: Test Previous Issue Labeling
    runs-on: ubuntu-22.04
    timeout-minutes: 5

    steps:
      - name: Test Information
        run: |
          echo "=========================================="
          echo "Story #8 Test: Previous Issue Labeling"
          echo "=========================================="
          echo ""
          echo "This test verifies the bug resolver can:"
          echo "  1. Identify previous issue from issue number"
          echo "  2. Add 'fix-pending' label to previous issue"
          echo "  3. Add explanatory comment to previous issue"
          echo ""
          echo "Test Inputs:"
          echo "  - Previous Issue Number: #${{ inputs.issue_number }}"
          echo "  - Action: mark_previous_as_pending"
          echo "  - Current Run Status: failure (simulated)"
          echo ""
          echo "=========================================="

      - name: Call Bug Resolver Workflow
        uses: ./.github/workflows/bug-resolver.yml
        with:
          current_run_status: "failure"
          previous_issue_number: ${{ inputs.issue_number }}
          action: "mark_previous_as_pending"

      - name: Verify Results
        run: |
          ISSUE_NUMBER="${{ inputs.issue_number }}"
          echo "=========================================="
          echo "Verification: Check Issue Labels"
          echo "=========================================="
          echo ""
          echo "Fetching issue #$ISSUE_NUMBER details..."

          # Fetch issue with labels
          ISSUE_DATA=$(gh issue view $ISSUE_NUMBER \
            --repo ${{ github.repository }} \
            --json number,title,state,labels)

          echo "Issue Data:"
          echo "$ISSUE_DATA" | jq '.'
          echo ""

          # Check if fix-pending label exists
          HAS_FIX_PENDING=$(echo "$ISSUE_DATA" | jq -r '.labels[] | select(.name == "fix-pending") | .name')

          if [ -n "$HAS_FIX_PENDING" ]; then
            echo "✓ SUCCESS: 'fix-pending' label found on issue #$ISSUE_NUMBER"
          else
            echo "✗ FAILURE: 'fix-pending' label NOT found on issue #$ISSUE_NUMBER"
            echo ""
            echo "Current labels:"
            echo "$ISSUE_DATA" | jq -r '.labels[] | "  - " + .name'
            exit 1
          fi

          echo ""
          echo "=========================================="
          echo "Verification: Check Issue Comments"
          echo "=========================================="
          echo ""

          # Fetch recent comments
          COMMENTS=$(gh issue view $ISSUE_NUMBER \
            --repo ${{ github.repository }} \
            --json comments \
            --jq '.comments[-3:] | .[] | {author: .author.login, body: .body}')

          echo "Recent Comments:"
          echo "$COMMENTS" | jq '.'
          echo ""

          # Check if explanatory comment exists
          COMMENT_TEXT=$(gh issue view $ISSUE_NUMBER \
            --repo ${{ github.repository }} \
            --json comments \
            --jq '.comments[] | select(.body | contains("different failure")) | .body' | tail -1)

          if [ -n "$COMMENT_TEXT" ]; then
            echo "✓ SUCCESS: Explanatory comment found on issue #$ISSUE_NUMBER"
            echo ""
            echo "Comment Preview:"
            echo "$COMMENT_TEXT" | head -3
          else
            echo "✗ FAILURE: Explanatory comment NOT found on issue #$ISSUE_NUMBER"
            exit 1
          fi

          echo ""
          echo "=========================================="
          echo "All Verification Checks Passed!"
          echo "=========================================="
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Summary
        if: always()
        run: |
          echo "## Story #8 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue Number**: #${{ inputs.issue_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: mark_previous_as_pending" >> $GITHUB_STEP_SUMMARY
          echo "- **Simulated Status**: failure (new different failure)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Acceptance Criteria Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Bug resolver identifies previous issue from issue number" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Appropriate label ('fix-pending') added to previous issue" >> $GITHUB_STEP_SUMMARY
          echo "3. ✅ Comment added to previous issue explaining the label change" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View Updated Issue #${{ inputs.issue_number }}](https://github.com/${{ github.repository }}/issues/${{ inputs.issue_number }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Expected Changes:**" >> $GITHUB_STEP_SUMMARY
          echo "- Label: \`fix-pending\` added" >> $GITHUB_STEP_SUMMARY
          echo "- Comment: Explanatory message about different failure detection" >> $GITHUB_STEP_SUMMARY
