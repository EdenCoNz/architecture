# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# GitHub Actions Secrets Configuration
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# ⚠️  This file documents required secrets - it does NOT contain actual values.
# Configure actual secrets at: Repository Settings → Secrets and variables → Actions
#

# ============================================================================
# Required Secrets
# ============================================================================

# TARGET_REPO_PAT
# ---------------
# Purpose: Authenticate and push to EdenCoNz/proform repository
# Used by: .github/workflows/sync-to-proform.yml
#
# How to create:
#   1. GitHub Settings → Developer settings → Personal access tokens → Fine-grained tokens
#   2. Generate new token with:
#      - Repository access: Only EdenCoNz/proform
#      - Permissions: Contents (Read and write)
#   3. Add to repository: Settings → Secrets and variables → Actions → New repository secret
#      - Name: TARGET_REPO_PAT
#      - Value: <paste token>
#
# Recommended: Set 90-day expiration and create calendar reminder to rotate

# CLAUDE_CODE_OAUTH_TOKEN
# ------------------------
# Purpose: Authenticate Claude Code action to execute slash commands and AI operations
# Used by: .github/workflows/frontend-ci.yml (claude-ci-fix job)
#
# How to create:
#   1. Visit https://claude.ai/settings/oauth
#   2. Generate new OAuth token for GitHub Actions integration
#   3. Add to repository: Settings → Secrets and variables → Actions → New repository secret
#      - Name: CLAUDE_CODE_OAUTH_TOKEN
#      - Value: <paste token>
#
# Permissions: The token allows Claude Code action to:
#   - Execute slash commands (e.g., /cifix for CI failure auto-fix)
#   - Access repository contents (read)
#   - Perform AI-powered code operations and fixes
#
# Workflow Integration:
#   The frontend-ci.yml workflow uses this token in the claude-ci-fix job, which:
#   - Detects failures in any CI job (lint, typecheck, build, security, docker, deployment-check)
#   - Extracts detailed failure information and context
#   - Executes the /cifix slash command to analyze and fix issues
#   - Commits and pushes fixes automatically using GITHUB_TOKEN
#   - Creates a pull request to main branch with the automated fixes
#
# Security: Token is scoped to Claude Code operations only. Rotate periodically.

# ============================================================================
# Frontend CI/CD (frontend-ci.yml)
# ============================================================================

# Required Secrets:
# - CLAUDE_CODE_OAUTH_TOKEN: Used by claude-ci-fix job for automatic CI failure detection and fixes
# - GITHUB_TOKEN: Automatically provided by GitHub Actions for commits, pushes, and PR creation (no manual setup required)
#
# The frontend CI/CD workflow includes:
# - ESLint linting checks
# - Prettier formatting checks
# - TypeScript type checking
# - Production builds
# - Build artifact generation and upload
# - Security audit (npm audit)
# - Docker image building and testing (local only, no push to registry)
# - Claude-based automatic CI failure detection, auto-fix, and PR creation
#
# Docker Build Job:
# The workflow builds Docker images and tests them locally without pushing to
# any container registry. This means no registry credentials are needed.
# Images are tagged with:
#   - frontend:${GITHUB_SHA} (commit-specific tag)
#   - frontend:latest (latest tag)
#
# The Docker job:
# - Builds image using docker/build-push-action with push: false
# - Tests health endpoint (http://localhost:8080/health)
# - Verifies application serves HTML correctly
# - Uses GitHub Actions cache (type=gha) for faster builds
#
# Future Secrets (when implementing container registry push):
# - DOCKER_USERNAME: Docker Hub username or registry username
# - DOCKER_TOKEN: Docker Hub access token or registry password
# - GHCR_TOKEN: GitHub Container Registry token (or use GITHUB_TOKEN with packages: write)
#
# Future Secrets (when implementing cloud deployment):
# - Cloud provider credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.)
# - Deployment API tokens (NETLIFY_AUTH_TOKEN, VERCEL_TOKEN, etc.)
# - Environment-specific configuration secrets
# - Kubernetes credentials (KUBECONFIG, KUBE_TOKEN, etc.)
