# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# GitHub Actions Secrets Configuration
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# ⚠️  This file documents required secrets - it does NOT contain actual values.
# Configure actual secrets at: Repository Settings → Secrets and variables → Actions
#

# ============================================================================
# Required Secrets
# ============================================================================

# TARGET_REPO_PAT
# ---------------
# Purpose: Authenticate and push to EdenCoNz/proform repository
# Used by: .github/workflows/sync-to-proform.yml
#
# How to create:
#   1. GitHub Settings → Developer settings → Personal access tokens → Fine-grained tokens
#   2. Generate new token with:
#      - Repository access: Only EdenCoNz/proform
#      - Permissions: Contents (Read and write)
#   3. Add to repository: Settings → Secrets and variables → Actions → New repository secret
#      - Name: TARGET_REPO_PAT
#      - Value: <paste token>
#
# Recommended: Set 90-day expiration and create calendar reminder to rotate

# ============================================================================
# Frontend CI/CD (frontend-ci.yml)
# ============================================================================

# GITHUB_TOKEN Permissions
# ------------------------
# The workflow uses the built-in GITHUB_TOKEN with the following permissions:
#
# - contents: read (checkout code, read repository)
# - pull-requests: write (post coverage reports to PRs)
# - checks: write (create check runs)
# - issues: write (auto-close issues on successful build)
#
# Auto-Close Issue Feature:
# When a commit to main branch contains "Fix issue #N" or "Fix issue N"
# in the commit message, and all workflow jobs succeed, the referenced
# issue is automatically closed with a comment linking to the commit.

# Current Status: No additional secrets required
#
# The frontend CI/CD workflow runs using GITHUB_TOKEN for:
# - ESLint linting checks
# - Prettier formatting checks
# - TypeScript type checking
# - Production builds
# - Build artifact generation and upload
# - Security audit (npm audit)
# - Auto-closing issues on successful workflow runs (main branch only)
#
# Future Secrets (when implementing deployment):
# - Cloud provider credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.)
# - Deployment API tokens (NETLIFY_AUTH_TOKEN, VERCEL_TOKEN, etc.)
# - Environment-specific configuration secrets
