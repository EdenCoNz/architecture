# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# GitHub Actions Secrets Configuration
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# ⚠️  This file documents required secrets - it does NOT contain actual values.
# Configure actual secrets at: Repository Settings → Secrets and variables → Actions
#

# ============================================================================
# Required Secrets
# ============================================================================

# TARGET_REPO_PAT
# ---------------
# Purpose: Authenticate and push to EdenCoNz/proform repository
# Used by: .github/workflows/sync-to-proform.yml
#
# How to create:
#   1. GitHub Settings → Developer settings → Personal access tokens → Fine-grained tokens
#   2. Generate new token with:
#      - Repository access: Only EdenCoNz/proform
#      - Permissions: Contents (Read and write)
#   3. Add to repository: Settings → Secrets and variables → Actions → New repository secret
#      - Name: TARGET_REPO_PAT
#      - Value: <paste token>
#
# Recommended: Set 90-day expiration and create calendar reminder to rotate

# ============================================================================
# Frontend CI/CD (frontend-ci.yml)
# ============================================================================

# GITHUB_TOKEN Permissions
# ------------------------
# The workflow uses the built-in GITHUB_TOKEN with the following permissions:
#
# - contents: read (checkout code, read repository)
# - pull-requests: write (post coverage reports to PRs)
# - checks: write (create check runs)

# - issues: write (auto-close issues on successful build via reusable workflow)
#
# Auto-Close Issue Feature:
# Issues created by workflow failures are automatically closed by the
# detect-workflow-failures.yml workflow when the same workflow succeeds later.
# This is handled automatically - no reusable workflow call needed.

# Current Status: No additional secrets required
#
# The frontend CI/CD workflow runs using GITHUB_TOKEN for:
# - ESLint linting checks
# - Prettier formatting checks
# - TypeScript type checking
# - Production builds
# - Build artifact generation and upload
# - Security audit (npm audit)

# - Auto-closing issues on successful workflow runs (main branch only, via reusable workflow)
#
# Future Secrets (when implementing deployment):
# - Cloud provider credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.)
# - Deployment API tokens (NETLIFY_AUTH_TOKEN, VERCEL_TOKEN, etc.)
# - Environment-specific configuration secrets

# ============================================================================
# Detect Workflow Failures (detect-workflow-failures.yml)
# ============================================================================

# GITHUB_TOKEN Permissions
# ------------------------
# This workflow monitors Frontend CI/CD and Backend CI/CD workflows and:
#
# - contents: read (access repository contents and workflow files)
# - actions: read (read workflow run information via API)
# - issues: write (create issues for failures, close them on success)
#
# Workflow Behavior:
# ------------------
# On workflow failure (main branch only):
#   - Creates a single aggregated GitHub issue with all job/step failures
#   - Includes detailed error logs and metadata (runURL, runID, etc.)
#   - Labels issue with "workflow-failure" for easy tracking
#   - Follows structure defined in issue-log-template.json
#
# On workflow success (main branch only):
#   - Automatically searches for open issues with "workflow-failure" label
#   - Finds issues matching the workflow name (e.g., "Frontend CI/CD")
#   - Closes all matching issues with a comment linking to the successful run
#   - Provides comprehensive summary in GitHub Step Summary
#
# This workflow has two jobs:
# 1. detect-failures: Runs when workflow fails/cancels, creates detailed issue
# 2. auto-close-issues: Runs when workflow succeeds, closes related failure issues
#
# Triggered by:
# - workflow_run event for "Frontend CI/CD" and "Backend CI/CD" workflows
# - Only monitors workflows on the default branch (main)
#
# Notes:
# - PR branch failures are handled inline by Frontend/Backend CI/CD workflows
# - This workflow provides detailed analysis for main branch failures only
# - Auto-close feature eliminates need for manual issue cleanup

# ============================================================================
# Backend CI/CD (backend-ci.yml)
# ============================================================================

# GITHUB_TOKEN Permissions
# ------------------------
# The workflow uses the built-in GITHUB_TOKEN with the following permissions:
#
# - contents: read (checkout code, read repository)
# - pull-requests: write (post coverage reports to PRs, auto-close PRs)
# - checks: write (create check runs)
# - issues: write (auto-close issues on successful build via reusable workflow)
# - security-events: write (upload security scan results)

# Current Status: No additional secrets required
#
# The backend CI/CD workflow runs using GITHUB_TOKEN for:
# - Black formatting checks
# - isort import sorting checks
# - Flake8 linting
# - mypy type checking
# - pytest tests with coverage (unit, integration, e2e)
# - pip safety security scanning
# - Bandit security linting
# - Django build verification (collectstatic, check --deploy, migrations)
# - Auto-closing issues on successful workflow runs (main branch only, via reusable workflow)
#
# Services Used:
# - PostgreSQL 16 (service container for tests)
# - Redis 7 (service container for tests, cache/sessions)
#
# Environment Variables Required for Tests:
# - DB_NAME: test_backend_db (provided by workflow)
# - DB_USER: test_user (provided by workflow)
# - DB_PASSWORD: test_password (provided by workflow)
# - DB_HOST: localhost (provided by workflow)
# - DB_PORT: 5432 (provided by workflow)
# - REDIS_URL: redis://localhost:6379/1 (provided by workflow)
# - SECRET_KEY: test-secret-key-for-ci-testing-only (provided by workflow)
# - DEBUG: False (provided by workflow)
#
# Future Secrets (when implementing deployment):
# - Cloud provider credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.)
# - Deployment API tokens (HEROKU_API_KEY, RAILWAY_TOKEN, etc.)
# - Production database credentials (if deploying migrations)
# - Environment-specific configuration secrets
# - SENTRY_DSN (for error tracking in production)
# - Email service credentials (SMTP settings)
