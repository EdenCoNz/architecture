# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# GitHub Actions Secrets Configuration
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# ⚠️  This file documents required secrets - it does NOT contain actual values.
# Configure actual secrets at: Repository Settings → Secrets and variables → Actions
#

# ============================================================================
# Required Secrets
# ============================================================================

# TARGET_REPO_PAT
# ---------------
# Purpose: Authenticate and push to EdenCoNz/proform repository
# Used by: .github/workflows/sync-to-proform.yml
#
# How to create:
#   1. GitHub Settings → Developer settings → Personal access tokens → Fine-grained tokens
#   2. Generate new token with:
#      - Repository access: Only EdenCoNz/proform
#      - Permissions: Contents (Read and write)
#   3. Add to repository: Settings → Secrets and variables → Actions → New repository secret
#      - Name: TARGET_REPO_PAT
#      - Value: <paste token>
#
# Recommended: Set 90-day expiration and create calendar reminder to rotate

# ============================================================================
# Frontend CI/CD (frontend-ci.yml)
# ============================================================================

# Required Permissions (GITHUB_TOKEN):
# - contents: write (for checking out code and creating bug branches)
# - pull-requests: write (for commenting on PRs if needed)
# - checks: write (for creating check runs)
# - actions: read (REQUIRED: for notify-on-failure job to fetch job details via API)
#
# The actions: read permission allows the workflow to call:
#   gh api repos/{owner}/{repo}/actions/runs/{run_id}/jobs
# This API endpoint is used by the notify-on-failure job to generate detailed
# failure reports with job and step information.
#
# Without this permission, the API call fails with:
#   "gh: Resource not accessible by integration (HTTP 403)"

# Current Status: No secrets required for current operations
#
# The frontend CI/CD workflow currently runs without any secrets for:
# - ESLint linting checks
# - Prettier formatting checks
# - TypeScript type checking
# - Production builds
# - Build artifact generation and upload
# - Security audit (npm audit)
# - Docker image building and testing (local only, no push to registry)
#
# Docker Build Job:
# The workflow builds Docker images and tests them locally without pushing to
# any container registry. This means no registry credentials are needed.
# Images are tagged with:
#   - frontend:${GITHUB_SHA} (commit-specific tag)
#   - frontend:latest (latest tag)
#
# The Docker job:
# - Builds image using docker/build-push-action with push: false
# - Tests health endpoint (http://localhost:8080/health)
# - Verifies application serves HTML correctly
# - Uses GitHub Actions cache (type=gha) for faster builds
#
# Future Secrets (when implementing container registry push):
# - DOCKER_USERNAME: Docker Hub username or registry username
# - DOCKER_TOKEN: Docker Hub access token or registry password
# - GHCR_TOKEN: GitHub Container Registry token (or use GITHUB_TOKEN with packages: write)
#
# Future Secrets (when implementing cloud deployment):
# - Cloud provider credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.)
# - Deployment API tokens (NETLIFY_AUTH_TOKEN, VERCEL_TOKEN, etc.)
# - Environment-specific configuration secrets
# - Kubernetes credentials (KUBECONFIG, KUBE_TOKEN, etc.)
