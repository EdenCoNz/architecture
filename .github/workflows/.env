# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# GitHub Actions Secrets Configuration
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# ⚠️  This file documents required secrets - it does NOT contain actual values.
# Configure actual secrets at: Repository Settings → Secrets and variables → Actions
#

# ============================================================================
# Required Secrets
# ============================================================================

# TARGET_REPO_PAT
# ---------------
# Purpose: Authenticate and push to EdenCoNz/proform repository
# Used by: .github/workflows/sync-to-proform.yml
#
# How to create:
#   1. GitHub Settings → Developer settings → Personal access tokens → Fine-grained tokens
#   2. Generate new token with:
#      - Repository access: Only EdenCoNz/proform
#      - Permissions: Contents (Read and write)
#   3. Add to repository: Settings → Secrets and variables → Actions → New repository secret
#      - Name: TARGET_REPO_PAT
#      - Value: <paste token>
#
# Recommended: Set 90-day expiration and create calendar reminder to rotate

# ============================================================================
# Frontend CI/CD (frontend-ci.yml)
# ============================================================================

# Current Status: No secrets required for current operations
#
# The frontend CI/CD workflow currently runs without any secrets for:
# - ESLint linting checks
# - Prettier formatting checks
# - TypeScript type checking
# - Production builds
# - Build artifact generation and upload
# - Security audit (npm audit)
# - Docker image building and testing (local only, no push to registry)
# - Bug logging to JSON file (uses default GITHUB_TOKEN)
#
# Docker Build Job:
# The workflow builds Docker images and tests them locally without pushing to
# any container registry. This means no registry credentials are needed.
# Images are tagged with:
#   - frontend:${GITHUB_SHA} (commit-specific tag)
#   - frontend:latest (latest tag)
#
# The Docker job:
# - Builds image using docker/build-push-action with push: false
# - Tests health endpoint (http://localhost:8080/health)
# - Verifies application serves HTML correctly
# - Uses GitHub Actions cache (type=gha) for faster builds
#
# Bug Logging Job (log-bugs):
# This job runs automatically when any CI job fails on feature branches:
# - Extracts feature ID from branch name (format: feature/{id})
# - Creates bug log entry using docs/templates/bug-log-template.md
# - Automatically creates GitHub issue with bug details and full logs
# - Posts PR comment with link to created issue
# - Requires permissions: contents: read, issues: write, actions: read
#
# The log-bugs job uses the default GITHUB_TOKEN which is automatically provided
# by GitHub Actions with appropriate permissions based on the workflow configuration.
# No additional secrets are required.
#
# GitHub Issue Creation:
# - Issues are created automatically when CI/CD jobs fail
# - Issue is assigned to the PR author
# - Issue title format: [branch-name] failure description
# - Issue body includes: failure details, log excerpts, links, and full bug log template
#
# Future Secrets (when implementing container registry push):
# - DOCKER_USERNAME: Docker Hub username or registry username
# - DOCKER_TOKEN: Docker Hub access token or registry password
# - GHCR_TOKEN: GitHub Container Registry token (or use GITHUB_TOKEN with packages: write)
#
# Future Secrets (when implementing cloud deployment):
# - Cloud provider credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.)
# - Deployment API tokens (NETLIFY_AUTH_TOKEN, VERCEL_TOKEN, etc.)
# - Environment-specific configuration secrets
# - Kubernetes credentials (KUBECONFIG, KUBE_TOKEN, etc.)

# ============================================================================
# Backend CI/CD (backend-ci.yml)
# ============================================================================

# Current Status: No secrets required for current operations
#
# The backend CI/CD workflow currently runs without any secrets for:
# - Ruff linting checks
# - Black formatting checks
# - mypy type checking
# - Bandit security scanning
# - pytest tests with coverage (using GitHub service containers)
# - Application build and startup checks
# - Safety dependency security audit
# - Bug logging (uses default GITHUB_TOKEN)
#
# Service Containers:
# The workflow uses GitHub Actions service containers for testing:
# - PostgreSQL 16 (test_user/test_password/test_db for tests)
# - PostgreSQL 16 (dev_user/dev_password/dev_db for build checks)
# - Redis 7.2 (default configuration, no authentication)
#
# These service containers run only during workflow execution and use
# ephemeral credentials. No secrets are required as credentials are
# defined directly in the workflow configuration for CI purposes only.
#
# Environment Variables (CI Testing):
# The following environment variables are set directly in workflow steps:
# - DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
# - REDIS_URL: redis://localhost:6379/0
# - SECRET_KEY: test-secret-key-for-ci (used only for CI, not production)
# - ENVIRONMENT: testing (or development for build checks)
#
# Bug Logging Job (log-bugs):
# This job runs automatically when any CI job fails on feature branches:
# - Extracts feature ID from branch name (format: feature/{id})
# - Creates bug log entry using docs/templates/bug-log-template.md
# - Automatically creates GitHub issue with bug details and full logs
# - Issues are labeled with "ci-failure" and "backend" labels
# - Requires permissions: contents: read, issues: write, actions: read
#
# The log-bugs job uses the default GITHUB_TOKEN which is automatically provided
# by GitHub Actions with appropriate permissions based on the workflow configuration.
# No additional secrets are required.
#
# GitHub Issue Creation:
# - Issues are created automatically when backend CI/CD jobs fail
# - Issue is assigned to the PR author
# - Issue title format: [branch-name] Backend {job} failed - {description}
# - Issue body includes: failure details, log excerpts, links, and full bug log template
# - Issues are labeled with "ci-failure" and "backend" for easy filtering
#
# Future Secrets (when implementing production deployment):
# - DATABASE_URL: Production PostgreSQL connection string (use OIDC or managed secrets)
# - REDIS_URL: Production Redis connection string
# - SECRET_KEY: Production secret key for JWT and encryption (must be cryptographically secure)
# - SENTRY_DSN: Sentry error tracking DSN (optional)
# - AWS_* credentials: For S3, ECR, or other AWS services (prefer OIDC)
# - DOCKER_USERNAME: Docker Hub username or registry username
# - DOCKER_TOKEN: Docker Hub access token or registry password
# - Cloud provider credentials (prefer OIDC over static credentials)
# - Database migration credentials (separate from application credentials)
# - Email service credentials (SMTP, SendGrid, etc.)
#
# Security Best Practices:
# - Use GitHub Environments for production secrets with required reviewers
# - Rotate SECRET_KEY regularly (quarterly minimum)
# - Use OIDC for cloud provider authentication (AWS, Azure, GCP)
# - Never commit secrets to repository
# - Use fine-grained PATs with minimal permissions
# - Enable branch protection to prevent unauthorized secret access
# - Implement secret scanning in repository settings
