# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# GitHub Actions Secrets Configuration
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# ⚠️  This file documents required secrets - it does NOT contain actual values.
# Configure actual secrets at: Repository Settings → Secrets and variables → Actions
#

# ============================================================================
# Required Secrets
# ============================================================================

# TARGET_REPO_PAT
# ---------------
# Purpose: Authenticate and push to EdenCoNz/proform repository
# Used by: .github/workflows/sync-to-proform.yml
#
# How to create:
#   1. GitHub Settings → Developer settings → Personal access tokens → Fine-grained tokens
#   2. Generate new token with:
#      - Repository access: Only EdenCoNz/proform
#      - Permissions: Contents (Read and write)
#   3. Add to repository: Settings → Secrets and variables → Actions → New repository secret
#      - Name: TARGET_REPO_PAT
#      - Value: <paste token>
#
# Recommended: Set 90-day expiration and create calendar reminder to rotate

# ============================================================================
# Frontend CI/CD (frontend-ci.yml)
# ============================================================================

# Current Status: No secrets required for current operations
#
# The frontend CI/CD workflow currently runs without any secrets for:
# - ESLint linting checks
# - Prettier formatting checks
# - TypeScript type checking
# - Production builds
# - Build artifact generation and upload
# - Security audit (npm audit)
# - Docker image building and testing (local only, no push to registry)
# - Bug logging to JSON file (uses default GITHUB_TOKEN)
#
# Docker Build Job:
# The workflow builds Docker images and tests them locally without pushing to
# any container registry. This means no registry credentials are needed.
# Images are tagged with:
#   - frontend:${GITHUB_SHA} (commit-specific tag)
#   - frontend:latest (latest tag)
#
# The Docker job:
# - Builds image using docker/build-push-action with push: false
# - Tests health endpoint (http://localhost:8080/health)
# - Verifies application serves HTML correctly
# - Uses GitHub Actions cache (type=gha) for faster builds
#
# Bug Logging Job (log-bugs):
# This job runs automatically when any CI job fails on feature branches:
# - Extracts feature ID from branch name (format: feature/{id})
# - Creates bug log entry using docs/templates/bug-log-template.md
# - Automatically creates GitHub issue with bug details and full logs
# - Posts PR comment with link to created issue
# - Requires permissions: contents: read, issues: write, actions: read
#
# The log-bugs job uses the default GITHUB_TOKEN which is automatically provided
# by GitHub Actions with appropriate permissions based on the workflow configuration.
# No additional secrets are required.
#
# GitHub Issue Creation:
# - Issues are created automatically when CI/CD jobs fail
# - Issue is assigned to the PR author
# - Issue title format: [branch-name] failure description
# - Issue body includes: failure details, log excerpts, links, and full bug log template
#
# Future Secrets (when implementing container registry push):
# - DOCKER_USERNAME: Docker Hub username or registry username
# - DOCKER_TOKEN: Docker Hub access token or registry password
# - GHCR_TOKEN: GitHub Container Registry token (or use GITHUB_TOKEN with packages: write)
#
# Future Secrets (when implementing cloud deployment):
# - Cloud provider credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.)
# - Deployment API tokens (NETLIFY_AUTH_TOKEN, VERCEL_TOKEN, etc.)
# - Environment-specific configuration secrets
# - Kubernetes credentials (KUBECONFIG, KUBE_TOKEN, etc.)
