name: Issue Event Listener - CI Failure Detection

# This workflow listens for issue creation and label events to detect CI failure issues
# It serves as the foundation for automatically triggering fix attempts
# Part of Feature #7: Automated CI/CD Failure Resolution Flow (Story #5)

on:
  issues:
    types:
      - opened      # Triggered when a new issue is created
      - labeled     # Triggered when a label is added to an issue

# Permissions for issue event listening and triggering fix workflow
permissions:
  issues: read
  contents: read
  actions: write  # Required to trigger repository_dispatch events

jobs:
  detect-ci-failure:
    name: Detect CI Failure Issue
    runs-on: ubuntu-22.04
    timeout-minutes: 5

    # Only process issues with the ci-failure label
    # This ensures we only react to CI/CD failure issues created by bug-logger
    if: contains(github.event.issue.labels.*.name, 'ci-failure')

    steps:
      - name: Log issue event
        run: |
          echo "=========================================="
          echo "CI Failure Issue Event Detected"
          echo "=========================================="
          echo "Event: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Issue Number: ${{ github.event.issue.number }}"
          echo "Issue Title: ${{ github.event.issue.title }}"
          echo "Issue URL: ${{ github.event.issue.html_url }}"
          echo "Issue Author: ${{ github.event.issue.user.login }}"
          echo "Issue Created: ${{ github.event.issue.created_at }}"
          echo "Labels: ${{ join(github.event.issue.labels.*.name, ', ') }}"
          echo "=========================================="

      - name: Extract issue metadata
        id: extract-metadata
        run: |
          echo "Extracting metadata from issue body..."
          ISSUE_BODY="${{ github.event.issue.body }}"

          # Extract featureID from the issue body table
          # Format: | featureID | 123 |
          FEATURE_ID=$(echo "$ISSUE_BODY" | grep -oP '^\|\s*featureID\s*\|\s*\K[^\|]+' | tr -d ' ' || echo "")
          echo "feature_id=$FEATURE_ID" >> $GITHUB_OUTPUT
          echo "Feature ID: $FEATURE_ID"

          # Extract featureName from the issue body table
          # Format: | featureName | my-feature |
          FEATURE_NAME=$(echo "$ISSUE_BODY" | grep -oP '^\|\s*featureName\s*\|\s*\K[^\|]+' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")
          echo "feature_name=$FEATURE_NAME" >> $GITHUB_OUTPUT
          echo "Feature Name: $FEATURE_NAME"

          # Extract jobName from the issue body table
          # Format: | jobName | lint |
          JOB_NAME=$(echo "$ISSUE_BODY" | grep -oP '^\|\s*jobName\s*\|\s*\K[^\|]+' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")
          echo "job_name=$JOB_NAME" >> $GITHUB_OUTPUT
          echo "Job Name: $JOB_NAME"

          # Extract stepName from the issue body table
          # Format: | stepName | Run ESLint |
          STEP_NAME=$(echo "$ISSUE_BODY" | grep -oP '^\|\s*stepName\s*\|\s*\K[^\|]+' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")
          echo "step_name=$STEP_NAME" >> $GITHUB_OUTPUT
          echo "Step Name: $STEP_NAME"

          # Extract logLineNumbers from the issue body table
          # Format: | logLineNumbers | L100-L150 |
          LOG_LINE_NUMBERS=$(echo "$ISSUE_BODY" | grep -oP '^\|\s*logLineNumbers\s*\|\s*\K[^\|]+' | tr -d ' ' || echo "")
          echo "log_line_numbers=$LOG_LINE_NUMBERS" >> $GITHUB_OUTPUT
          echo "Log Line Numbers: $LOG_LINE_NUMBERS"

          # Extract PR URL from the issue body table
          # Format: | PRURL | https://github.com/... |
          PR_URL=$(echo "$ISSUE_BODY" | grep -oP '^\|\s*PRURL\s*\|\s*\K[^\|]+' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "PR URL: $PR_URL"

          # Extract commit URL from the issue body table
          # Format: | commitURL | https://github.com/... |
          COMMIT_URL=$(echo "$ISSUE_BODY" | grep -oP '^\|\s*commitURL\s*\|\s*\K[^\|]+' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")
          echo "commit_url=$COMMIT_URL" >> $GITHUB_OUTPUT
          echo "Commit URL: $COMMIT_URL"

          # Extract workflow run URL from the issue body table
          # Format: | runURL | https://github.com/... |
          RUN_URL=$(echo "$ISSUE_BODY" | grep -oP '^\|\s*runURL\s*\|\s*\K[^\|]+' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")
          echo "run_url=$RUN_URL" >> $GITHUB_OUTPUT
          echo "Run URL: $RUN_URL"

          # Extract branch name from the issue title
          # Format: [feature/123-my-feature] Job Name job failed
          BRANCH_NAME=$(echo "${{ github.event.issue.title }}" | grep -oP '^\[\K[^\]]+' || echo "")
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch Name: $BRANCH_NAME"

          echo "=========================================="
          echo "Metadata extraction complete"
          echo "=========================================="

      - name: Validate metadata
        id: validate-metadata
        run: |
          echo "Validating extracted metadata..."

          # Check if we have the minimum required metadata
          FEATURE_ID="${{ steps.extract-metadata.outputs.feature_id }}"
          JOB_NAME="${{ steps.extract-metadata.outputs.job_name }}"
          BRANCH_NAME="${{ steps.extract-metadata.outputs.branch_name }}"

          # Validation flags
          IS_VALID=true
          VALIDATION_ERRORS=""

          if [ -z "$FEATURE_ID" ]; then
            echo "⚠️  Warning: Feature ID not found"
            VALIDATION_ERRORS="${VALIDATION_ERRORS}\n- Feature ID is missing"
            IS_VALID=false
          fi

          if [ -z "$JOB_NAME" ]; then
            echo "⚠️  Warning: Job name not found"
            VALIDATION_ERRORS="${VALIDATION_ERRORS}\n- Job name is missing"
            IS_VALID=false
          fi

          if [ -z "$BRANCH_NAME" ]; then
            echo "⚠️  Warning: Branch name not found in issue title"
            VALIDATION_ERRORS="${VALIDATION_ERRORS}\n- Branch name is missing"
            IS_VALID=false
          fi

          # Set output
          echo "is_valid=$IS_VALID" >> $GITHUB_OUTPUT
          echo "validation_errors<<EOF" >> $GITHUB_OUTPUT
          echo -e "$VALIDATION_ERRORS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ "$IS_VALID" = "true" ]; then
            echo "✅ Validation passed: All required metadata present"
          else
            echo "❌ Validation failed: Missing required metadata"
            echo -e "Errors:$VALIDATION_ERRORS"
          fi

      - name: Generate fix command context
        if: steps.validate-metadata.outputs.is_valid == 'true'
        id: generate-context
        run: |
          echo "Generating context for fix command..."

          # Create a JSON structure with all metadata for downstream workflows
          # This will be used by the fix command integration in Story #7
          cat > fix_context.json <<EOF
          {
            "issue_number": ${{ github.event.issue.number }},
            "issue_title": "${{ github.event.issue.title }}",
            "issue_url": "${{ github.event.issue.html_url }}",
            "feature_id": "${{ steps.extract-metadata.outputs.feature_id }}",
            "feature_name": "${{ steps.extract-metadata.outputs.feature_name }}",
            "branch_name": "${{ steps.extract-metadata.outputs.branch_name }}",
            "job_name": "${{ steps.extract-metadata.outputs.job_name }}",
            "step_name": "${{ steps.extract-metadata.outputs.step_name }}",
            "log_line_numbers": "${{ steps.extract-metadata.outputs.log_line_numbers }}",
            "pr_url": "${{ steps.extract-metadata.outputs.pr_url }}",
            "commit_url": "${{ steps.extract-metadata.outputs.commit_url }}",
            "run_url": "${{ steps.extract-metadata.outputs.run_url }}",
            "issue_author": "${{ github.event.issue.user.login }}",
            "created_at": "${{ github.event.issue.created_at }}"
          }
          EOF

          echo "Fix context JSON generated:"
          cat fix_context.json | jq '.'

          # Store the JSON as a workflow output (compressed for GitHub output)
          FIX_CONTEXT=$(cat fix_context.json | jq -c '.')
          echo "fix_context=$FIX_CONTEXT" >> $GITHUB_OUTPUT

          echo "=========================================="
          echo "Context generation complete"
          echo "=========================================="

      - name: Summary
        if: always()
        run: |
          echo "## Issue Event Listener Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Event details
          echo "### Event Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Event Type**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ github.event.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue**: [#${{ github.event.issue.number }}](${{ github.event.issue.html_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Title**: ${{ github.event.issue.title }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Validation status
          if [ "${{ steps.validate-metadata.outputs.is_valid }}" = "true" ]; then
            echo "### ✅ Metadata Extraction Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Feature ID | ${{ steps.extract-metadata.outputs.feature_id }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Feature Name | ${{ steps.extract-metadata.outputs.feature_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Branch Name | ${{ steps.extract-metadata.outputs.branch_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Job Name | ${{ steps.extract-metadata.outputs.job_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Step Name | ${{ steps.extract-metadata.outputs.step_name }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Log Lines | ${{ steps.extract-metadata.outputs.log_line_numbers }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Status**: ✅ Automated fix attempt triggered" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The fix workflow is running asynchronously. Check the [Actions tab](https://github.com/${{ github.repository }}/actions/workflows/fix-trigger.yml) for progress." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️  Metadata Validation Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Issues Detected**:" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.validate-metadata.outputs.validation_errors }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required**: Manual review needed. The issue may not have been created by the bug-logger workflow." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This workflow is part of Feature #7: Automated CI/CD Failure Resolution Flow (Stories #5 and #7)*" >> $GITHUB_STEP_SUMMARY

      - name: Trigger automated fix attempt
        if: steps.validate-metadata.outputs.is_valid == 'true'
        run: |
          echo "=========================================="
          echo "Triggering Automated Fix Attempt"
          echo "=========================================="
          echo "Issue Number: ${{ github.event.issue.number }}"
          echo "Feature ID: ${{ steps.extract-metadata.outputs.feature_id }}"
          echo "Branch Name: ${{ steps.extract-metadata.outputs.branch_name }}"
          echo "Job Name: ${{ steps.extract-metadata.outputs.job_name }}"
          echo ""

          # Trigger repository_dispatch event to asynchronously run /fix command
          # This ensures the issue creation workflow doesn't block on fix execution
          gh api repos/${{ github.repository }}/dispatches \
            --method POST \
            --field event_type="ci-failure-fix-trigger" \
            --field client_payload[issue_number]=${{ github.event.issue.number }} \
            --field client_payload[issue_title]="${{ github.event.issue.title }}" \
            --field client_payload[issue_url]="${{ github.event.issue.html_url }}" \
            --field client_payload[feature_id]="${{ steps.extract-metadata.outputs.feature_id }}" \
            --field client_payload[feature_name]="${{ steps.extract-metadata.outputs.feature_name }}" \
            --field client_payload[branch_name]="${{ steps.extract-metadata.outputs.branch_name }}" \
            --field client_payload[job_name]="${{ steps.extract-metadata.outputs.job_name }}" \
            --field client_payload[step_name]="${{ steps.extract-metadata.outputs.step_name }}"

          echo ""
          echo "✅ Fix attempt triggered successfully"
          echo "The fix workflow will run asynchronously in the background"
          echo "Check the Actions tab for fix-trigger workflow execution"
          echo "=========================================="
        env:
          GH_TOKEN: ${{ github.token }}
