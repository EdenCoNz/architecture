name: Detect Workflow Failures

# IMPORTANT: This workflow only monitors workflows that complete on the DEFAULT BRANCH (main)
# due to GitHub Actions workflow_run trigger limitations.
#
# For PR branch failures:
#   - Frontend CI/CD and Backend CI/CD have inline failure detection
#   - They create GitHub issues directly when failures occur on PR branches
#
# For main branch failures (workflow fails):
#   - This external workflow provides detailed analysis
#   - Creates a SINGLE aggregated issue per workflow run with all failures
#   - Follows the markdown structure defined in issue-log-template.md
#   - Provides job/step information and URLs (no error logs)
#
# For main branch success (workflow succeeds):
#   - Automatically closes issues created by previous failures of the same workflow
#   - Searches for open issues with matching runURL metadata
#   - Bulk closes all related failure issues
#
# This workflow detects failed jobs in completed workflows
# It runs after Frontend CI/CD or Backend CI/CD workflows complete and checks for failures
on:
  workflow_run:
    workflows: ["Frontend CI/CD", "Backend CI/CD"]
    types: [completed]

# Required permissions for workflow
permissions:
  contents: read  # Read repository contents and workflow files
  actions: read   # Read workflow run information via API
  issues: write   # Create issues for workflow failures and close them on success

jobs:
  detect-failures:
    name: Detect Job Failures
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    # Only run if the workflow had failures or was cancelled
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'cancelled' }}
    outputs:
      total_jobs: ${{ steps.detect-failures.outputs.total_jobs }}
      failed_jobs: ${{ steps.detect-failures.outputs.failed_jobs }}
      cancelled_jobs: ${{ steps.detect-failures.outputs.cancelled_jobs }}
      failed_job_names: ${{ steps.detect-failures.outputs.failed_job_names }}
      failed_job_ids: ${{ steps.detect-failures.outputs.failed_job_ids }}
      run_id: ${{ steps.workflow-details.outputs.run_id }}
      jobs_json: ${{ steps.fetch-jobs.outputs.jobs_json }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get workflow run details
        id: workflow-details
        run: |
          echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
          echo "workflow_name=${{ github.event.workflow_run.name }}" >> $GITHUB_OUTPUT
          echo "run_number=${{ github.event.workflow_run.run_number }}" >> $GITHUB_OUTPUT
          echo "conclusion=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
          echo "run_url=${{ github.event.workflow_run.html_url }}" >> $GITHUB_OUTPUT

      - name: Fetch workflow jobs
        id: fetch-jobs
        run: |
          # Fetch all jobs for this workflow run
          JOBS_JSON=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs")

          echo "jobs_json<<EOF" >> $GITHUB_OUTPUT
          echo "$JOBS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Detect failed jobs
        id: detect-failures
        run: |
          # Parse jobs JSON and identify failures
          JOBS_JSON='${{ steps.fetch-jobs.outputs.jobs_json }}'

          # Count total jobs and failed jobs
          TOTAL_JOBS=$(echo "$JOBS_JSON" | jq '.total_count')
          FAILED_JOBS=$(echo "$JOBS_JSON" | jq '[.jobs[] | select(.conclusion == "failure")] | length')
          CANCELLED_JOBS=$(echo "$JOBS_JSON" | jq '[.jobs[] | select(.conclusion == "cancelled")] | length')

          echo "total_jobs=$TOTAL_JOBS" >> $GITHUB_OUTPUT
          echo "failed_jobs=$FAILED_JOBS" >> $GITHUB_OUTPUT
          echo "cancelled_jobs=$CANCELLED_JOBS" >> $GITHUB_OUTPUT

          # Extract failed job details (name, ID, and conclusion)
          FAILED_JOB_NAMES=$(echo "$JOBS_JSON" | jq -r '[.jobs[] | select(.conclusion == "failure") | .name] | join(",")')
          FAILED_JOB_IDS=$(echo "$JOBS_JSON" | jq -r '[.jobs[] | select(.conclusion == "failure") | .id] | join(",")')

          echo "failed_job_names=$FAILED_JOB_NAMES" >> $GITHUB_OUTPUT
          echo "failed_job_ids=$FAILED_JOB_IDS" >> $GITHUB_OUTPUT

          # Create a detailed summary
          echo "## Workflow Failure Detection Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number**: ${{ github.event.workflow_run.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Conclusion**: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run URL**: ${{ github.event.workflow_run.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Total Jobs: $TOTAL_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "- Failed Jobs: $FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "- Cancelled Jobs: $CANCELLED_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$FAILED_JOBS" -gt 0 ]; then
            echo "### Failed Jobs" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # List each failed job with details
            echo "$JOBS_JSON" | jq -r '.jobs[] | select(.conclusion == "failure") |
              "#### " + .name + "\n" +
              "- **Job ID**: " + (.id | tostring) + "\n" +
              "- **Status**: " + .conclusion + "\n" +
              "- **Started**: " + .started_at + "\n" +
              "- **Completed**: " + .completed_at + "\n" +
              "- **URL**: " + .html_url + "\n"' >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$CANCELLED_JOBS" -gt 0 ]; then
            echo "### Cancelled Jobs" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # List each cancelled job with details
            echo "$JOBS_JSON" | jq -r '.jobs[] | select(.conclusion == "cancelled") |
              "#### " + .name + "\n" +
              "- **Job ID**: " + (.id | tostring) + "\n" +
              "- **Status**: " + .conclusion + "\n" +
              "- **Started**: " + .started_at + "\n" +
              "- **URL**: " + .html_url + "\n"' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Detect failed steps within jobs
        id: detect-step-failures
        if: steps.detect-failures.outputs.failed_jobs > 0
        run: |
          JOBS_JSON='${{ steps.fetch-jobs.outputs.jobs_json }}'

          echo "## Failed Step Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # For each failed job, identify which steps failed
          echo "$JOBS_JSON" | jq -r '.jobs[] | select(.conclusion == "failure") |
            "### Job: " + .name + "\n" +
            (
              [.steps[] | select(.conclusion == "failure") |
                "- **Step**: " + .name + "\n" +
                "  - **Number**: " + (.number | tostring) + "\n" +
                "  - **Started**: " + .started_at + "\n" +
                "  - **Completed**: " + .completed_at + "\n"
              ] | join("\n")
            )' >> $GITHUB_STEP_SUMMARY

      - name: Create aggregated failure data
        id: create-failure-data
        if: steps.detect-failures.outputs.failed_jobs > 0
        run: |
          JOBS_JSON='${{ steps.fetch-jobs.outputs.jobs_json }}'
          RUN_ID="${{ github.event.workflow_run.id }}"
          RUN_URL="${{ github.event.workflow_run.html_url }}"

          echo "## Creating Aggregated Failure Data" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create directory for failure data
          mkdir -p failure-data

          # Initialize markdown file with workflow information
          MARKDOWN_FILE="failure-data/workflow-failure-${RUN_ID}.md"
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          RUN_NUMBER="${{ github.event.workflow_run.run_number }}"
          HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
          HEAD_BRANCH="${{ github.event.workflow_run.head_branch }}"

          # Write workflow information header
          cat > "$MARKDOWN_FILE" << EOF
          # Workflow Failure Report

          ## Workflow Information

          - **Workflow Name**: $WORKFLOW_NAME
          - **Run ID**: $RUN_ID
          - **Branch**: $HEAD_BRANCH
          - **Commit**: ${HEAD_SHA:0:7}
          - **Run URL**: [View on GitHub]($RUN_URL)

          ## Summary

          This workflow run failed with **PLACEHOLDER job/step failure(s)**.

          ---

          ## Failed Jobs and Steps

          EOF

          # Count total failures
          TOTAL_FAILURES=0

          # Process each failed job and extract failure details
          echo "$JOBS_JSON" | jq -c '.jobs[] | select(.conclusion == "failure")' | while read -r job; do
            JOB_ID=$(echo "$job" | jq -r '.id')
            JOB_NAME=$(echo "$job" | jq -r '.name')
            JOB_URL=$(echo "$job" | jq -r '.html_url')

            # Find all failed steps in this job
            echo "$job" | jq -c '.steps[] | select(.conclusion == "failure")' | while read -r step; do
              STEP_NAME=$(echo "$step" | jq -r '.name')

              # Increment failure counter
              TOTAL_FAILURES=$((TOTAL_FAILURES + 1))

              # Append this failure to the markdown file
              {
                echo ""
                echo "### $TOTAL_FAILURES. $JOB_NAME - $STEP_NAME"
                echo ""
                echo "**Job URL**: $JOB_URL"
                echo ""
                echo "---"
                echo ""
              } >> "$MARKDOWN_FILE"
            done
          done

          # Replace the placeholder with actual count
          sed -i "s/PLACEHOLDER job\/step failure(s)/$TOTAL_FAILURES job\/step failure(s)/" "$MARKDOWN_FILE"

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: Created aggregated failure data" >> $GITHUB_STEP_SUMMARY
          echo "**Failed Jobs/Steps**: $TOTAL_FAILURES" >> $GITHUB_STEP_SUMMARY
          echo "**File**: \`$MARKDOWN_FILE\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Output the markdown file path for next steps
          echo "failure_markdown_path=$MARKDOWN_FILE" >> $GITHUB_OUTPUT
          echo "total_failures=$TOTAL_FAILURES" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Upload failure data as artifact
        if: steps.detect-failures.outputs.failed_jobs > 0
        uses: actions/upload-artifact@v4
        with:
          name: failure-data
          path: failure-data/
          retention-days: 7

      - name: Create single aggregated issue
        id: create-issue
        if: steps.detect-failures.outputs.failed_jobs > 0
        run: |
          RUN_ID="${{ github.event.workflow_run.id }}"
          RUN_URL="${{ github.event.workflow_run.html_url }}"
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          RUN_NUMBER="${{ github.event.workflow_run.run_number }}"
          FAILURE_MARKDOWN_PATH="${{ steps.create-failure-data.outputs.failure_markdown_path }}"
          TOTAL_FAILURES="${{ steps.create-failure-data.outputs.total_failures }}"

          echo "## Creating Aggregated Failure Issue" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create issue title
          ISSUE_TITLE="Workflow Run #${RUN_NUMBER} Failed: ${WORKFLOW_NAME} (${TOTAL_FAILURES} failure(s))"

          # Create the GitHub issue using the markdown file directly
          ISSUE_URL=$(gh issue create \
            --title "$ISSUE_TITLE" \
            --body-file "$FAILURE_MARKDOWN_PATH" \
            --label "workflow-failure")

          echo "issue_url=$ISSUE_URL" >> $GITHUB_OUTPUT

          # Extract issue number
          ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]*$')
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

          echo "**Status**: ✓ Created aggregated failure issue" >> $GITHUB_STEP_SUMMARY
          echo "**Issue**: #${ISSUE_NUMBER}" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: ${ISSUE_URL}" >> $GITHUB_STEP_SUMMARY
          echo "**Failures Included**: ${TOTAL_FAILURES}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Output failure detection results
        if: always()
        run: |
          echo "Failure detection completed"
          echo "Total jobs: ${{ steps.detect-failures.outputs.total_jobs }}"
          echo "Failed jobs: ${{ steps.detect-failures.outputs.failed_jobs }}"
          echo "Cancelled jobs: ${{ steps.detect-failures.outputs.cancelled_jobs }}"

          if [ "${{ steps.detect-failures.outputs.failed_jobs }}" -gt 0 ]; then
            echo "Failed job names: ${{ steps.detect-failures.outputs.failed_job_names }}"
            echo "Failed job IDs: ${{ steps.detect-failures.outputs.failed_job_ids }}"

            if [ -n "${{ steps.create-issue.outputs.issue_url }}" ]; then
              echo "Created issue: ${{ steps.create-issue.outputs.issue_url }}"
            fi
          fi

  auto-close-issues:
    name: Auto-Close Issues on Success
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    # Only run if the workflow succeeded (not failed or cancelled)
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Auto-close workflow failure issues
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## Auto-Close Workflow Failure Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          RUN_URL="${{ github.event.workflow_run.html_url }}"
          RUN_ID="${{ github.event.workflow_run.id }}"
          RUN_NUMBER="${{ github.event.workflow_run.run_number }}"
          HEAD_SHA="${{ github.event.workflow_run.head_sha }}"

          echo "**Workflow**: $WORKFLOW_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number**: $RUN_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "**Run URL**: $RUN_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Query all open issues with the workflow-failure label
          echo "Querying open workflow failure issues..." >> $GITHUB_STEP_SUMMARY
          OPEN_ISSUES=$(gh issue list \
            --repo "${{ github.repository }}" \
            --state open \
            --label "workflow-failure" \
            --json number,title,body \
            --limit 1000 2>&1 || echo "[]")

          if [ "$OPEN_ISSUES" == "[]" ]; then
            echo "ℹ️ No open workflow failure issues found" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Count open issues
          ISSUE_COUNT=$(echo "$OPEN_ISSUES" | jq '. | length')
          echo "Found $ISSUE_COUNT open workflow failure issue(s)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Find issues related to this workflow by searching for matching workflow name in title
          # We'll search for issues that contain this workflow's name
          CLOSED_COUNT=0
          FAILED_ISSUES=()

          echo "Searching for issues related to workflow: $WORKFLOW_NAME" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create a Python script to find matching issues by workflow name in title
          cat > /tmp/find_workflow_issues.py << 'EOF'
          import json
          import sys

          data = json.loads(sys.stdin.read())
          workflow_name = sys.argv[1]

          matching_issues = []

          for issue in data:
              issue_number = str(issue.get('number', ''))
              issue_title = issue.get('title', '')

              # Check if the workflow name appears in the issue title
              # Issue titles are like: "Workflow Run #123 Failed: Frontend CI/CD (2 failure(s))"
              if workflow_name in issue_title:
                  matching_issues.append(issue_number)

          for issue in matching_issues:
              print(issue)
          EOF

          MATCHING_ISSUE_NUMBERS=$(echo "$OPEN_ISSUES" | python3 /tmp/find_workflow_issues.py "$WORKFLOW_NAME" 2>&1 || echo "")
          rm -f /tmp/find_workflow_issues.py

          if [ -z "$MATCHING_ISSUE_NUMBERS" ]; then
            echo "ℹ️ No issues found for workflow: $WORKFLOW_NAME" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Count matching issues
          MATCH_COUNT=$(echo "$MATCHING_ISSUE_NUMBERS" | wc -l)
          echo "Found $MATCH_COUNT issue(s) to close for this workflow:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Close each matching issue
          while IFS= read -r ISSUE_NUMBER; do
            if [ -n "$ISSUE_NUMBER" ]; then
              echo "Closing issue #$ISSUE_NUMBER..." >> $GITHUB_STEP_SUMMARY

              CLOSE_COMMENT="Automatically closed - workflow ${WORKFLOW_NAME} succeeded in run #${RUN_NUMBER} (${RUN_URL}). Commit: ${HEAD_SHA}"

              if gh issue close "$ISSUE_NUMBER" \
                --repo "${{ github.repository }}" \
                --comment "$CLOSE_COMMENT" 2>&1; then
                echo "  ✅ Successfully closed issue #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
                CLOSED_COUNT=$((CLOSED_COUNT + 1))
              else
                echo "  ⚠️ Failed to close issue #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
                FAILED_ISSUES+=("$ISSUE_NUMBER")
              fi
            fi
          done <<< "$MATCHING_ISSUE_NUMBERS"

          # Summary report
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow: $WORKFLOW_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- Issues closed: $CLOSED_COUNT" >> $GITHUB_STEP_SUMMARY

          if [ ${#FAILED_ISSUES[@]} -gt 0 ]; then
            echo "- Failed to close: ${#FAILED_ISSUES[@]} issue(s)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Failed issues:" >> $GITHUB_STEP_SUMMARY
            for failed in "${FAILED_ISSUES[@]}"; do
              echo "  - #$failed" >> $GITHUB_STEP_SUMMARY
            done
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Auto-close completed for $WORKFLOW_NAME" >> $GITHUB_STEP_SUMMARY
