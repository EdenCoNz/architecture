name: Detect Workflow Failures

# IMPORTANT: This workflow only monitors workflows that complete on the DEFAULT BRANCH (main)
# due to GitHub Actions workflow_run trigger limitations.
#
# For PR branch failures:
#   - Frontend CI/CD and Backend CI/CD have inline failure detection
#   - They create GitHub issues directly when failures occur on PR branches
#
# For main branch failures:
#   - This external workflow provides detailed analysis
#   - Creates a SINGLE aggregated issue per workflow run with all failures
#   - Follows the structure defined in issue-log-template.json
#   - Provides comprehensive failure reporting with log excerpts
#
# This workflow detects failed jobs in completed workflows
# It runs after Frontend CI/CD or Backend CI/CD workflows complete and checks for failures
on:
  workflow_run:
    workflows: ["Frontend CI/CD", "Backend CI/CD"]
    types: [completed]

# Required permissions for workflow
permissions:
  contents: read  # Read repository contents and workflow files
  actions: read   # Read workflow run information via API
  issues: write   # Create issues for workflow failures

jobs:
  detect-failures:
    name: Detect Job Failures
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    # Only run if the workflow had failures or was cancelled
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'cancelled' }}
    outputs:
      total_jobs: ${{ steps.detect-failures.outputs.total_jobs }}
      failed_jobs: ${{ steps.detect-failures.outputs.failed_jobs }}
      cancelled_jobs: ${{ steps.detect-failures.outputs.cancelled_jobs }}
      failed_job_names: ${{ steps.detect-failures.outputs.failed_job_names }}
      failed_job_ids: ${{ steps.detect-failures.outputs.failed_job_ids }}
      run_id: ${{ steps.workflow-details.outputs.run_id }}
      jobs_json: ${{ steps.fetch-jobs.outputs.jobs_json }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get workflow run details
        id: workflow-details
        run: |
          echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
          echo "workflow_name=${{ github.event.workflow_run.name }}" >> $GITHUB_OUTPUT
          echo "run_number=${{ github.event.workflow_run.run_number }}" >> $GITHUB_OUTPUT
          echo "conclusion=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
          echo "run_url=${{ github.event.workflow_run.html_url }}" >> $GITHUB_OUTPUT

      - name: Fetch workflow jobs
        id: fetch-jobs
        run: |
          # Fetch all jobs for this workflow run
          JOBS_JSON=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs")

          echo "jobs_json<<EOF" >> $GITHUB_OUTPUT
          echo "$JOBS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Detect failed jobs
        id: detect-failures
        run: |
          # Parse jobs JSON and identify failures
          JOBS_JSON='${{ steps.fetch-jobs.outputs.jobs_json }}'

          # Count total jobs and failed jobs
          TOTAL_JOBS=$(echo "$JOBS_JSON" | jq '.total_count')
          FAILED_JOBS=$(echo "$JOBS_JSON" | jq '[.jobs[] | select(.conclusion == "failure")] | length')
          CANCELLED_JOBS=$(echo "$JOBS_JSON" | jq '[.jobs[] | select(.conclusion == "cancelled")] | length')

          echo "total_jobs=$TOTAL_JOBS" >> $GITHUB_OUTPUT
          echo "failed_jobs=$FAILED_JOBS" >> $GITHUB_OUTPUT
          echo "cancelled_jobs=$CANCELLED_JOBS" >> $GITHUB_OUTPUT

          # Extract failed job details (name, ID, and conclusion)
          FAILED_JOB_NAMES=$(echo "$JOBS_JSON" | jq -r '[.jobs[] | select(.conclusion == "failure") | .name] | join(",")')
          FAILED_JOB_IDS=$(echo "$JOBS_JSON" | jq -r '[.jobs[] | select(.conclusion == "failure") | .id] | join(",")')

          echo "failed_job_names=$FAILED_JOB_NAMES" >> $GITHUB_OUTPUT
          echo "failed_job_ids=$FAILED_JOB_IDS" >> $GITHUB_OUTPUT

          # Create a detailed summary
          echo "## Workflow Failure Detection Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number**: ${{ github.event.workflow_run.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Conclusion**: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run URL**: ${{ github.event.workflow_run.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Total Jobs: $TOTAL_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "- Failed Jobs: $FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "- Cancelled Jobs: $CANCELLED_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$FAILED_JOBS" -gt 0 ]; then
            echo "### Failed Jobs" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # List each failed job with details
            echo "$JOBS_JSON" | jq -r '.jobs[] | select(.conclusion == "failure") |
              "#### " + .name + "\n" +
              "- **Job ID**: " + (.id | tostring) + "\n" +
              "- **Status**: " + .conclusion + "\n" +
              "- **Started**: " + .started_at + "\n" +
              "- **Completed**: " + .completed_at + "\n" +
              "- **URL**: " + .html_url + "\n"' >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$CANCELLED_JOBS" -gt 0 ]; then
            echo "### Cancelled Jobs" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # List each cancelled job with details
            echo "$JOBS_JSON" | jq -r '.jobs[] | select(.conclusion == "cancelled") |
              "#### " + .name + "\n" +
              "- **Job ID**: " + (.id | tostring) + "\n" +
              "- **Status**: " + .conclusion + "\n" +
              "- **Started**: " + .started_at + "\n" +
              "- **URL**: " + .html_url + "\n"' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Detect failed steps within jobs
        id: detect-step-failures
        if: steps.detect-failures.outputs.failed_jobs > 0
        run: |
          JOBS_JSON='${{ steps.fetch-jobs.outputs.jobs_json }}'

          echo "## Failed Step Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # For each failed job, identify which steps failed
          echo "$JOBS_JSON" | jq -r '.jobs[] | select(.conclusion == "failure") |
            "### Job: " + .name + "\n" +
            (
              [.steps[] | select(.conclusion == "failure") |
                "- **Step**: " + .name + "\n" +
                "  - **Number**: " + (.number | tostring) + "\n" +
                "  - **Started**: " + .started_at + "\n" +
                "  - **Completed**: " + .completed_at + "\n"
              ] | join("\n")
            )' >> $GITHUB_STEP_SUMMARY

      - name: Create aggregated failure JSON
        id: create-failure-json
        if: steps.detect-failures.outputs.failed_jobs > 0
        run: |
          JOBS_JSON='${{ steps.fetch-jobs.outputs.jobs_json }}'
          RUN_ID="${{ github.event.workflow_run.id }}"
          RUN_URL="${{ github.event.workflow_run.html_url }}"

          echo "## Creating Aggregated Failure Data" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create directory for failure data
          mkdir -p failure-data

          # Initialize the failure JSON structure based on issue-log-template.json
          FAILURE_JSON='{"runID":0,"runURL":"","failedJobs":[]}'

          # Set run-level metadata
          FAILURE_JSON=$(echo "$FAILURE_JSON" | jq --arg run_id "$RUN_ID" '.runID = ($run_id | tonumber)')
          FAILURE_JSON=$(echo "$FAILURE_JSON" | jq --arg run_url "$RUN_URL" '.runURL = $run_url')

          # Process each failed job and extract failure details
          echo "$JOBS_JSON" | jq -c '.jobs[] | select(.conclusion == "failure")' | while read -r job; do
            JOB_ID=$(echo "$job" | jq -r '.id')
            JOB_NAME=$(echo "$job" | jq -r '.name')

            # Find all failed steps in this job
            echo "$job" | jq -c '.steps[] | select(.conclusion == "failure")' | while read -r step; do
              STEP_NAME=$(echo "$step" | jq -r '.name')
              STEP_NUMBER=$(echo "$step" | jq -r '.number')

              # Fetch job logs to extract error details
              echo "Fetching logs for Job: $JOB_NAME, Step: $STEP_NAME" >> $GITHUB_STEP_SUMMARY

              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${{ github.repository }}/actions/jobs/$JOB_ID/logs" > job_logs_${JOB_ID}.txt || {
                  echo "Warning: Could not download logs for job $JOB_ID"
                  echo "" > job_logs_${JOB_ID}.txt
                }

              # Extract relevant log excerpt (around error/failure patterns)
              if grep -qi "error\|failed\|exception\|fatal" job_logs_${JOB_ID}.txt; then
                FIRST_ERROR_LINE=$(grep -ni "error\|failed\|exception\|fatal" job_logs_${JOB_ID}.txt | head -n 1 | cut -d: -f1)
                START_LINE=$((FIRST_ERROR_LINE - 30))
                if [ $START_LINE -lt 1 ]; then
                  START_LINE=1
                fi
                END_LINE=$((FIRST_ERROR_LINE + 20))
                LOG_EXCERPT=$(sed -n "${START_LINE},${END_LINE}p" job_logs_${JOB_ID}.txt)
              else
                # If no clear error pattern, extract last 50 lines
                LOG_EXCERPT=$(tail -n 50 job_logs_${JOB_ID}.txt)
              fi

              # Sanitize log excerpt
              LOG_EXCERPT=$(printf '%s\n' "$LOG_EXCERPT" | sed 's/\x1b\[[0-9;]*m//g')
              LINE_COUNT=$(echo "$LOG_EXCERPT" | wc -l)

              # Add this failure to the JSON array
              FAILURE_ENTRY=$(jq -n \
                --arg job_name "$JOB_NAME" \
                --arg step_name "$STEP_NAME" \
                --argjson line_count "$LINE_COUNT" \
                --arg log_detail "$LOG_EXCERPT" \
                '{
                  jobName: $job_name,
                  stepName: $step_name,
                  numberOfLinesInLog: $line_count,
                  logDetail: $log_detail
                }')

              # Read current failure JSON, append the new entry, and write back
              FAILURE_JSON=$(cat failure-data/workflow-failure-${RUN_ID}.json 2>/dev/null || echo "$FAILURE_JSON")
              FAILURE_JSON=$(echo "$FAILURE_JSON" | jq --argjson entry "$FAILURE_ENTRY" '.failedJobs += [$entry]')
              echo "$FAILURE_JSON" > failure-data/workflow-failure-${RUN_ID}.json
            done
          done

          # Read the final JSON file
          FINAL_JSON=$(cat failure-data/workflow-failure-${RUN_ID}.json)
          FAILED_JOB_COUNT=$(echo "$FINAL_JSON" | jq '.failedJobs | length')

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: Created aggregated failure data" >> $GITHUB_STEP_SUMMARY
          echo "**Failed Jobs/Steps**: $FAILED_JOB_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "**File**: \`failure-data/workflow-failure-${RUN_ID}.json\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Output the JSON file path for next steps
          echo "failure_json_path=failure-data/workflow-failure-${RUN_ID}.json" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Upload failure data as artifact
        if: steps.detect-failures.outputs.failed_jobs > 0
        uses: actions/upload-artifact@v4
        with:
          name: failure-data
          path: failure-data/
          retention-days: 7

      - name: Create single aggregated issue
        id: create-issue
        if: steps.detect-failures.outputs.failed_jobs > 0
        run: |
          RUN_ID="${{ github.event.workflow_run.id }}"
          RUN_URL="${{ github.event.workflow_run.html_url }}"
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          RUN_NUMBER="${{ github.event.workflow_run.run_number }}"
          HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
          HEAD_BRANCH="${{ github.event.workflow_run.head_branch }}"
          FAILURE_JSON_PATH="${{ steps.create-failure-json.outputs.failure_json_path }}"

          echo "## Creating Aggregated Failure Issue" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Read the aggregated failure JSON
          FAILURE_DATA=$(cat "$FAILURE_JSON_PATH")
          FAILED_JOB_COUNT=$(echo "$FAILURE_DATA" | jq '.failedJobs | length')

          # Create issue title
          ISSUE_TITLE="Workflow Run #${RUN_NUMBER} Failed: ${WORKFLOW_NAME} (${FAILED_JOB_COUNT} failure(s))"

          # Build issue body
          echo "# Workflow Failure Report" > issue_body_full.md
          echo "" >> issue_body_full.md
          echo "**Workflow**: ${WORKFLOW_NAME}" >> issue_body_full.md
          echo "**Run Number**: ${RUN_NUMBER}" >> issue_body_full.md
          echo "**Run ID**: ${RUN_ID}" >> issue_body_full.md
          echo "**Branch**: ${HEAD_BRANCH}" >> issue_body_full.md
          echo "**Commit**: ${HEAD_SHA}" >> issue_body_full.md
          echo "**Run URL**: ${RUN_URL}" >> issue_body_full.md
          echo "" >> issue_body_full.md
          echo "---" >> issue_body_full.md
          echo "" >> issue_body_full.md
          echo "## Summary" >> issue_body_full.md
          echo "" >> issue_body_full.md
          echo "This workflow run failed with **${FAILED_JOB_COUNT}** job/step failure(s)." >> issue_body_full.md
          echo "" >> issue_body_full.md
          echo "## Failed Jobs and Steps" >> issue_body_full.md
          echo "" >> issue_body_full.md

          # Add each failed job/step to the issue body
          echo "$FAILURE_DATA" | jq -r '.failedJobs[] |
            "### " + .jobName + " - " + .stepName + "\n\n" +
            "**Log Lines**: " + (.numberOfLinesInLog | tostring) + "\n\n" +
            "#### Error Log Excerpt\n\n" +
            "```\n" + .logDetail + "\n```\n\n" +
            "---\n"' >> issue_body_full.md

          # Create the GitHub issue
          ISSUE_URL=$(gh issue create \
            --title "$ISSUE_TITLE" \
            --body-file issue_body_full.md \
            --label "workflow-failure")

          echo "issue_url=$ISSUE_URL" >> $GITHUB_OUTPUT

          # Extract issue number
          ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]*$')
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

          echo "**Status**: ✓ Created aggregated failure issue" >> $GITHUB_STEP_SUMMARY
          echo "**Issue**: #${ISSUE_NUMBER}" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: ${ISSUE_URL}" >> $GITHUB_STEP_SUMMARY
          echo "**Failures Included**: ${FAILED_JOB_COUNT}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Output failure detection results
        if: always()
        run: |
          echo "Failure detection completed"
          echo "Total jobs: ${{ steps.detect-failures.outputs.total_jobs }}"
          echo "Failed jobs: ${{ steps.detect-failures.outputs.failed_jobs }}"
          echo "Cancelled jobs: ${{ steps.detect-failures.outputs.cancelled_jobs }}"

          if [ "${{ steps.detect-failures.outputs.failed_jobs }}" -gt 0 ]; then
            echo "Failed job names: ${{ steps.detect-failures.outputs.failed_job_names }}"
            echo "Failed job IDs: ${{ steps.detect-failures.outputs.failed_job_ids }}"

            if [ -n "${{ steps.create-issue.outputs.issue_url }}" ]; then
              echo "Created issue: ${{ steps.create-issue.outputs.issue_url }}"
            fi
          fi
