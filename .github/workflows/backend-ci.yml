name: Backend CI/CD

# Trigger only on pull requests to main branch
on:
  push:
    branches: [main, 'feature/**']
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:  # Allow manual triggering

# Explicit permissions (least privilege)
permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write
  security-events: write  # For uploading security scan results

# Prevent concurrent runs for same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Lint and Format Check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements/dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run Black formatter check
        run: black --check .

      - name: Run isort import sorter check
        run: isort --check-only .

      - name: Run Flake8 linter
        run: flake8

      - name: Generate lint summary
        if: always()
        run: |
          echo "## Code Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Black formatting: $(black --check . && echo '✅ Passed' || echo '❌ Failed')" >> $GITHUB_STEP_SUMMARY
          echo "- isort imports: $(isort --check-only . && echo '✅ Passed' || echo '❌ Failed')" >> $GITHUB_STEP_SUMMARY
          echo "- Flake8 linting: $(flake8 && echo '✅ Passed' || echo '❌ Failed')" >> $GITHUB_STEP_SUMMARY

  # Job 2: Type Check
  typecheck:
    name: Type Check with mypy
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements/dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run mypy type checker
        env:
          SECRET_KEY: typecheck-secret-key-for-ci-validation-only
          DB_NAME: sqlite
          DEBUG: 'False'
        run: mypy apps/

  # Job 3: Unit and Integration Tests with Coverage
  test:
    name: Tests with Coverage
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_backend_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements/dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run tests with coverage
        env:
          USE_POSTGRES_FOR_TESTS: 'true'
          DB_NAME: test_backend_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: localhost
          DB_PORT: 5432
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci-testing-only
          DEBUG: 'False'
        run: |
          pytest --cov=apps \
                 --cov-report=xml \
                 --cov-report=html \
                 --cov-report=term-missing \
                 --junitxml=pytest-report.xml \
                 -n auto

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: |
            backend/htmlcov/
            backend/coverage.xml
          retention-days: 30
          if-no-files-found: error

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ github.sha }}
          path: backend/pytest-report.xml
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse pytest output for test statistics
          if [ -f "pytest-report.xml" ]; then
            echo "### Test Execution" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Use Python to parse JUnit XML
            python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('pytest-report.xml')
          root = tree.getroot()
          tests = root.get('tests', '0')
          failures = root.get('failures', '0')
          errors = root.get('errors', '0')
          skipped = root.get('skipped', '0')
          time = root.get('time', '0')

          passed = int(tests) - int(failures) - int(errors) - int(skipped)

          print(f'- Total Tests: {tests}')
          print(f'- Passed: {passed} ✅')
          print(f'- Failed: {failures} ❌')
          print(f'- Errors: {errors} ⚠️')
          print(f'- Skipped: {skipped} ⏭️')
          print(f'- Duration: {float(time):.2f}s')
          " >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Coverage summary
          if [ -f "coverage.xml" ]; then
            echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()

          line_rate = float(root.get('line-rate', 0)) * 100
          branch_rate = float(root.get('branch-rate', 0)) * 100

          print(f'- Line Coverage: {line_rate:.1f}%')
          print(f'- Branch Coverage: {branch_rate:.1f}%')
          " >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "Full coverage reports are available as workflow artifacts." >> $GITHUB_STEP_SUMMARY

  # Job 4: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements/dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run pip safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r apps/ -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            backend/safety-report.json
            backend/bandit-report.json
          retention-days: 30
          if-no-files-found: warn

      - name: Security audit summary
        if: always()
        run: |
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "safety-report.json" ]; then
            echo "### Dependency Vulnerabilities (Safety)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            python -c "
          import json
          try:
              with open('safety-report.json', 'r') as f:
                  data = json.load(f)

              if isinstance(data, list) and len(data) > 0:
                  print(f'⚠️ Found {len(data)} vulnerabilities')
                  for vuln in data[:5]:  # Show first 5
                      pkg = vuln.get('package', 'Unknown')
                      version = vuln.get('installed_version', 'Unknown')
                      vuln_id = vuln.get('vulnerability_id', 'Unknown')
                      print(f'- {pkg} {version}: {vuln_id}')
              else:
                  print('✅ No known vulnerabilities detected')
          except Exception as e:
              print(f'Unable to parse safety report: {e}')
          " >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "bandit-report.json" ]; then
            echo "### Code Security Issues (Bandit)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            python -c "
          import json
          try:
              with open('bandit-report.json', 'r') as f:
                  data = json.load(f)

              results = data.get('results', [])
              metrics = data.get('metrics', {})

              if results:
                  high = sum(1 for r in results if r.get('issue_severity') == 'HIGH')
                  medium = sum(1 for r in results if r.get('issue_severity') == 'MEDIUM')
                  low = sum(1 for r in results if r.get('issue_severity') == 'LOW')

                  print(f'- HIGH severity: {high}')
                  print(f'- MEDIUM severity: {medium}')
                  print(f'- LOW severity: {low}')
              else:
                  print('✅ No security issues detected')
          except Exception as e:
              print(f'Unable to parse bandit report: {e}')
          " >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 5: Build Verification
  build-backend-prod-container:
    name: Build Backend Production Container
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: [lint, typecheck, test, security]
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    services:
      # PostgreSQL database for container startup validation
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: container_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      # Redis cache for container startup validation
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production container
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: false
          tags: backend-prod:${{ github.sha }}
          # Multi-level cache fallback: branch -> main -> general
          cache-from: |
            type=gha,scope=backend-prod-${{ github.ref_name }}
            type=gha,scope=backend-prod-main
            type=gha,scope=backend-prod
          cache-to: type=gha,mode=max,scope=backend-prod-${{ github.ref_name }}
          outputs: type=docker,dest=/tmp/backend-prod.tar

      - name: Load and inspect image
        run: |
          docker load --input /tmp/backend-prod.tar
          echo "## Backend Production Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          docker images backend-prod:${{ github.sha }} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get detailed size information
          IMAGE_SIZE=$(docker images backend-prod:${{ github.sha }} --format "{{.Size}}")
          echo "**Image Size**: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Compare with development image if available
          echo "### Image Optimization" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Production images should be smaller than development images due to:" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-stage build excluding development dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- No test frameworks or debugging tools" >> $GITHUB_STEP_SUMMARY
          echo "- Optimized runtime-only configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Test container starts
        run: |
          echo "### Container Startup Test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Generate a secure secret key for testing
          TEST_SECRET_KEY="container-startup-test-$(date +%s)-$(openssl rand -hex 16)"

          # Start container in background with proper database configuration
          # The container will run its entrypoint script which validates configuration,
          # checks database connectivity, runs deployment checks, applies migrations,
          # and collects static files before starting the server
          docker run -d \
            --name backend-prod-test \
            -e SECRET_KEY="$TEST_SECRET_KEY" \
            -e DEBUG=False \
            -e DJANGO_SETTINGS_MODULE=config.settings.production \
            -e ALLOWED_HOSTS=localhost,127.0.0.1,backend-prod-test \
            -e DB_NAME=container_test_db \
            -e DB_USER=test_user \
            -e DB_PASSWORD=test_password \
            -e DB_HOST=172.17.0.1 \
            -e DB_PORT=5432 \
            -e REDIS_URL=redis://172.17.0.1:6379/1 \
            -e CELERY_BROKER_URL=redis://172.17.0.1:6379/0 \
            -e CELERY_RESULT_BACKEND=redis://172.17.0.1:6379/0 \
            -e CORS_ALLOWED_ORIGINS=http://localhost:3000 \
            -e CSRF_TRUSTED_ORIGINS=http://localhost:8000 \
            backend-prod:${{ github.sha }}

          # Wait for container to initialize (entrypoint script runs checks, migrations, collectstatic)
          echo "Waiting for container to complete initialization..." >> $GITHUB_STEP_SUMMARY
          sleep 15

          # Check container is running
          if docker ps | grep -q backend-prod-test; then
            echo "✅ Container started successfully and remains running" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Container failed to start or exited" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Container Logs" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            docker logs backend-prod-test 2>&1 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Verify non-root user
          USER_ID=$(docker exec backend-prod-test id -u)
          if [ "$USER_ID" != "0" ]; then
            echo "✅ Container running as non-root user (UID: $USER_ID)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Container running as root user" >> $GITHUB_STEP_SUMMARY
          fi

          # Verify Python packages are accessible
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Python Dependencies Check" >> $GITHUB_STEP_SUMMARY
          if docker exec backend-prod-test python -c "import django; print(f'Django version: {django.VERSION}')"; then
            echo "✅ Python dependencies accessible" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Python dependencies not accessible" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check container logs for errors
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Container Initialization Logs" >> $GITHUB_STEP_SUMMARY
          ERROR_COUNT=$(docker logs backend-prod-test 2>&1 | grep -i error | wc -l)
          if [ $ERROR_COUNT -eq 0 ]; then
            echo "✅ No errors detected in container logs" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Found $ERROR_COUNT error(s) in logs" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            docker logs backend-prod-test 2>&1 | grep -i error | head -10 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          # Clean up
          echo "" >> $GITHUB_STEP_SUMMARY
          docker stop backend-prod-test
          docker rm backend-prod-test
          echo "✅ Container startup validation completed successfully" >> $GITHUB_STEP_SUMMARY

      - name: Upload container artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-prod-container-${{ github.sha }}
          path: /tmp/backend-prod.tar
          retention-days: 7
          if-no-files-found: error

      - name: Build completion summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Backend production container built successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps**: This container is ready for functional testing and security scanning" >> $GITHUB_STEP_SUMMARY

  # Job 6: Security Scan Backend Production Container
  security-scan-backend-prod:
    name: Security Scan Backend Production Container
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    needs: [build-backend-prod-container]
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')
    permissions:
      contents: read
      security-events: write  # Required to upload SARIF results

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download production container artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-prod-container-${{ github.sha }}
          path: /tmp

      - name: Load production container image
        run: |
          docker load --input /tmp/backend-prod.tar
          echo "## Backend Production Container Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scanner**: Trivy" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Types**: Vulnerabilities, Secrets, Misconfigurations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: backend-prod:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-backend-prod-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          scanners: 'vuln,secret,misconfig'
          exit-code: '0'
          timeout: '10m'

      - name: Upload Trivy results to GitHub Security tab
        id: upload-sarif-backend-prod
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true  # Don't fail pipeline if upload fails
        if: always()
        with:
          sarif_file: 'trivy-backend-prod-results.sarif'
          category: 'container-backend-prod'

      - name: Check SARIF upload status
        if: always()
        run: |
          if [ "${{ steps.upload-sarif-backend-prod.outcome }}" = "failure" ]; then
            echo "## SARIF Upload Status: Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Unable to upload security scan results to GitHub Security tab**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This is expected if:" >> $GITHUB_STEP_SUMMARY
            echo "- Repository is private without GitHub Advanced Security enabled" >> $GITHUB_STEP_SUMMARY
            echo "- Code Scanning API is not accessible" >> $GITHUB_STEP_SUMMARY
            echo "- Organization security policies block the integration" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Fallback**: Security scan results are available as workflow artifacts below." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "## SARIF Upload Status: Success" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Security scan results successfully uploaded to GitHub Security tab**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "View results at: ${{ github.server_url }}/${{ github.repository }}/security/code-scanning" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run Trivy vulnerability scanner (JSON)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: backend-prod:${{ github.sha }}
          format: 'json'
          output: 'trivy-backend-prod-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          scanners: 'vuln,secret,misconfig'
          exit-code: '0'
          timeout: '10m'

      - name: Parse scan results and generate summary
        if: always()
        run: |
          echo "## Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "trivy-backend-prod-results.json" ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-backend-prod-results.json)
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-backend-prod-results.json)
            MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-backend-prod-results.json)
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-backend-prod-results.json)
            TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))

            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| CRITICAL | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| HIGH | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| MEDIUM | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
            echo "| LOW | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "| **TOTAL** | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              echo "### Critical and High Severity Vulnerabilities" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL" or .Severity=="HIGH") | "[\(.Severity)] \(.VulnerabilityID) - \(.PkgName) \(.InstalledVersion) → \(.FixedVersion // "no fix available")\n  Title: \(.Title)\n"' trivy-backend-prod-results.json | head -50 >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi

            echo "### Threshold Evaluation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            THRESHOLD_CRITICAL=0
            THRESHOLD_HIGH=5

            if [ $CRITICAL -gt $THRESHOLD_CRITICAL ]; then
              echo "❌ **FAILED**: Critical vulnerabilities ($CRITICAL) exceed threshold ($THRESHOLD_CRITICAL)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Production containers must not have critical vulnerabilities." >> $GITHUB_STEP_SUMMARY
              echo "Full scan results are available in the Security tab." >> $GITHUB_STEP_SUMMARY
              exit 1
            elif [ $HIGH -gt $THRESHOLD_HIGH ]; then
              echo "❌ **FAILED**: High vulnerabilities ($HIGH) exceed threshold ($THRESHOLD_HIGH)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Please remediate high severity vulnerabilities before deployment." >> $GITHUB_STEP_SUMMARY
              echo "Full scan results are available in the Security tab." >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "✅ **PASSED**: Vulnerability counts are within acceptable thresholds" >> $GITHUB_STEP_SUMMARY
              echo "- Critical: $CRITICAL / $THRESHOLD_CRITICAL" >> $GITHUB_STEP_SUMMARY
              echo "- High: $HIGH / $THRESHOLD_HIGH" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Full scan results are available in the Security tab and as workflow artifacts." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Scan results file not found. Scan may have failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload scan results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-backend-prod-scan-results-${{ github.sha }}
          path: |
            trivy-backend-prod-results.sarif
            trivy-backend-prod-results.json
          retention-days: 30

  # Job 7: Backend Production Container Functional Testing
  test-backend-prod-container:
    name: Backend Production Container Functional Testing
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    needs: [build-backend-prod-container, security-scan-backend-prod]
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    services:
      # PostgreSQL database for functional testing
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: functional_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      # Redis cache for functional testing
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download production container artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-prod-container-${{ github.sha }}
          path: /tmp

      - name: Load production container image
        run: |
          echo "## Backend Production Container Functional Testing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Loading Container Image" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          docker load --input /tmp/backend-prod.tar

          echo "✅ Container image loaded successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Start production container with dependencies
        id: start-container
        run: |
          echo "### Starting Container" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create a network for container communication
          docker network create test-network || true

          # Generate a secure secret key for testing
          TEST_SECRET_KEY="functional-test-$(date +%s)-$(openssl rand -hex 16)"

          # Start the production container
          docker run -d \
            --name backend-prod-functional-test \
            --network test-network \
            -e SECRET_KEY="$TEST_SECRET_KEY" \
            -e DEBUG=False \
            -e DJANGO_SETTINGS_MODULE=config.settings.production \
            -e ALLOWED_HOSTS=localhost,127.0.0.1,backend-prod-functional-test \
            -e DB_NAME=functional_test_db \
            -e DB_USER=test_user \
            -e DB_PASSWORD=test_password \
            -e DB_HOST=172.17.0.1 \
            -e DB_PORT=5432 \
            -e REDIS_URL=redis://172.17.0.1:6379/1 \
            -e CELERY_BROKER_URL=redis://172.17.0.1:6379/0 \
            -e CELERY_RESULT_BACKEND=redis://172.17.0.1:6379/0 \
            -e CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173 \
            -e CSRF_TRUSTED_ORIGINS=http://localhost:8000,http://localhost:3000 \
            -p 8000:8000 \
            backend-prod:${{ github.sha }}

          # Wait for container to start
          echo "Waiting for container to initialize..." >> $GITHUB_STEP_SUMMARY
          sleep 10

          # Check if container is running
          if docker ps | grep -q backend-prod-functional-test; then
            echo "✅ Container started successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Container failed to start" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Container Logs" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            docker logs backend-prod-functional-test 2>&1 | tail -50 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Verify container health
        id: health-check
        run: |
          echo "### Health Check Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Wait for health checks to pass (up to 60 seconds)
          RETRY_COUNT=0
          MAX_RETRIES=20
          HEALTH_CHECK_PASSED=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Check Docker health status
            HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' backend-prod-functional-test 2>/dev/null || echo "no-health-check")

            if [ "$HEALTH_STATUS" = "healthy" ]; then
              HEALTH_CHECK_PASSED=true
              break
            elif [ "$HEALTH_STATUS" = "unhealthy" ]; then
              echo "❌ Health check failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Health Status**: $HEALTH_STATUS" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Container Logs" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              docker logs backend-prod-functional-test 2>&1 | tail -100 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            echo "Health status: $HEALTH_STATUS (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            sleep 3
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done

          if [ "$HEALTH_CHECK_PASSED" = true ]; then
            echo "✅ Container health check passed" >> $GITHUB_STEP_SUMMARY
            echo "**Health Status**: healthy" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health check failed to pass within timeout period" >> $GITHUB_STEP_SUMMARY
            echo "**Health Status**: $HEALTH_STATUS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Container Logs" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            docker logs backend-prod-functional-test 2>&1 | tail -100 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Test database connectivity
        run: |
          echo "### Database Connectivity Test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Execute Django's database check command inside the container
          if docker exec backend-prod-functional-test python manage.py check_database --quiet; then
            echo "✅ Database connection successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Database connection failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Database Check Logs" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            docker exec backend-prod-functional-test python manage.py check_database 2>&1 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Test API health endpoint
        run: |
          echo "### API Health Endpoint Test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test the health endpoint with retry logic to handle timing issues
          RETRY_COUNT=0
          MAX_RETRIES=20  # 20 retries × 3 seconds = 60 seconds total
          HEALTH_ENDPOINT_PASSED=false
          LAST_HTTP_CODE=""
          LAST_BODY=""

          echo "Testing health endpoint with retry logic (up to 60 seconds)..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Capture start time for response time calculation
            START_TIME=$(date +%s%N)

            # Test the health endpoint
            RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:8000/api/v1/health/ 2>/dev/null || echo -e "\n000")
            HTTP_CODE=$(echo "$RESPONSE" | tail -1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            # Calculate response time in milliseconds
            END_TIME=$(date +%s%N)
            RESPONSE_TIME_MS=$(( (END_TIME - START_TIME) / 1000000 ))

            # Store last response for final reporting
            LAST_HTTP_CODE="$HTTP_CODE"
            LAST_BODY="$BODY"

            if [ "$HTTP_CODE" = "200" ]; then
              HEALTH_ENDPOINT_PASSED=true
              echo "✅ Health endpoint responding correctly (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)" >> $GITHUB_STEP_SUMMARY
              echo "**HTTP Status**: $HTTP_CODE" >> $GITHUB_STEP_SUMMARY
              echo "**Response Time**: ${RESPONSE_TIME_MS}ms" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Response**:" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              echo "$BODY" | jq '.' 2>/dev/null || echo "$BODY" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              break
            fi

            # Log each failed attempt for debugging
            echo "Health endpoint status: $HTTP_CODE (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES, response time: ${RESPONSE_TIME_MS}ms)"

            sleep 3
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done

          if [ "$HEALTH_ENDPOINT_PASSED" = false ]; then
            echo "❌ Health endpoint failed to respond with HTTP 200 within timeout period" >> $GITHUB_STEP_SUMMARY
            echo "**Final HTTP Status**: $LAST_HTTP_CODE" >> $GITHUB_STEP_SUMMARY
            echo "**Attempts**: $RETRY_COUNT/$MAX_RETRIES" >> $GITHUB_STEP_SUMMARY
            echo "**Timeout Duration**: 60 seconds" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Final Response**:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$LAST_BODY" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Container Logs" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            docker logs backend-prod-functional-test 2>&1 | tail -100 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Test critical API endpoints
        run: |
          echo "### Critical API Endpoints Test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          ENDPOINTS_PASSED=0
          ENDPOINTS_FAILED=0

          # Test API root endpoint
          echo "**Testing API Root** (/api/v1/)" >> $GITHUB_STEP_SUMMARY
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:8000/api/v1/ || echo "000")
          HTTP_CODE=$(echo "$RESPONSE" | tail -1)

          if [ "$HTTP_CODE" = "200" ]; then
            echo "- ✅ API Root: $HTTP_CODE" >> $GITHUB_STEP_SUMMARY
            ENDPOINTS_PASSED=$((ENDPOINTS_PASSED + 1))
          else
            echo "- ❌ API Root: $HTTP_CODE" >> $GITHUB_STEP_SUMMARY
            ENDPOINTS_FAILED=$((ENDPOINTS_FAILED + 1))
          fi

          # Test configuration endpoints
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Testing Configuration Endpoints**" >> $GITHUB_STEP_SUMMARY
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:8000/api/v1/configuration/features/ || echo "000")
          HTTP_CODE=$(echo "$RESPONSE" | tail -1)

          if [ "$HTTP_CODE" = "200" ]; then
            echo "- ✅ Features Config: $HTTP_CODE" >> $GITHUB_STEP_SUMMARY
            ENDPOINTS_PASSED=$((ENDPOINTS_PASSED + 1))
          else
            echo "- ⚠️ Features Config: $HTTP_CODE (may require authentication)" >> $GITHUB_STEP_SUMMARY
          fi

          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:8000/api/v1/configuration/ui/ || echo "000")
          HTTP_CODE=$(echo "$RESPONSE" | tail -1)

          if [ "$HTTP_CODE" = "200" ]; then
            echo "- ✅ UI Config: $HTTP_CODE" >> $GITHUB_STEP_SUMMARY
            ENDPOINTS_PASSED=$((ENDPOINTS_PASSED + 1))
          else
            echo "- ⚠️ UI Config: $HTTP_CODE (may require authentication)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Endpoint Test Results**:" >> $GITHUB_STEP_SUMMARY
          echo "- Passed: $ENDPOINTS_PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Failed: $ENDPOINTS_FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Fail if critical endpoints don't work
          if [ $ENDPOINTS_FAILED -gt 0 ]; then
            echo "⚠️ Some endpoints failed, but health endpoint is working" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Container Logs" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            docker logs backend-prod-functional-test 2>&1 | tail -100 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ All tested endpoints responding correctly" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Test static files serving
        run: |
          echo "### Static Files Test" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test if Django admin static files are accessible
          RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:8000/static/admin/css/base.css || echo "000")
          HTTP_CODE=$(echo "$RESPONSE" | tail -1)

          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "304" ]; then
            echo "✅ Static files serving correctly" >> $GITHUB_STEP_SUMMARY
            echo "**HTTP Status**: $HTTP_CODE" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Static files may not be configured (HTTP $HTTP_CODE)" >> $GITHUB_STEP_SUMMARY
            echo "**Note**: Static files are typically served by nginx in production" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Verify container logs for errors
        if: always()
        run: |
          echo "### Container Log Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for errors in container logs
          ERROR_COUNT=$(docker logs backend-prod-functional-test 2>&1 | grep -i error | wc -l)
          WARNING_COUNT=$(docker logs backend-prod-functional-test 2>&1 | grep -i warning | wc -l)

          echo "**Log Summary**:" >> $GITHUB_STEP_SUMMARY
          echo "- Errors found: $ERROR_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Warnings found: $WARNING_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $ERROR_COUNT -gt 0 ]; then
            echo "### Recent Errors" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            docker logs backend-prod-functional-test 2>&1 | grep -i error | tail -20 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ $WARNING_COUNT -gt 5 ]; then
            echo "### Recent Warnings" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            docker logs backend-prod-functional-test 2>&1 | grep -i warning | tail -10 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Container resource usage
        if: always()
        run: |
          echo "### Container Resource Usage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get container stats
          STATS=$(docker stats backend-prod-functional-test --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}")

          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$STATS" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup containers
        if: always()
        run: |
          echo "### Cleanup" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Stop and remove container
          docker stop backend-prod-functional-test 2>/dev/null || true
          docker rm backend-prod-functional-test 2>/dev/null || true
          docker network rm test-network 2>/dev/null || true

          echo "✅ Cleanup completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Functional testing summary
        if: always()
        run: |
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Functional Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ **All functional tests passed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The backend production container is working correctly:" >> $GITHUB_STEP_SUMMARY
            echo "- Container starts successfully with all dependencies" >> $GITHUB_STEP_SUMMARY
            echo "- Database connectivity verified" >> $GITHUB_STEP_SUMMARY
            echo "- API endpoints responding correctly" >> $GITHUB_STEP_SUMMARY
            echo "- Health checks passing" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Container is ready for security scanning and deployment**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Functional testing failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Review the test output above for failure details." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tested With**:" >> $GITHUB_STEP_SUMMARY
          echo "- PostgreSQL 16 (Alpine)" >> $GITHUB_STEP_SUMMARY
          echo "- Redis 7 (Alpine)" >> $GITHUB_STEP_SUMMARY
          echo "- Production container variant" >> $GITHUB_STEP_SUMMARY

  # Job 8: Publish Backend Production Container to Registry
  publish-backend-container-prod:
    name: Publish Backend Production Container
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    # Run after prod container is built, tested, and scanned
    needs: [build-backend-prod-container, security-scan-backend-prod, test-backend-prod-container]
    # Only publish on successful builds, not from forks
    if: |
      success() &&
      github.event_name != 'pull_request' ||
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    permissions:
      contents: read
      packages: write  # Required for GHCR push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Generate container metadata
        id: meta
        run: |
          # Extract short SHA (first 7 characters)
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

          # Determine semantic version from commit messages or use default
          VERSION="1.0.0"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          # Repository owner in lowercase for GHCR
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "repo_owner=${REPO_OWNER}" >> $GITHUB_OUTPUT

          # Full image name
          IMAGE_NAME="ghcr.io/${REPO_OWNER}/backend"
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

          # Sanitize branch name for Docker tag compatibility
          # Docker tags can only contain: a-z, A-Z, 0-9, _, ., -
          # Replace forward slashes and other invalid characters with hyphens
          SANITIZED_BRANCH=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "sanitized_branch=${SANITIZED_BRANCH}" >> $GITHUB_OUTPUT

          # Generate tags based on branch
          if [ "${{ github.ref_name }}" = "main" ]; then
            # Main branch gets latest + version tags
            TAGS="${IMAGE_NAME}:latest"
            TAGS="${TAGS},${IMAGE_NAME}:prod-${SHORT_SHA}"
            TAGS="${TAGS},${IMAGE_NAME}:prod-${SANITIZED_BRANCH}"
            TAGS="${TAGS},${IMAGE_NAME}:${VERSION}"
            TAGS="${TAGS},${IMAGE_NAME}:prod-${VERSION}-${SHORT_SHA}"
          else
            # Feature branches get branch-specific tags
            TAGS="${IMAGE_NAME}:prod-${SHORT_SHA}"
            TAGS="${TAGS},${IMAGE_NAME}:prod-${SANITIZED_BRANCH}"
            TAGS="${TAGS},${IMAGE_NAME}:prod-${VERSION}-${SHORT_SHA}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

          echo "## Container Registry Publishing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: ${IMAGE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "**Short SHA**: ${SHORT_SHA}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Determine build platforms
        id: platforms
        run: |
          # Multi-arch builds only on main branch for production deployments
          # Feature branches build for linux/amd64 only for faster iteration
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
            echo "label=Multi-architecture (amd64, arm64)" >> $GITHUB_OUTPUT
          else
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
            echo "label=Single-architecture (amd64)" >> $GITHUB_OUTPUT
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push production container
        id: docker-push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: true  # Push to registry after validation passes
          tags: ${{ steps.meta.outputs.tags }}
          # Build for configured platforms (multi-arch on main, single-arch on features)
          platforms: ${{ steps.platforms.outputs.platforms }}
          # Use existing caches for faster rebuild
          cache-from: |
            type=gha,scope=backend-prod-${{ github.ref_name }}
            type=gha,scope=backend-prod-main
            type=gha,scope=backend-prod
          # Don't write cache here (already written in build job)
          provenance: false
          sbom: false

      - name: Verify published image and inspect manifest
        run: |
          echo "## Published Production Image Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Digest**: \`${{ steps.docker-push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms Built**: ${{ steps.platforms.outputs.label }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Inspect manifest to verify all architectures
          PRIMARY_TAG="${{ steps.meta.outputs.image_name }}:prod-${{ steps.meta.outputs.short_sha }}"

          echo "### Manifest Inspection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Inspecting image manifest to verify all architecture variants:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker buildx imagetools inspect "$PRIMARY_TAG" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Verify expected architectures are present
          MANIFEST_JSON=$(docker buildx imagetools inspect --raw "$PRIMARY_TAG")

          # Check if this is a manifest list (multi-arch) or single image
          if echo "$MANIFEST_JSON" | jq -e '.manifests' > /dev/null 2>&1; then
            # Multi-arch manifest list
            ARCHS=$(echo "$MANIFEST_JSON" | jq -r '.manifests[].platform | "\(.os)/\(.architecture)"' | sort | tr '\n' ', ' | sed 's/,$//')
            ARCH_COUNT=$(echo "$MANIFEST_JSON" | jq '.manifests | length')

            echo "### Architecture Verification" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Multi-architecture manifest list detected**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Manifest Type | Multi-architecture list |" >> $GITHUB_STEP_SUMMARY
            echo "| Architectures | $ARCHS |" >> $GITHUB_STEP_SUMMARY
            echo "| Variant Count | $ARCH_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Verify expected architectures
            if [[ "${{ steps.platforms.outputs.platforms }}" == *"arm64"* ]]; then
              if echo "$ARCHS" | grep -q "linux/arm64"; then
                echo "✅ arm64 architecture present" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ arm64 architecture MISSING" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
            fi

            if echo "$ARCHS" | grep -q "linux/amd64"; then
              echo "✅ amd64 architecture present" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ amd64 architecture MISSING" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            # Single architecture image
            ARCH=$(echo "$MANIFEST_JSON" | jq -r '.os + "/" + .architecture')

            echo "### Architecture Verification" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ **Single-architecture image**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Manifest Type | Single image |" >> $GITHUB_STEP_SUMMARY
            echo "| Architecture | $ARCH |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "> This is expected for feature branch builds (amd64 only)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Successfully Published Tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command Examples" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull by commit SHA (recommended for reproducibility)" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.meta.outputs.image_name }}:prod-${{ steps.meta.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull by version and commit" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.meta.outputs.image_name }}:prod-${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull by branch name" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.meta.outputs.image_name }}:prod-${{ steps.meta.outputs.sanitized_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "# Pull production latest (main branch only)" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ steps.meta.outputs.image_name }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Pull by semantic version (main branch only)" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ steps.meta.outputs.image_name }}:${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Note: Docker automatically pulls the correct architecture for your platform" >> $GITHUB_STEP_SUMMARY
          echo "# To pull specific architecture:" >> $GITHUB_STEP_SUMMARY
          echo "docker pull --platform linux/amd64 ${{ steps.meta.outputs.image_name }}:prod-${{ steps.meta.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.platforms.outputs.platforms }}" == *"arm64"* ]]; then
            echo "docker pull --platform linux/arm64 ${{ steps.meta.outputs.image_name }}:prod-${{ steps.meta.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security and Quality Gates Passed" >> $GITHUB_STEP_SUMMARY
          echo "- Functional tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Security scan: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality checks: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Production image successfully published and available in GitHub Container Registry." >> $GITHUB_STEP_SUMMARY

  # Job 9: Deploy Backend to Ubuntu Server
  deploy-backend-to-ubuntu:
    name: Deploy Backend to Ubuntu Server
    uses: ./.github/workflows/deploy-to-ubuntu.yml
    needs: [build-backend-prod-container, security-scan-backend-prod, test-backend-prod-container]
    # Deploy on any push to main branch
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'

    with:
      service_name: backend
      docker_image_artifact: backend-prod-container-${{ github.sha }}
      docker_image_file: backend-prod.tar
      docker_compose_file: backend/docker-compose.production.yml
      container_name: backend-app-prod
      image_name: backend-prod
      remote_deploy_path: ~/deployments/backend
      health_check_enabled: true
      health_check_retries: 15
      health_check_interval: 3

    secrets: inherit

    permissions:
      contents: read

  # Job 10: Auto-Close Issue from Commit Message
  auto-close-issue-from-commit:
    name: Auto-Close Issue from Commit Message
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    # Always run this job, regardless of whether previous jobs succeeded or failed
    if: always()
    permissions:
      issues: write
      contents: read

    steps:
      - name: Get commit message
        id: get-message
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PR events, fetch the latest commit message
            SHA="${{ github.event.pull_request.head.sha }}"
            MESSAGE=$(gh api repos/${{ github.repository }}/commits/${SHA} --jq '.commit.message')
            echo "sha=${SHA}" >> $GITHUB_OUTPUT
            echo "message<<EOF" >> $GITHUB_OUTPUT
            echo "${MESSAGE}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # For workflow_dispatch events, use the current commit
            SHA="${{ github.sha }}"
            MESSAGE=$(gh api repos/${{ github.repository }}/commits/${SHA} --jq '.commit.message')
            echo "sha=${SHA}" >> $GITHUB_OUTPUT
            echo "message<<EOF" >> $GITHUB_OUTPUT
            echo "${MESSAGE}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          echo "## Commit Message Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Extract issue numbers from commit message
        id: extract-issues
        run: |
          COMMIT_MESSAGE='${{ steps.get-message.outputs.message }}'

          echo "**Commit Message**:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$COMMIT_MESSAGE" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract issue numbers using pattern: "fix issue #123" or "Fix issue #123" (case insensitive)
          # This regex matches variations like:
          # - "fix issue #123"
          # - "Fix issue #456"
          # - "fixes issue #789"
          # - "fixed issue #999"
          ISSUE_NUMBERS=$(echo "$COMMIT_MESSAGE" | grep -iEo 'fix(es|ed)? issue #[0-9]+' | grep -oE '[0-9]+' | sort -u)

          if [ -z "$ISSUE_NUMBERS" ]; then
            echo "has_issues=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No issue references found in commit message" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Pattern**: Looking for 'fix issue #<number>' (case insensitive)" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Convert to comma-separated list for output
          ISSUE_LIST=$(echo "$ISSUE_NUMBERS" | tr '\n' ',' | sed 's/,$//')

          echo "has_issues=true" >> $GITHUB_OUTPUT
          echo "issue_list=$ISSUE_LIST" >> $GITHUB_OUTPUT
          echo "issue_count=$(echo "$ISSUE_NUMBERS" | wc -l)" >> $GITHUB_OUTPUT

          echo "✅ Found issue reference(s) in commit message:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for issue in $ISSUE_NUMBERS; do
            echo "- Issue #$issue" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Close referenced issues
        if: steps.extract-issues.outputs.has_issues == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ISSUE_LIST="${{ steps.extract-issues.outputs.issue_list }}"
          COMMIT_SHA="${{ steps.get-message.outputs.sha }}"
          WORKFLOW_STATUS="${{ job.status }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo "## Closing Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**CI Status**: $WORKFLOW_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: $COMMIT_SHA" >> $GITHUB_STEP_SUMMARY
          echo "**Run URL**: $RUN_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          CLOSED_COUNT=0
          FAILED_COUNT=0

          # Split comma-separated list and process each issue
          IFS=',' read -ra ISSUES <<< "$ISSUE_LIST"
          for ISSUE_NUMBER in "${ISSUES[@]}"; do
            echo "Processing issue #$ISSUE_NUMBER..." >> $GITHUB_STEP_SUMMARY

            # Check if issue exists and is open
            ISSUE_STATE=$(gh issue view "$ISSUE_NUMBER" --repo "${{ github.repository }}" --json state --jq '.state' 2>/dev/null || echo "NOT_FOUND")

            if [ "$ISSUE_STATE" = "NOT_FOUND" ]; then
              echo "  ⚠️ Issue #$ISSUE_NUMBER does not exist" >> $GITHUB_STEP_SUMMARY
              FAILED_COUNT=$((FAILED_COUNT + 1))
              continue
            fi

            if [ "$ISSUE_STATE" = "CLOSED" ]; then
              echo "  ℹ️ Issue #$ISSUE_NUMBER is already closed" >> $GITHUB_STEP_SUMMARY
              continue
            fi

            # Create close comment based on CI status
            if [ "$WORKFLOW_STATUS" = "success" ]; then
              CLOSE_COMMENT="Automatically closed by commit $COMMIT_SHA - Backend CI/CD workflow completed successfully.

          **Run URL**: $RUN_URL
          **Workflow**: Backend CI/CD
          **Status**: ✅ All checks passed"
            else
              CLOSE_COMMENT="Automatically closed by commit $COMMIT_SHA - Backend CI/CD workflow completed (some checks may have failed).

          **Run URL**: $RUN_URL
          **Workflow**: Backend CI/CD
          **Status**: ⚠️ Some checks failed (see run for details)"
            fi

            # Close the issue
            if gh issue close "$ISSUE_NUMBER" \
              --repo "${{ github.repository }}" \
              --comment "$CLOSE_COMMENT" 2>&1; then
              echo "  ✅ Successfully closed issue #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
              CLOSED_COUNT=$((CLOSED_COUNT + 1))
            else
              echo "  ❌ Failed to close issue #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
              FAILED_COUNT=$((FAILED_COUNT + 1))
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Issues processed: ${#ISSUES[@]}" >> $GITHUB_STEP_SUMMARY
          echo "- Successfully closed: $CLOSED_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Failed/Skipped: $FAILED_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ $CLOSED_COUNT -gt 0 ]; then
            echo "✅ Auto-close from commit message completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No issues were closed" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 11: Detect Workflow Failures
  detect-workflow-failures:
    name: Detect Workflow Failures
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    if: failure() || cancelled()
    permissions:
      issues: write
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Report workflow failure
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## Workflow Issue Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "⚠️ Workflow was manually triggered and had failures." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ job.status }}" == "cancelled" ]; then
            echo "⚠️ Workflow was cancelled." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ One or more jobs in this workflow have failed." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Creating GitHub issue for workflow failure..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Analyze workflow failures
        id: analyze-failures
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Fetch workflow run details
          RUN_ID="${{ github.run_id }}"

          echo "## Analyzing Workflow Failures" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID**: $RUN_ID" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Fetch all jobs for this workflow run
          JOBS_JSON=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs")

          # Count failed and cancelled jobs
          FAILED_JOBS=$(echo "$JOBS_JSON" | jq '[.jobs[] | select(.conclusion == "failure")] | length')
          CANCELLED_JOBS=$(echo "$JOBS_JSON" | jq '[.jobs[] | select(.conclusion == "cancelled")] | length')
          TOTAL_JOBS=$(echo "$JOBS_JSON" | jq '.total_count')

          echo "failed_jobs=$FAILED_JOBS" >> $GITHUB_OUTPUT
          echo "cancelled_jobs=$CANCELLED_JOBS" >> $GITHUB_OUTPUT
          echo "total_jobs=$TOTAL_JOBS" >> $GITHUB_OUTPUT

          # Extract first failed job details for issue creation
          FIRST_FAILED_JOB=$(echo "$JOBS_JSON" | jq -r '[.jobs[] | select(.conclusion == "failure")][0]')

          if [ "$FIRST_FAILED_JOB" != "null" ] && [ -n "$FIRST_FAILED_JOB" ]; then
            JOB_NAME=$(echo "$FIRST_FAILED_JOB" | jq -r '.name')
            JOB_ID=$(echo "$FIRST_FAILED_JOB" | jq -r '.id')
            JOB_URL=$(echo "$FIRST_FAILED_JOB" | jq -r '.html_url')
            FAILED_STEP=$(echo "$FIRST_FAILED_JOB" | jq -r '.steps[] | select(.conclusion == "failure") | .name' | head -n 1)

            if [ -z "$FAILED_STEP" ]; then
              FAILED_STEP="Job-level failure"
            fi

            echo "job_name=$JOB_NAME" >> $GITHUB_OUTPUT
            echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT
            echo "job_url=$JOB_URL" >> $GITHUB_OUTPUT
            echo "failed_step=$FAILED_STEP" >> $GITHUB_OUTPUT
            echo "has_failures=true" >> $GITHUB_OUTPUT

            echo "**First Failed Job**: $JOB_NAME" >> $GITHUB_STEP_SUMMARY
            echo "**Failed Step**: $FAILED_STEP" >> $GITHUB_STEP_SUMMARY
          else
            echo "has_failures=false" >> $GITHUB_OUTPUT
            echo "**Note**: No failed jobs found, workflow may have been cancelled" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Summary**:" >> $GITHUB_STEP_SUMMARY
          echo "- Total Jobs: $TOTAL_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "- Failed Jobs: $FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "- Cancelled Jobs: $CANCELLED_JOBS" >> $GITHUB_STEP_SUMMARY

      - name: Create failure tracking issue
        if: steps.analyze-failures.outputs.has_failures == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Extract metadata
          WORKFLOW_NAME="Backend CI/CD"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          JOB_NAME="${{ steps.analyze-failures.outputs.job_name }}"
          FAILED_STEP="${{ steps.analyze-failures.outputs.failed_step }}"
          BRANCH="${{ github.ref_name }}"

          # Extract feature ID if this is a feature branch
          if [[ "$BRANCH" =~ ^feature/([0-9]+) ]]; then
            FEATURE_ID="${BASH_REMATCH[1]}"
            FEATURE_NAME="$BRANCH"
          else
            FEATURE_ID="N/A"
            FEATURE_NAME="N/A"
          fi

          # Determine PR URL
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_URL="${{ github.event.pull_request.html_url }}"
          else
            PR_URL="N/A"
          fi

          # Create issue title
          ISSUE_TITLE="Workflow Failure: $WORKFLOW_NAME - $JOB_NAME - $FAILED_STEP"

          # Write issue body to temp file using echo
          {
            echo "Workflow: $WORKFLOW_NAME - Job: $JOB_NAME - Step: $FAILED_STEP"
            echo ""
            echo "Branch: $BRANCH"
            echo ""
            echo "Metadata Table:"
            echo "- title: $ISSUE_TITLE"
            echo "- featureID: $FEATURE_ID"
            echo "- featureName: $FEATURE_NAME"
            echo "- jobName: $JOB_NAME"
            echo "- stepName: $FAILED_STEP"
            echo "- PRURL: $PR_URL"
            echo "- commitURL: $COMMIT_URL"
            echo "- runURL: $RUN_URL"
            echo ""
            echo "Review logs at runURL above, fix the issue, and commit with 'Fix issue #N' to auto-close."
          } > /tmp/issue_body.md

          # Check for duplicate by searching existing issues with same title
          echo "Checking for duplicate issues..." >> $GITHUB_STEP_SUMMARY

          DUPLICATE_NUMBER=$(gh issue list --state open --limit 100 --search "in:title $ISSUE_TITLE" --json number --jq '.[0].number // empty')

          if [ -n "$DUPLICATE_NUMBER" ]; then
            echo "⚠️ Duplicate issue found: #$DUPLICATE_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "Adding 'attempted' label to existing issue..." >> $GITHUB_STEP_SUMMARY

            gh issue edit "$DUPLICATE_NUMBER" --add-label "attempted" || true

            echo "✓ Updated existing issue #$DUPLICATE_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Issue URL**: https://github.com/${{ github.repository }}/issues/$DUPLICATE_NUMBER" >> $GITHUB_STEP_SUMMARY
          else
            echo "No duplicate found, creating new issue..." >> $GITHUB_STEP_SUMMARY

            # Create the issue from file
            ISSUE_URL=$(gh issue create \
              --title "$ISSUE_TITLE" \
              --body-file /tmp/issue_body.md)

            ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]*$')

            echo "✓ Created issue #$ISSUE_NUMBER" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Issue URL**: $ISSUE_URL" >> $GITHUB_STEP_SUMMARY
          fi
