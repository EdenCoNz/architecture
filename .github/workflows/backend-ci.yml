name: Backend CI/CD

# Trigger on pull requests from feature branches and pushes to main branch
on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:  # Allow manual triggering

# Explicit permissions (least privilege)
permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write
  security-events: write  # For uploading security scan results

# Prevent concurrent runs for same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Lint and Format Check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements/dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run Black formatter check
        run: black --check .

      - name: Run isort import sorter check
        run: isort --check-only .

      - name: Run Flake8 linter
        run: flake8

      - name: Generate lint summary
        if: always()
        run: |
          echo "## Code Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Black formatting: $(black --check . && echo '✅ Passed' || echo '❌ Failed')" >> $GITHUB_STEP_SUMMARY
          echo "- isort imports: $(isort --check-only . && echo '✅ Passed' || echo '❌ Failed')" >> $GITHUB_STEP_SUMMARY
          echo "- Flake8 linting: $(flake8 && echo '✅ Passed' || echo '❌ Failed')" >> $GITHUB_STEP_SUMMARY

  # Job 2: Type Check
  typecheck:
    name: Type Check with mypy
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements/dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run mypy type checker
        run: mypy apps/

  # Job 3: Unit and Integration Tests with Coverage
  test:
    name: Tests with Coverage
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_backend_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements/dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run tests with coverage
        env:
          DB_NAME: test_backend_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: localhost
          DB_PORT: 5432
          REDIS_URL: redis://localhost:6379/1
          SECRET_KEY: test-secret-key-for-ci-testing-only
          DEBUG: 'False'
        run: |
          pytest --cov=apps \
                 --cov-report=xml \
                 --cov-report=html \
                 --cov-report=term-missing \
                 --junitxml=pytest-report.xml \
                 -n auto

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: |
            backend/htmlcov/
            backend/coverage.xml
          retention-days: 30
          if-no-files-found: error

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ github.sha }}
          path: backend/pytest-report.xml
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse pytest output for test statistics
          if [ -f "pytest-report.xml" ]; then
            echo "### Test Execution" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Use Python to parse JUnit XML
            python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('pytest-report.xml')
          root = tree.getroot()
          tests = root.get('tests', '0')
          failures = root.get('failures', '0')
          errors = root.get('errors', '0')
          skipped = root.get('skipped', '0')
          time = root.get('time', '0')

          passed = int(tests) - int(failures) - int(errors) - int(skipped)

          print(f'- Total Tests: {tests}')
          print(f'- Passed: {passed} ✅')
          print(f'- Failed: {failures} ❌')
          print(f'- Errors: {errors} ⚠️')
          print(f'- Skipped: {skipped} ⏭️')
          print(f'- Duration: {float(time):.2f}s')
          " >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Coverage summary
          if [ -f "coverage.xml" ]; then
            echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()

          line_rate = float(root.get('line-rate', 0)) * 100
          branch_rate = float(root.get('branch-rate', 0)) * 100

          print(f'- Line Coverage: {line_rate:.1f}%')
          print(f'- Branch Coverage: {branch_rate:.1f}%')
          " >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "Full coverage reports are available as workflow artifacts." >> $GITHUB_STEP_SUMMARY

  # Job 4: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements/dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run pip safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r apps/ -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            backend/safety-report.json
            backend/bandit-report.json
          retention-days: 30
          if-no-files-found: warn

      - name: Security audit summary
        if: always()
        run: |
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "safety-report.json" ]; then
            echo "### Dependency Vulnerabilities (Safety)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            python -c "
          import json
          try:
              with open('safety-report.json', 'r') as f:
                  data = json.load(f)

              if isinstance(data, list) and len(data) > 0:
                  print(f'⚠️ Found {len(data)} vulnerabilities')
                  for vuln in data[:5]:  # Show first 5
                      pkg = vuln.get('package', 'Unknown')
                      version = vuln.get('installed_version', 'Unknown')
                      vuln_id = vuln.get('vulnerability_id', 'Unknown')
                      print(f'- {pkg} {version}: {vuln_id}')
              else:
                  print('✅ No known vulnerabilities detected')
          except Exception as e:
              print(f'Unable to parse safety report: {e}')
          " >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "bandit-report.json" ]; then
            echo "### Code Security Issues (Bandit)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            python -c "
          import json
          try:
              with open('bandit-report.json', 'r') as f:
                  data = json.load(f)

              results = data.get('results', [])
              metrics = data.get('metrics', {})

              if results:
                  high = sum(1 for r in results if r.get('issue_severity') == 'HIGH')
                  medium = sum(1 for r in results if r.get('issue_severity') == 'MEDIUM')
                  low = sum(1 for r in results if r.get('issue_severity') == 'LOW')

                  print(f'- HIGH severity: {high}')
                  print(f'- MEDIUM severity: {medium}')
                  print(f'- LOW severity: {low}')
              else:
                  print('✅ No security issues detected')
          except Exception as e:
              print(f'Unable to parse bandit report: {e}')
          " >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 5: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    needs: [lint, typecheck, test, security]  # Only build if all checks pass
    # Only run on feature branches for PRs, or always for pushes/manual triggers
    if: github.event_name != 'pull_request' || startsWith(github.head_ref, 'feature/')

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/requirements/prod.txt

      - name: Install production dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/prod.txt

      - name: Collect static files
        env:
          SECRET_KEY: build-verification-secret-key
          DB_NAME: sqlite
          DEBUG: 'False'
        run: |
          python manage.py collectstatic --noinput --verbosity 2

      - name: Check Django configuration
        env:
          SECRET_KEY: build-verification-secret-key
          DB_NAME: sqlite
          DEBUG: 'False'
        run: |
          python manage.py check --deploy

      - name: Verify migrations
        env:
          SECRET_KEY: build-verification-secret-key
          DB_NAME: sqlite
          DEBUG: 'False'
        run: |
          python manage.py makemigrations --check --dry-run

      - name: Build summary
        run: |
          echo "## Build Verification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Production dependencies installed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Static files collected successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ Django deployment checks passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Migration state verified" >> $GITHUB_STEP_SUMMARY

  # Job 6: Deployment Readiness (only on main branch)
  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: [lint, typecheck, test, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Verify deployment readiness
        run: |
          echo "## Deployment Readiness" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All checks passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Linting completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ Type checking completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tests passed with coverage" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security audit completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build verification successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Ready for deployment to production" >> $GITHUB_STEP_SUMMARY

  # Job 7a: Get Commit Message (for PR events)
  get-commit-message:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/'))) ||
      github.event_name == 'pull_request'
    outputs:
      commit-message: ${{ steps.get-message.outputs.message }}
      commit-sha: ${{ steps.get-message.outputs.sha }}
    steps:
      - name: Get commit message
        id: get-message
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PR events, fetch the latest commit message
            SHA="${{ github.event.pull_request.head.sha }}"
            MESSAGE=$(gh api repos/${{ github.repository }}/commits/${SHA} --jq '.commit.message')
            echo "sha=${SHA}" >> $GITHUB_OUTPUT
            echo "message<<EOF" >> $GITHUB_OUTPUT
            echo "${MESSAGE}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # For push events, use the head commit
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "message<<EOF" >> $GITHUB_OUTPUT
            echo "${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

  # Job 7b: Auto-Close Issue (Reusable Workflow)
  auto-close-issue:
    needs: [lint, typecheck, test, security, build, get-commit-message]
    # Run on push to main/feature branches OR on pull_request events (needs ensures all jobs succeeded)
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/'))) ||
      github.event_name == 'pull_request'
    uses: ./.github/workflows/auto-close-issue.yml
    with:
      commit-message: ${{ needs.get-commit-message.outputs.commit-message }}
      repository: ${{ github.repository }}
      sha: ${{ needs.get-commit-message.outputs.commit-sha }}
      workflow-name: 'Backend CI/CD'
    permissions:
      issues: write
      contents: read
      pull-requests: write

  # Job 8: Detect Workflow Failures
  detect-workflow-failures:
    name: Detect Workflow Failures
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    if: failure() || cancelled()

    steps:
      - name: Report workflow failure
        run: |
          echo "## Workflow Issue Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" == "cancelled" ]; then
            echo "⚠️ Workflow was cancelled." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ One or more jobs in this workflow have failed." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the job logs above for details." >> $GITHUB_STEP_SUMMARY
