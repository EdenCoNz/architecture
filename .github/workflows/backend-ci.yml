name: Backend CI/CD

# Trigger on pull requests and pushes to main branch
on:
  pull_request:
    branches: [main, 'bau/**']
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

# Explicit permissions (least privilege)
permissions:
  contents: read
  checks: write
  actions: read  # Needed to fetch job logs and job information
  issues: write  # Needed for bug logger to create GitHub issues

# Prevent concurrent runs for same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Lint Check
  lint:
    name: Lint Check (Ruff)
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Ruff linting
        run: make lint

  # Job 2: Format Check
  format:
    name: Format Check (Black)
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Check Black formatting
        run: poetry run black --check .

  # Job 3: Type Check
  type-check:
    name: Type Check (MyPy)
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run MyPy type checking
        run: make type-check

  # Job 4: Test Suite
  test:
    name: Test Suite (Pytest)
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      # Run tests with coverage collection
      # Coverage is collected via pytest-cov plugin configured in pyproject.toml
      # Tests run in single-process mode (not parallel), creating a single .coverage file
      # For parallel test execution, use 'make test-parallel' instead
      - name: Run tests with coverage
        run: make test

      # Upload coverage artifacts for deployment-check job and future reference
      # Artifacts include:
      # - htmlcov/: Human-readable HTML coverage report
      # - coverage.xml: Machine-readable format for CI/CD tools
      # - coverage.json: Structured data format for programmatic analysis
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ github.sha }}
          path: |
            backend/htmlcov/
            backend/coverage.xml
            backend/coverage.json
          retention-days: 7
          if-no-files-found: error

      # Generate coverage summary for GitHub Actions summary page
      # This provides a quick overview of test coverage without downloading artifacts
      - name: Coverage summary
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Statistics" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          poetry run coverage report >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      # Enforce minimum coverage threshold of 80%
      # This step fails the workflow if coverage is below the threshold
      # Note: Coverage data is read from the single .coverage file created by pytest
      # No 'coverage combine' step is needed because tests run in single-process mode
      - name: Check coverage threshold
        run: |
          echo "========================================="
          echo "Checking coverage threshold (minimum: 80%)"
          echo "========================================="
          echo ""
          echo "Coverage data source: .coverage (single-process test execution)"
          echo ""
          poetry run coverage report --fail-under=80
          echo ""
          echo "âœ… Success: Coverage meets the 80% threshold requirement"
          echo "========================================="

  # Job 5: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-22.04
    timeout-minutes: 10

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Poetry security audit
        run: poetry show --tree
        continue-on-error: true

      - name: Install Safety
        run: poetry run pip install safety

      - name: Run Safety check
        run: poetry run safety check --json || true
        continue-on-error: true

      - name: Security audit summary
        if: always()
        run: |
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scan completed. Review logs for any vulnerabilities." >> $GITHUB_STEP_SUMMARY

  # Job 6: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    needs: [lint, format, type-check, test]  # Only build if all checks pass

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Verify Poetry build
        run: poetry build

      - name: Verify Django configuration
        run: |
          echo "Checking Django configuration..."
          PYTHONPATH=src poetry run python manage.py check --deploy --settings=backend.settings.production

      - name: Collect static files
        run: |
          echo "Collecting static files..."
          PYTHONPATH=src poetry run python manage.py collectstatic --noinput --settings=backend.settings.production
        env:
          DJANGO_SECRET_KEY: ci-build-secret-key-not-for-production
          DEBUG: False
          ALLOWED_HOSTS: localhost,127.0.0.1

      - name: Build summary
        run: |
          echo "## Build Verification Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Poetry build succeeded" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Django configuration validated" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Static files collected successfully" >> $GITHUB_STEP_SUMMARY

  # Job 7: Deployment Readiness (only on main branch)
  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: [lint, format, type-check, test, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage-${{ github.sha }}
          path: coverage/

      - name: Verify coverage artifacts
        run: |
          echo "## Deployment Readiness" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… All checks passed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Code quality verified" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Tests passed with coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Build verification successful" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Ready for deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifact Contents" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lah coverage/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Job 8: Log bugs and create GitHub issues
  log-bugs:
    name: Log Bug Report and Create Issue
    needs: [lint, format, type-check, test, security, build]
    if: |
      failure()
    uses: ./.github/workflows/bug-logger.yml
    with:
      job_results: ${{ toJSON(needs) }}
      branch_name: ${{ github.head_ref || github.ref_name }}
      pr_number: ${{ github.event.pull_request.number }}
      pr_url: ${{ github.event.pull_request.html_url }}
      pr_author: ${{ github.event.pull_request.user.login }}
      run_id: ${{ github.run_id }}
