# =============================================================================
# Backend Production Environment Configuration
# =============================================================================
# IMPORTANT: This is a template file. Copy it to .env.production and fill in
# the actual values. NEVER commit .env.production to version control!
#
# Usage:
#   1. Copy this file: cp .env.production.example .env.production
#   2. Fill in all required values below
#   3. Ensure .env.production is in .gitignore
#   4. Use with: docker compose -f docker-compose.production.yml up -d
# =============================================================================

# -----------------------------------------------------------------------------
# Django Core Settings
# -----------------------------------------------------------------------------
# Generate a secure secret key:
# python -c "import secrets; print(secrets.token_urlsafe(50))"
SECRET_KEY=CHANGE_ME_TO_A_LONG_RANDOM_STRING_AT_LEAST_50_CHARACTERS

# Debug mode (MUST be False in production)
DEBUG=False

# Comma-separated list of allowed hosts (domains/IPs)
# Example: yourdomain.com,www.yourdomain.com,api.yourdomain.com
ALLOWED_HOSTS=localhost,127.0.0.1

# -----------------------------------------------------------------------------
# Database Configuration
# -----------------------------------------------------------------------------
# PostgreSQL connection settings
DB_NAME=backend_prod_db
DB_USER=backend_prod_user
DB_PASSWORD=CHANGE_ME_TO_SECURE_DATABASE_PASSWORD
DB_HOST=db
DB_PORT=5432

# PostgreSQL tuning (optional - adjust based on server capacity)
POSTGRES_SHARED_BUFFERS=256MB
POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
POSTGRES_MAX_CONNECTIONS=100

# -----------------------------------------------------------------------------
# Redis Configuration
# -----------------------------------------------------------------------------
# Redis password (REQUIRED for production security)
# Generate with: openssl rand -base64 32
REDIS_PASSWORD=CHANGE_ME_TO_SECURE_REDIS_PASSWORD
REDIS_MAXMEMORY=512mb

# -----------------------------------------------------------------------------
# CORS & CSRF Configuration
# -----------------------------------------------------------------------------
# Comma-separated list of allowed CORS origins (frontend URLs)
# Example: https://yourdomain.com,https://www.yourdomain.com
CORS_ALLOWED_ORIGINS=https://yourdomain.com

# Comma-separated list of trusted origins for CSRF
# Example: https://yourdomain.com,https://www.yourdomain.com
CSRF_TRUSTED_ORIGINS=https://yourdomain.com

# -----------------------------------------------------------------------------
# Security Settings
# -----------------------------------------------------------------------------
# Set to True if using HTTPS (recommended for production)
SECURE_SSL_REDIRECT=True

# Session and CSRF cookie security (True for HTTPS)
SESSION_COOKIE_SECURE=True
CSRF_COOKIE_SECURE=True

# -----------------------------------------------------------------------------
# Gunicorn Configuration
# -----------------------------------------------------------------------------
# Number of worker processes (2-4 x num_cores recommended)
GUNICORN_WORKERS=4

# Request timeout in seconds
GUNICORN_TIMEOUT=30

# Maximum number of requests before worker restart (memory leak protection)
GUNICORN_MAX_REQUESTS=1000
GUNICORN_MAX_REQUESTS_JITTER=100

# -----------------------------------------------------------------------------
# Celery Configuration (if using background tasks)
# -----------------------------------------------------------------------------
# Number of concurrent Celery workers
CELERY_WORKER_CONCURRENCY=4

# -----------------------------------------------------------------------------
# Email Configuration (SMTP)
# -----------------------------------------------------------------------------
# Email backend (use SMTP in production)
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend

# SMTP server settings (example: Gmail, SendGrid, AWS SES, etc.)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=CHANGE_ME_TO_APP_PASSWORD
DEFAULT_FROM_EMAIL=noreply@yourdomain.com

# -----------------------------------------------------------------------------
# Sentry Error Tracking (Optional but recommended)
# -----------------------------------------------------------------------------
# Sentry DSN for error tracking
# Get from: https://sentry.io/settings/projects/
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# SENTRY_ENVIRONMENT=production
# SENTRY_TRACES_SAMPLE_RATE=0.1

# -----------------------------------------------------------------------------
# AWS S3 Storage (Optional - for media/static files)
# -----------------------------------------------------------------------------
# Uncomment if using AWS S3 for media storage
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_STORAGE_BUCKET_NAME=your-bucket-name
# AWS_S3_REGION_NAME=us-east-1
# USE_S3=True

# -----------------------------------------------------------------------------
# Application Settings
# -----------------------------------------------------------------------------
# Application port (exposed to reverse proxy)
BACKEND_PORT=8000

# Application environment name
ENVIRONMENT=production

# -----------------------------------------------------------------------------
# Logging Configuration
# -----------------------------------------------------------------------------
# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Slow request threshold in milliseconds
SLOW_REQUEST_THRESHOLD_MS=2000

# -----------------------------------------------------------------------------
# Rate Limiting
# -----------------------------------------------------------------------------
# Enable rate limiting in production
RATELIMIT_ENABLE=True

# -----------------------------------------------------------------------------
# Additional Security (Optional)
# -----------------------------------------------------------------------------
# JWT token expiration times (in minutes)
JWT_ACCESS_TOKEN_LIFETIME=15
JWT_REFRESH_TOKEN_LIFETIME=10080

# Password validation settings
PASSWORD_MIN_LENGTH=12

# -----------------------------------------------------------------------------
# Backup Configuration (Optional)
# -----------------------------------------------------------------------------
# Database backup settings
# BACKUP_ENABLED=True
# BACKUP_SCHEDULE="0 2 * * *"  # Daily at 2 AM
# BACKUP_RETENTION_DAYS=30
# BACKUP_S3_BUCKET=your-backup-bucket

# =============================================================================
# Notes
# =============================================================================
# 1. Never use default passwords in production
# 2. Ensure all SECRET_KEY, DB_PASSWORD, and REDIS_PASSWORD are strong
# 3. Configure ALLOWED_HOSTS and CORS_ALLOWED_ORIGINS with actual domains
# 4. Set up HTTPS with a reverse proxy (nginx, traefik, etc.)
# 5. Enable Sentry for production error tracking
# 6. Use AWS S3 or similar for media storage in production
# 7. Set up database backups and monitoring
# 8. Configure email service for password resets and notifications
# 9. Review Django deployment checklist: python manage.py check --deploy
# =============================================================================
