# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Frontend Application - Docker Compose Configuration
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# This Docker Compose file defines the frontend development environment with:
#   - Hot module replacement (HMR) for instant feedback
#   - Volume mounts for live code editing
#   - Persistent node_modules to preserve dependencies
#   - Port mapping for browser access
#
# Usage:
#   Start:    docker compose up
#   Stop:     docker compose down
#   Rebuild:  docker compose up --build
#   Logs:     docker compose logs -f frontend
#
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

services:
  frontend:
    # Build configuration
    build:
      context: .
      dockerfile: Dockerfile
      target: development

    # Container name
    container_name: frontend-dev

    # Port mapping - host:container
    # Access the application at http://localhost:5173
    ports:
      - "5173:5173"

    # Volume mounts for development
    volumes:
      # Bind mount source code for live editing
      # Changes to files on host immediately reflect in container
      - ./src:/app/src
      - ./public:/app/public
      - ./index.html:/app/index.html
      - ./vite.config.ts:/app/vite.config.ts
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.app.json:/app/tsconfig.app.json
      - ./tsconfig.node.json:/app/tsconfig.node.json
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json

      # Named volume for node_modules
      # Preserves installed dependencies between container restarts
      # Allows installing new dependencies without rebuilding
      - node_modules:/app/node_modules

    # Environment variables
    # Load from .env.docker file (supports override with .env.local)
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=development

    # Restart policy
    restart: unless-stopped

    # Resource limits (optional but recommended)
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Health check (optional for development)
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s

# Named volumes
volumes:
  node_modules:
    driver: local
