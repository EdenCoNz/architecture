# =============================================================================
# Unified Environment Configuration - All Environments
# =============================================================================
# This single .env file supports local, staging, and production environments.
#
# SETUP INSTRUCTIONS:
#   1. Copy this file: cp .env.unified.example .env
#   2. Edit the ENVIRONMENT variable below (local, staging, or production)
#   3. Uncomment and fill in the environment-specific sections
#   4. Start with: docker compose -f docker-compose.unified.yml up -d
#
# SWITCHING ENVIRONMENTS:
#   Just change the ENVIRONMENT variable and restart:
#   - ENVIRONMENT=local     -> Development environment
#   - ENVIRONMENT=staging   -> Staging environment
#   - ENVIRONMENT=production -> Production environment
#
# IMPORTANT SECURITY NOTES:
#   - NEVER commit this file with real secrets to version control
#   - Use different credentials for each environment
#   - Generate strong passwords: openssl rand -base64 32
#   - Store production secrets in a secrets manager (AWS Secrets Manager, Vault)
#
# =============================================================================

# =============================================================================
# PRIMARY ENVIRONMENT SELECTOR
# =============================================================================
# This is the ONLY variable you need to change to switch environments
# Valid values: local, staging, production
# =============================================================================
ENVIRONMENT=local

# =============================================================================
# Project Configuration
# =============================================================================
# Project name used for container and volume naming
# Change this to run multiple instances simultaneously
# =============================================================================
COMPOSE_PROJECT_NAME=app

# =============================================================================
# Common Configuration (All Environments)
# =============================================================================

# Application version
APP_VERSION=1.0.0

# -----------------------------------------------------------------------------
# Port Configuration
# -----------------------------------------------------------------------------
# These ports are consistent across all environments
# Port exposure is controlled by environment-specific variables below
# -----------------------------------------------------------------------------
PROXY_PORT=80
PROXY_SSL_PORT=443

# =============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# =============================================================================
# Uncomment the section for your chosen environment and fill in values
# =============================================================================

# ┌─────────────────────────────────────────────────────────────────────────┐
# │ LOCAL ENVIRONMENT (Development)                                         │
# └─────────────────────────────────────────────────────────────────────────┘
# Features:
#   - All ports exposed for debugging tools
#   - Bind mounts enabled for live code reload
#   - Development build targets
#   - Simple credentials
#   - Debug mode enabled
# ─────────────────────────────────────────────────────────────────────────────

# Core settings
DJANGO_SETTINGS_ENV=development
BUILD_TARGET=development
NODE_ENV=development
DEBUG=True
LOG_LEVEL=DEBUG

# Restart policy
RESTART_POLICY=unless-stopped

# Port exposure (expose all ports in local for debugging)
DB_PORT_EXPOSE=5432
REDIS_PORT_EXPOSE=6379
BACKEND_PORT_EXPOSE=8000
FRONTEND_PORT_EXPOSE=5173

# Code bind mounts (enabled for live reload)
BIND_MOUNT_CODE=true

# SSL/TLS (disabled in local)
SSL_ENABLED=
SECURE_SSL_REDIRECT=False
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False
SECURE_HSTS_SECONDS=0

# Database configuration (simple credentials for local)
DB_NAME=backend_db
DB_USER=postgres
DB_PASSWORD=postgres

# PostgreSQL tuning (local)
POSTGRES_SHARED_BUFFERS=128MB
POSTGRES_EFFECTIVE_CACHE_SIZE=512MB
POSTGRES_MAX_CONNECTIONS=50

# Redis configuration (no password in local)
REDIS_PASSWORD=
REDIS_MAXMEMORY=256mb
REDIS_SAVE_CONFIG=

# ALLOWED_HOSTS - THE KEY CONFIGURATION DIFFERENCE
# This is what primarily changes between environments
ALLOWED_HOSTS=localhost,127.0.0.1,backend

# CORS configuration (local)
CORS_ALLOWED_ORIGINS=http://localhost,http://127.0.0.1,http://localhost:5173,http://localhost:8000
CSRF_TRUSTED_ORIGINS=http://localhost,http://127.0.0.1,http://localhost:5173,http://localhost:8000

# Frontend runtime configuration (local)
FRONTEND_API_URL=http://localhost
FRONTEND_APP_NAME=Application (Local Dev)
FRONTEND_ENABLE_DEBUG=true
FRONTEND_ENABLE_ANALYTICS=false
FRONTEND_API_ENABLE_LOGGING=true

# Vite configuration (local)
VITE_API_URL=http://localhost
VITE_DEBUG=true

# Image configuration (build from source in local)
BACKEND_IMAGE=
FRONTEND_IMAGE=

# Nginx configuration (local)
NGINX_CONFIG=./nginx/nginx.conf

# Worker configuration (low concurrency for local)
CELERY_WORKER_CONCURRENCY=2
CELERY_LOG_LEVEL=info
CELERY_PROFILE=with-celery

# Resource limits (relaxed for local)
DB_CPU_LIMIT=2
DB_MEMORY_LIMIT=1G
DB_CPU_RESERVATION=0.5
DB_MEMORY_RESERVATION=256M

REDIS_CPU_LIMIT=0.5
REDIS_MEMORY_LIMIT=256M
REDIS_CPU_RESERVATION=0.25
REDIS_MEMORY_RESERVATION=128M

BACKEND_CPU_LIMIT=2
BACKEND_MEMORY_LIMIT=1G
BACKEND_CPU_RESERVATION=0.5
BACKEND_MEMORY_RESERVATION=512M

FRONTEND_CPU_LIMIT=2
FRONTEND_MEMORY_LIMIT=2G
FRONTEND_CPU_RESERVATION=1
FRONTEND_MEMORY_RESERVATION=512M

PROXY_CPU_LIMIT=0.5
PROXY_MEMORY_LIMIT=512M
PROXY_CPU_RESERVATION=0.25
PROXY_MEMORY_RESERVATION=256M

CELERY_CPU_LIMIT=1
CELERY_MEMORY_LIMIT=512M
CELERY_CPU_RESERVATION=0.25
CELERY_MEMORY_RESERVATION=256M

# Health check intervals (faster in local for quick feedback)
HEALTHCHECK_INTERVAL=10s
HEALTHCHECK_START_PERIOD=30s

# Logging configuration (verbose in local)
LOG_MAX_SIZE=10m
LOG_MAX_FILE=3
LOG_COMPRESS=false


# ┌─────────────────────────────────────────────────────────────────────────┐
# │ STAGING ENVIRONMENT                                                     │
# └─────────────────────────────────────────────────────────────────────────┘
# Features:
#   - Production-like configuration
#   - No direct port exposure (only proxy)
#   - Pre-built images from registry
#   - SSL/TLS enabled
#   - Moderate resource limits
#   - Enhanced logging
# ─────────────────────────────────────────────────────────────────────────────

## Uncomment and configure for STAGING:

# # Core settings
# DJANGO_SETTINGS_ENV=staging
# BUILD_TARGET=production
# NODE_ENV=production
# DEBUG=False
# LOG_LEVEL=INFO

# # Restart policy (always restart in staging)
# RESTART_POLICY=always

# # Port exposure (NO ports exposed except proxy)
# DB_PORT_EXPOSE=
# REDIS_PORT_EXPOSE=
# BACKEND_PORT_EXPOSE=
# FRONTEND_PORT_EXPOSE=

# # Code bind mounts (disabled - use images)
# BIND_MOUNT_CODE=

# # SSL/TLS (enabled in staging)
# SSL_ENABLED=true
# SECURE_SSL_REDIRECT=True
# SESSION_COOKIE_SECURE=True
# CSRF_COOKIE_SECURE=True
# SECURE_HSTS_SECONDS=31536000

# # Database configuration (SECURE credentials for staging)
# # IMPORTANT: Generate secure passwords with: openssl rand -base64 32
# DB_NAME=backend_staging_db
# DB_USER=backend_staging_user
# DB_PASSWORD=CHANGE_ME_TO_SECURE_DATABASE_PASSWORD

# # PostgreSQL tuning (staging)
# POSTGRES_SHARED_BUFFERS=256MB
# POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
# POSTGRES_MAX_CONNECTIONS=100

# # Redis configuration (password required in staging)
# # IMPORTANT: Generate with: openssl rand -base64 32
# REDIS_PASSWORD=CHANGE_ME_TO_SECURE_REDIS_PASSWORD
# REDIS_MAXMEMORY=512mb
# REDIS_SAVE_CONFIG=--save 900 1 --save 300 10 --save 60 10000

# # ALLOWED_HOSTS - THE KEY CONFIGURATION DIFFERENCE
# # Add your staging domain here
# ALLOWED_HOSTS=localhost,staging.yourdomain.com

# # CORS configuration (staging)
# # Add your staging domain
# CORS_ALLOWED_ORIGINS=https://staging.yourdomain.com
# CSRF_TRUSTED_ORIGINS=https://staging.yourdomain.com

# # Frontend runtime configuration (staging)
# FRONTEND_API_URL=https://staging.yourdomain.com
# FRONTEND_APP_NAME=Application (Staging)
# FRONTEND_ENABLE_DEBUG=false
# FRONTEND_ENABLE_ANALYTICS=false
# FRONTEND_API_ENABLE_LOGGING=true

# # Vite configuration (staging - minimal fallback)
# VITE_API_URL=https://staging.yourdomain.com
# VITE_DEBUG=false

# # Image configuration (use pre-built images)
# BACKEND_IMAGE=ghcr.io/yourusername/backend:staging
# FRONTEND_IMAGE=ghcr.io/yourusername/frontend:staging

# # Nginx configuration (staging with SSL)
# NGINX_CONFIG=./nginx/nginx.staging.conf

# # Worker configuration (moderate concurrency)
# CELERY_WORKER_CONCURRENCY=4
# CELERY_LOG_LEVEL=info
# CELERY_PROFILE=

# # Resource limits (moderate for staging)
# DB_CPU_LIMIT=2
# DB_MEMORY_LIMIT=1G
# DB_CPU_RESERVATION=1
# DB_MEMORY_RESERVATION=512M

# REDIS_CPU_LIMIT=1
# REDIS_MEMORY_LIMIT=512M
# REDIS_CPU_RESERVATION=0.5
# REDIS_MEMORY_RESERVATION=256M

# BACKEND_CPU_LIMIT=2
# BACKEND_MEMORY_LIMIT=2G
# BACKEND_CPU_RESERVATION=1
# BACKEND_MEMORY_RESERVATION=1G

# FRONTEND_CPU_LIMIT=1
# FRONTEND_MEMORY_LIMIT=1G
# FRONTEND_CPU_RESERVATION=0.5
# FRONTEND_MEMORY_RESERVATION=512M

# PROXY_CPU_LIMIT=1
# PROXY_MEMORY_LIMIT=512M
# PROXY_CPU_RESERVATION=0.5
# PROXY_MEMORY_RESERVATION=256M

# CELERY_CPU_LIMIT=2
# CELERY_MEMORY_LIMIT=1G
# CELERY_CPU_RESERVATION=0.5
# CELERY_MEMORY_RESERVATION=512M

# # Health check intervals (normal in staging)
# HEALTHCHECK_INTERVAL=15s
# HEALTHCHECK_START_PERIOD=45s

# # Logging configuration (enhanced in staging)
# LOG_MAX_SIZE=50m
# LOG_MAX_FILE=5
# LOG_COMPRESS=true


# ┌─────────────────────────────────────────────────────────────────────────┐
# │ PRODUCTION ENVIRONMENT                                                  │
# └─────────────────────────────────────────────────────────────────────────┘
# Features:
#   - Maximum security and performance
#   - No direct port exposure (only proxy)
#   - Security-scanned registry images
#   - SSL/TLS enforced with HSTS
#   - Strict resource limits
#   - Minimal logging for performance
#   - Health checks with auto-restart
# ─────────────────────────────────────────────────────────────────────────────

## Uncomment and configure for PRODUCTION:

# # Core settings
# DJANGO_SETTINGS_ENV=production
# BUILD_TARGET=production
# NODE_ENV=production
# DEBUG=False
# LOG_LEVEL=WARNING

# # Restart policy (always restart in production)
# RESTART_POLICY=always

# # Port exposure (NO ports exposed except proxy)
# DB_PORT_EXPOSE=
# REDIS_PORT_EXPOSE=
# BACKEND_PORT_EXPOSE=
# FRONTEND_PORT_EXPOSE=

# # Code bind mounts (disabled - use images)
# BIND_MOUNT_CODE=

# # SSL/TLS (enforced in production)
# SSL_ENABLED=true
# SECURE_SSL_REDIRECT=True
# SESSION_COOKIE_SECURE=True
# CSRF_COOKIE_SECURE=True
# SECURE_HSTS_SECONDS=31536000

# # Database configuration (HIGHLY SECURE credentials for production)
# # CRITICAL: Generate with: openssl rand -base64 48
# DB_NAME=backend_prod_db
# DB_USER=backend_prod_user
# DB_PASSWORD=CHANGE_ME_TO_HIGHLY_SECURE_DATABASE_PASSWORD_MIN_48_CHARS

# # PostgreSQL tuning (production)
# POSTGRES_SHARED_BUFFERS=512MB
# POSTGRES_EFFECTIVE_CACHE_SIZE=2GB
# POSTGRES_MAX_CONNECTIONS=200

# # Redis configuration (highly secure password required)
# # CRITICAL: Generate with: openssl rand -base64 48
# REDIS_PASSWORD=CHANGE_ME_TO_HIGHLY_SECURE_REDIS_PASSWORD_MIN_48_CHARS
# REDIS_MAXMEMORY=1gb
# REDIS_SAVE_CONFIG=--save 900 1 --save 300 10 --save 60 10000 --appendfsync everysec

# # ALLOWED_HOSTS - THE KEY CONFIGURATION DIFFERENCE
# # CRITICAL: Only include your actual production domains
# ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com

# # CORS configuration (production)
# # CRITICAL: Only include your actual production domains
# CORS_ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
# CSRF_TRUSTED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# # Frontend runtime configuration (production)
# FRONTEND_API_URL=https://yourdomain.com
# FRONTEND_APP_NAME=Application
# FRONTEND_ENABLE_DEBUG=false
# FRONTEND_ENABLE_ANALYTICS=true
# FRONTEND_API_ENABLE_LOGGING=false

# # Vite configuration (production - minimal fallback)
# VITE_API_URL=https://yourdomain.com
# VITE_DEBUG=false

# # Image configuration (use pre-built, security-scanned images)
# BACKEND_IMAGE=ghcr.io/yourusername/backend:latest
# FRONTEND_IMAGE=ghcr.io/yourusername/frontend:latest

# # Nginx configuration (production with SSL)
# NGINX_CONFIG=./nginx/nginx.production.conf

# # Worker configuration (high concurrency)
# CELERY_WORKER_CONCURRENCY=8
# CELERY_LOG_LEVEL=warning
# CELERY_PROFILE=

# # Resource limits (strict for production)
# DB_CPU_LIMIT=4
# DB_MEMORY_LIMIT=2G
# DB_CPU_RESERVATION=2
# DB_MEMORY_RESERVATION=1G

# REDIS_CPU_LIMIT=2
# REDIS_MEMORY_LIMIT=1G
# REDIS_CPU_RESERVATION=1
# REDIS_MEMORY_RESERVATION=512M

# BACKEND_CPU_LIMIT=4
# BACKEND_MEMORY_LIMIT=4G
# BACKEND_CPU_RESERVATION=2
# BACKEND_MEMORY_RESERVATION=2G

# FRONTEND_CPU_LIMIT=2
# FRONTEND_MEMORY_LIMIT=2G
# FRONTEND_CPU_RESERVATION=1
# FRONTEND_MEMORY_RESERVATION=1G

# PROXY_CPU_LIMIT=2
# PROXY_MEMORY_LIMIT=1G
# PROXY_CPU_RESERVATION=1
# PROXY_MEMORY_RESERVATION=512M

# CELERY_CPU_LIMIT=4
# CELERY_MEMORY_LIMIT=2G
# CELERY_CPU_RESERVATION=2
# CELERY_MEMORY_RESERVATION=1G

# # Health check intervals (longer in production for stability)
# HEALTHCHECK_INTERVAL=30s
# HEALTHCHECK_START_PERIOD=60s

# # Logging configuration (minimal for production performance)
# LOG_MAX_SIZE=100m
# LOG_MAX_FILE=10
# LOG_COMPRESS=true

# =============================================================================
# QUICK REFERENCE: Environment Switching
# =============================================================================
#
# To switch between environments:
#
# 1. Edit this file
# 2. Change ENVIRONMENT variable at the top
# 3. Uncomment and fill in the appropriate section above
# 4. Comment out other environment sections
# 5. Save and restart: docker compose -f docker-compose.unified.yml up -d
#
# Example workflow:
#
#   # Development
#   ENVIRONMENT=local
#   docker compose -f docker-compose.unified.yml up -d
#
#   # Staging
#   ENVIRONMENT=staging
#   docker compose -f docker-compose.unified.yml up -d
#
#   # Production
#   ENVIRONMENT=production
#   docker compose -f docker-compose.unified.yml up -d
#
# =============================================================================

# =============================================================================
# CONFIGURATION SUMMARY BY ENVIRONMENT
# =============================================================================
#
# PRIMARY DIFFERENCE: ALLOWED_HOSTS
#
# Local:       localhost,127.0.0.1
# Staging:     localhost,staging.yourdomain.com
# Production:  yourdomain.com,www.yourdomain.com
#
# Other Key Differences:
#
# ┌──────────────┬────────────┬────────────┬────────────────┐
# │ Setting      │ Local      │ Staging    │ Production     │
# ├──────────────┼────────────┼────────────┼────────────────┤
# │ Ports        │ All        │ Proxy only │ Proxy only     │
# │ SSL          │ Disabled   │ Enabled    │ Enforced       │
# │ Debug        │ True       │ False      │ False          │
# │ DB Password  │ Simple     │ Secure     │ Highly secure  │
# │ Redis Pass   │ None       │ Secure     │ Highly secure  │
# │ Code Mounts  │ Enabled    │ Disabled   │ Disabled       │
# │ Images       │ Build      │ Registry   │ Registry       │
# │ Resources    │ Relaxed    │ Moderate   │ Strict         │
# │ Logging      │ Verbose    │ Enhanced   │ Minimal        │
# │ Analytics    │ Disabled   │ Disabled   │ Enabled        │
# └──────────────┴────────────┴────────────┴────────────────┘
#
# =============================================================================
