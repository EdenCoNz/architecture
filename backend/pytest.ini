[pytest]
# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*
testpaths = tests

# Output and behavior
addopts =
    # Verbose output
    -v
    # Show local variables in tracebacks
    -l
    # Short traceback format
    --tb=short
    # Strict marker enforcement
    --strict-markers
    # Coverage reporting
    --cov=app
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    # Fail if coverage below 80%
    --cov-fail-under=80
    # Show slowest tests
    --durations=10
    # Warnings as errors (helps catch deprecations)
    -W error::DeprecationWarning
    -W error::PendingDeprecationWarning

# Async support
asyncio_mode = auto

# Test markers
markers =
    unit: Unit tests - test individual components in isolation
    integration: Integration tests - test multiple components working together
    e2e: End-to-end tests - test complete user workflows
    slow: Tests that take significant time to run
    database: Tests that require database access
    api: API endpoint tests
    auth: Authentication/authorization tests

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = app
omit =
    */tests/*
    */migrations/*
    */alembic/*
    */__init__.py
branch = true
parallel = true

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines =
    # Standard pragma
    pragma: no cover
    # Don't complain about missing debug-only code
    def __repr__
    def __str__
    # Don't complain if tests don't hit defensive assertion code
    raise AssertionError
    raise NotImplementedError
    # Don't complain if non-runnable code isn't run
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    # Don't complain about abstract methods
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
