# =============================================================================
# Staging Environment Configuration
# =============================================================================
# This file contains configuration for the staging environment.
# Copy this file to .env.staging and fill in secure values.
#
# Usage:
#   cp .env.staging.example .env.staging
#   # Edit .env.staging with secure staging credentials
#   docker compose -f docker-compose.yml -f compose.staging.yml --env-file .env.staging up -d
#
# Or use the helper script:
#   ./docker-env.sh staging start
#
# IMPORTANT: NEVER commit .env.staging to version control!
# =============================================================================

# -----------------------------------------------------------------------------
# Environment Identification
# -----------------------------------------------------------------------------
ENVIRONMENT=staging
COMPOSE_PROJECT_NAME=app-staging

# -----------------------------------------------------------------------------
# Port Configuration (Staging)
# -----------------------------------------------------------------------------
# Only proxy ports exposed in staging (no direct service access)
PROXY_PORT=80
PROXY_SSL_PORT=443

# Internal ports (not exposed to host)
BACKEND_PORT=8000
FRONTEND_PORT=5173
DB_PORT=5432
REDIS_PORT=6379

# -----------------------------------------------------------------------------
# Database Configuration (Staging)
# -----------------------------------------------------------------------------
# SECURE credentials for staging database
DB_NAME=backend_staging_db
DB_USER=backend_staging_user
DB_PASSWORD=CHANGE_ME_TO_SECURE_DATABASE_PASSWORD
DB_HOST=db
DB_PORT=5432

# PostgreSQL tuning for staging
POSTGRES_SHARED_BUFFERS=256MB
POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
POSTGRES_MAX_CONNECTIONS=100
POSTGRES_WORK_MEM=4MB
POSTGRES_MAINTENANCE_WORK_MEM=128MB

# -----------------------------------------------------------------------------
# Redis Configuration (Staging)
# -----------------------------------------------------------------------------
# SECURE password for staging Redis
# Generate with: openssl rand -base64 32
REDIS_PASSWORD=CHANGE_ME_TO_SECURE_REDIS_PASSWORD
REDIS_MAXMEMORY=512mb

# -----------------------------------------------------------------------------
# Application Version
# -----------------------------------------------------------------------------
# Should match the git tag or CI/CD build version
APP_VERSION=1.0.0-staging

# -----------------------------------------------------------------------------
# Image Configuration (Staging)
# -----------------------------------------------------------------------------
# Use pre-built images from container registry
BACKEND_IMAGE=ghcr.io/edenconz/backend:staging
FRONTEND_IMAGE=ghcr.io/edenconz/frontend:staging

# -----------------------------------------------------------------------------
# Worker Configuration (Staging)
# -----------------------------------------------------------------------------
# Moderate concurrency for staging
CELERY_WORKER_CONCURRENCY=4
GUNICORN_WORKERS=4
GUNICORN_TIMEOUT=30
GUNICORN_MAX_REQUESTS=1000
GUNICORN_MAX_REQUESTS_JITTER=100

# -----------------------------------------------------------------------------
# Domain Configuration (Staging)
# -----------------------------------------------------------------------------
# Staging domain(s)
STAGING_DOMAIN=staging.yourdomain.com
STAGING_API_DOMAIN=staging.yourdomain.com

# -----------------------------------------------------------------------------
# SSL/TLS Configuration (Staging)
# -----------------------------------------------------------------------------
# Path to SSL certificates (if not using Let's Encrypt)
SSL_CERT_PATH=/etc/nginx/ssl/staging.crt
SSL_KEY_PATH=/etc/nginx/ssl/staging.key

# -----------------------------------------------------------------------------
# External Services (Staging)
# -----------------------------------------------------------------------------
# Email service (optional)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_HOST_USER=staging-email@gmail.com
EMAIL_HOST_PASSWORD=CHANGE_ME_TO_EMAIL_APP_PASSWORD
DEFAULT_FROM_EMAIL=noreply-staging@yourdomain.com

# Sentry error tracking (optional)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# SENTRY_ENVIRONMENT=staging
# SENTRY_TRACES_SAMPLE_RATE=0.1

# AWS S3 storage (optional)
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_STORAGE_BUCKET_NAME=your-staging-bucket
# AWS_S3_REGION_NAME=us-east-1
# USE_S3=true

# -----------------------------------------------------------------------------
# Security Configuration (Staging)
# -----------------------------------------------------------------------------
# Rate limiting
RATELIMIT_ENABLE=true

# JWT token lifetimes (minutes)
JWT_ACCESS_TOKEN_LIFETIME=15
JWT_REFRESH_TOKEN_LIFETIME=10080

# Password requirements
PASSWORD_MIN_LENGTH=12

# -----------------------------------------------------------------------------
# Feature Flags (Staging)
# -----------------------------------------------------------------------------
# Staging should mirror production but allow some debug features
ENABLE_DEBUG_TOOLBAR=false
ENABLE_SILK_PROFILING=false
ENABLE_HOT_RELOAD=false

# -----------------------------------------------------------------------------
# Notes
# -----------------------------------------------------------------------------
# 1. Replace ALL "CHANGE_ME" values with secure credentials
# 2. Use strong passwords: generate with openssl rand -base64 32
# 3. Configure STAGING_DOMAIN with your actual staging domain
# 4. Set up SSL certificates (Let's Encrypt recommended)
# 5. Enable Sentry for error tracking
# 6. Test this configuration thoroughly before deploying
# 7. NEVER use production credentials in staging
