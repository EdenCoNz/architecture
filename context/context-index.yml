# Context Index
# Maps keywords, topics, and tags to specific context files
# This allows intelligent, selective context loading based on task requirements

version: 1.0

# Context file definitions
context_files:
  # DevOps Context
  - path: context/devops/github-actions.md
    id: github-actions
    tags: [devops, ci-cd, github-actions, workflows, automation, pipeline, ci, cd, yaml]
    agents: [devops-engineer]
    description: GitHub Actions CI/CD workflows, best practices, and patterns
    keywords:
      - github actions
      - workflow
      - ci/cd
      - pipeline
      - continuous integration
      - continuous deployment
      - automation
      - .github/workflows

  - path: context/devops/docker.md
    id: docker
    tags: [devops, docker, containers, containerization, dockerfile, compose]
    agents: [devops-engineer]
    description: Docker containerization, Dockerfile best practices, Docker Compose
    keywords:
      - docker
      - dockerfile
      - container
      - containerize
      - docker-compose
      - image
      - multi-stage

  # Frontend Context
  - path: context/frontend/react-typescript-best-practices-2024-2025.md
    id: react-typescript
    tags: [frontend, react, typescript, components, hooks]
    agents: [frontend-developer]
    description: React and TypeScript best practices, patterns, and architecture
    keywords:
      - react
      - typescript
      - tsx
      - component
      - hooks
      - state management

  - path: context/frontend/material-ui-best-practices.md
    id: material-ui
    tags: [frontend, react, mui, material-ui, design-system, theming]
    agents: [frontend-developer]
    description: Material UI (MUI) theming, components, and styling approaches
    keywords:
      - material ui
      - mui
      - theme
      - sx prop
      - styled

  # Backend Context
  - path: context/backend/django-drf-mysql-best-practices.md
    id: django-drf
    tags: [backend, django, drf, api, rest, mysql, database]
    agents: [backend-developer]
    description: Django REST Framework and MySQL best practices
    keywords:
      - django
      - drf
      - rest framework
      - api
      - mysql
      - database
      - serializer
      - viewset

  # Testing Context
  - path: context/testing/frontend-testing-research-2025.md
    id: frontend-testing
    tags: [testing, frontend, jest, react-testing-library, e2e]
    agents: [frontend-developer]
    description: Frontend testing strategies, Jest, React Testing Library
    keywords:
      - frontend test
      - jest
      - react testing library
      - e2e
      - cypress

  - path: context/testing/django-drf-testing-best-practices-2025.md
    id: backend-testing
    tags: [testing, backend, django, pytest, api-testing]
    agents: [backend-developer]
    description: Django and DRF testing best practices with pytest
    keywords:
      - django test
      - pytest
      - api test
      - backend test

# Agent default context mappings
agent_defaults:
  devops-engineer:
    - github-actions
    - docker

  frontend-developer:
    - react-typescript
    - material-ui

  backend-developer:
    - django-drf

  ui-ux-designer:
    - material-ui

# Task-based context rules
# Define which context files to load based on task patterns
# These rules are applied in addition to agent defaults when analyzing user stories
context_rules:
  # DevOps - Multi-domain scenarios
  - pattern: "(github.?actions?|workflow|ci.?cd|pipeline|continuous.integration).*(docker|dockerfile|container|image)"
    context_ids: [github-actions, docker]
    description: "CI/CD pipeline with Docker containerization"

  - pattern: "(docker|dockerfile|container|image).*(github.?actions?|workflow|ci.?cd|pipeline)"
    context_ids: [docker, github-actions]
    description: "Docker builds in GitHub Actions"

  # DevOps - Single domain
  - pattern: "github.?actions?|workflow|\.github/workflows|ci.?cd.?pipeline|continuous.integration|continuous.deployment"
    context_ids: [github-actions]
    description: "GitHub Actions workflows and automation"

  - pattern: "docker(file)?|container(?!.*github)|multi.?stage|docker.?compose"
    context_ids: [docker]
    description: "Docker containerization only"

  # Frontend - Multi-domain scenarios
  - pattern: "(material.?ui|mui|theme|theming).*(react|component|tsx|hooks|state)"
    context_ids: [react-typescript, material-ui]
    description: "Material UI with React components"

  - pattern: "(react|component|tsx|hooks).*(material.?ui|mui|theme)"
    context_ids: [react-typescript, material-ui]
    description: "React components with Material UI"

  - pattern: "(react|component|tsx).*(test|testing|jest|vitest|rtl|react.?testing.?library)"
    context_ids: [react-typescript, frontend-testing]
    description: "React component testing"

  # Frontend - Single domain
  - pattern: "material.?ui|mui(?!.*react)|theme|theming|sx.?prop|styled.?component"
    context_ids: [material-ui]
    description: "Material UI theming and styling"

  - pattern: "react|typescript|tsx|component(?!.*(mui|material))|hooks|state.?management"
    context_ids: [react-typescript]
    description: "React and TypeScript development"

  # Backend - API development
  - pattern: "django|drf|rest.?framework|api(?!.*frontend)|endpoint|serializer|viewset|mysql|database"
    context_ids: [django-drf]
    description: "Django REST Framework API development"

  - pattern: "(django|api|backend).*(test|testing|pytest)"
    context_ids: [django-drf, backend-testing]
    description: "Backend API testing"

  # Testing - Specific patterns
  - pattern: "test|testing|unit.?test|integration.?test|e2e|end.?to.?end"
    context_ids: []
    load_agent_testing_context: true
    description: "Load agent-specific testing context (frontend-testing or backend-testing)"

  # Design - UI/UX patterns
  - pattern: "design.?system|design.?brief|ui.?ux|user.?flow|wireframe|mockup|design.?token|color.?palette|typography"
    context_ids: [material-ui]
    description: "Design system and UI/UX work"

# Story-level context hints
# These can be referenced in user stories to explicitly load context
story_context_hints:
  # Use in story descriptions like: "Context: full-stack-auth"
  full-stack-auth:
    context_ids: [react-typescript, material-ui, django-drf]
    description: "Full stack authentication (React + Django)"

  ci-cd-deployment:
    context_ids: [github-actions, docker]
    description: "Complete CI/CD with Docker deployment"

  frontend-feature:
    context_ids: [react-typescript, material-ui]
    description: "Frontend feature with Material UI"

  backend-api:
    context_ids: [django-drf]
    description: "Backend API development"

  tested-frontend:
    context_ids: [react-typescript, material-ui, frontend-testing]
    description: "Frontend with testing setup"

  tested-backend:
    context_ids: [django-drf, backend-testing]
    description: "Backend with testing setup"
